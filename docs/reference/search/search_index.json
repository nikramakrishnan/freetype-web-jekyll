{
    "docs": [
        {
            "location": "/ft2-toc/index.html",
            "text": "Docs\n \u00bb Table of Contents\n\n\n\n\nFreeType-2.9.1 API Reference\n\u00b6\n\n\nTable of Contents\n\u00b6\n\n\nGeneral Remarks\n\u00b6\n\n\n\n\nFreeType's header inclusion scheme\n\n\nHow client applications should include FreeType header files.\n\n\n\n\nUser allocation\n\n\nHow client applications should allocate FreeType data structures.\n\n\n\n\n\n\n\nCore API\n\u00b6\n\n\n\n\nFreeType Version\n\n\nFunctions and macros related to FreeType versions.\n\n\n\n\nBasic Data Types\n\n\nThe basic data types defined by the library.\n\n\n\n\nBase Interface\n\n\nThe FreeType\u00a02 base font interface.\n\n\n\n\nUnicode Variation Sequences\n\n\nThe FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.\n\n\n\n\nGlyph Color Management\n\n\nRetrieving and manipulating OpenType's \u2018CPAL\u2019 table data.\n\n\n\n\nGlyph Layer Management\n\n\nRetrieving and manipulating OpenType's \u2018COLR\u2019 table data.\n\n\n\n\nGlyph Management\n\n\nGeneric interface to manage individual glyph data.\n\n\n\n\nMac Specific Interface\n\n\nOnly available on the Macintosh.\n\n\n\n\nSize Management\n\n\nManaging multiple sizes per face.\n\n\n\n\nHeader File Macros\n\n\nMacro definitions used to #include specific header files.\n\n\n\n\n\n\n\nFormat-Specific API\n\u00b6\n\n\n\n\nMultiple Masters\n\n\nHow to manage Multiple Masters fonts.\n\n\n\n\nTrueType Tables\n\n\nTrueType-specific table types and functions.\n\n\n\n\nType 1 Tables\n\n\nType\u00a01-specific font tables.\n\n\n\n\nSFNT Names\n\n\nAccess the names embedded in TrueType and OpenType files.\n\n\n\n\nBDF and PCF Files\n\n\nBDF and PCF specific API.\n\n\n\n\nCID Fonts\n\n\nCID-keyed font-specific API.\n\n\n\n\nPFR Fonts\n\n\nPFR/TrueDoc-specific API.\n\n\n\n\nWindow FNT Files\n\n\nWindows FNT-specific API.\n\n\n\n\nFont Formats\n\n\nGetting the font format.\n\n\n\n\nGasp Table\n\n\nRetrieving TrueType \u2018gasp\u2019 table entries.\n\n\n\n\n\n\n\nControlling FreeType Modules\n\u00b6\n\n\n\n\nThe auto-hinter\n\n\nControlling the auto-hinting module.\n\n\n\n\nThe CFF driver\n\n\nControlling the CFF driver module.\n\n\n\n\nThe Type 1 and CID drivers\n\n\nControlling the Type\u00a01 and CID driver modules.\n\n\n\n\nThe TrueType driver\n\n\nControlling the TrueType driver module.\n\n\n\n\nThe PCF driver\n\n\nControlling the PCF driver module.\n\n\n\n\nDriver properties\n\n\nControlling driver modules.\n\n\n\n\nParameter Tags\n\n\nMacros for driver property and font loading parameter tags.\n\n\n\n\nSubpixel Rendering\n\n\nAPI to control subpixel rendering.\n\n\n\n\n\n\n\nCache Sub-System\n\u00b6\n\n\n\n\nCache Sub-System\n\n\nHow to cache face, size, and glyph data with FreeType\u00a02.\n\n\n\n\n\n\n\nSupport API\n\u00b6\n\n\n\n\nComputations\n\n\nCrunching fixed numbers and vectors.\n\n\n\n\nList Processing\n\n\nSimple management of lists.\n\n\n\n\nOutline Processing\n\n\nFunctions to create, transform, and render vectorial glyph images.\n\n\n\n\nQuick retrieval of advance values\n\n\nRetrieve horizontal and vertical advance values without processing glyph outlines, if possible.\n\n\n\n\nBitmap Handling\n\n\nHandling FT_Bitmap objects.\n\n\n\n\nScanline Converter\n\n\nHow vectorial outlines are converted into bitmaps and pixmaps.\n\n\n\n\nGlyph Stroker\n\n\nGenerating bordered and stroked glyphs.\n\n\n\n\nSystem Interface\n\n\nHow FreeType manages memory and i/o.\n\n\n\n\nModule Management\n\n\nHow to add, upgrade, remove, and control modules from FreeType.\n\n\n\n\nGZIP Streams\n\n\nUsing gzip-compressed font files.\n\n\n\n\nLZW Streams\n\n\nUsing LZW-compressed font files.\n\n\n\n\nBZIP2 Streams\n\n\nUsing bzip2-compressed font files.\n\n\n\n\n\n\n\nError Codes\n\u00b6\n\n\n\n\nError Enumerations\n\n\nHow to handle errors and error strings.\n\n\n\n\nError Code Values\n\n\nAll possible error codes returned by FreeType functions.\n\n\n\n\n\n\n\nMiscellaneous\n\u00b6\n\n\n\n\nTrueTypeGX/AAT Validation\n\n\nAn API to validate TrueTypeGX/AAT tables.\n\n\n\n\nIncremental Loading\n\n\nCustom Glyph Loading.\n\n\n\n\nThe TrueType Engine\n\n\nTrueType bytecode support.\n\n\n\n\nOpenType Validation\n\n\nAn API to validate OpenType tables.\n\n\n\n\n\n\n\nGlobal Index\n\u00b6\n\n\ngenerated on Sat Jul  7 13:40:41 2018 UTC",
            "title": "TOC"
        },
        {
            "location": "/ft2-toc/index.html#freetype-291-api-reference",
            "text": "",
            "title": "FreeType-2.9.1 API Reference"
        },
        {
            "location": "/ft2-toc/index.html#table-of-contents",
            "text": "",
            "title": "Table of Contents"
        },
        {
            "location": "/ft2-toc/index.html#general-remarks",
            "text": "FreeType's header inclusion scheme  How client applications should include FreeType header files.   User allocation  How client applications should allocate FreeType data structures.",
            "title": "General Remarks"
        },
        {
            "location": "/ft2-toc/index.html#core-api",
            "text": "FreeType Version  Functions and macros related to FreeType versions.   Basic Data Types  The basic data types defined by the library.   Base Interface  The FreeType\u00a02 base font interface.   Unicode Variation Sequences  The FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.   Glyph Color Management  Retrieving and manipulating OpenType's \u2018CPAL\u2019 table data.   Glyph Layer Management  Retrieving and manipulating OpenType's \u2018COLR\u2019 table data.   Glyph Management  Generic interface to manage individual glyph data.   Mac Specific Interface  Only available on the Macintosh.   Size Management  Managing multiple sizes per face.   Header File Macros  Macro definitions used to #include specific header files.",
            "title": "Core API"
        },
        {
            "location": "/ft2-toc/index.html#format-specific-api",
            "text": "Multiple Masters  How to manage Multiple Masters fonts.   TrueType Tables  TrueType-specific table types and functions.   Type 1 Tables  Type\u00a01-specific font tables.   SFNT Names  Access the names embedded in TrueType and OpenType files.   BDF and PCF Files  BDF and PCF specific API.   CID Fonts  CID-keyed font-specific API.   PFR Fonts  PFR/TrueDoc-specific API.   Window FNT Files  Windows FNT-specific API.   Font Formats  Getting the font format.   Gasp Table  Retrieving TrueType \u2018gasp\u2019 table entries.",
            "title": "Format-Specific API"
        },
        {
            "location": "/ft2-toc/index.html#controlling-freetype-modules",
            "text": "The auto-hinter  Controlling the auto-hinting module.   The CFF driver  Controlling the CFF driver module.   The Type 1 and CID drivers  Controlling the Type\u00a01 and CID driver modules.   The TrueType driver  Controlling the TrueType driver module.   The PCF driver  Controlling the PCF driver module.   Driver properties  Controlling driver modules.   Parameter Tags  Macros for driver property and font loading parameter tags.   Subpixel Rendering  API to control subpixel rendering.",
            "title": "Controlling FreeType Modules"
        },
        {
            "location": "/ft2-toc/index.html#cache-sub-system",
            "text": "Cache Sub-System  How to cache face, size, and glyph data with FreeType\u00a02.",
            "title": "Cache Sub-System"
        },
        {
            "location": "/ft2-toc/index.html#support-api",
            "text": "Computations  Crunching fixed numbers and vectors.   List Processing  Simple management of lists.   Outline Processing  Functions to create, transform, and render vectorial glyph images.   Quick retrieval of advance values  Retrieve horizontal and vertical advance values without processing glyph outlines, if possible.   Bitmap Handling  Handling FT_Bitmap objects.   Scanline Converter  How vectorial outlines are converted into bitmaps and pixmaps.   Glyph Stroker  Generating bordered and stroked glyphs.   System Interface  How FreeType manages memory and i/o.   Module Management  How to add, upgrade, remove, and control modules from FreeType.   GZIP Streams  Using gzip-compressed font files.   LZW Streams  Using LZW-compressed font files.   BZIP2 Streams  Using bzip2-compressed font files.",
            "title": "Support API"
        },
        {
            "location": "/ft2-toc/index.html#error-codes",
            "text": "Error Enumerations  How to handle errors and error strings.   Error Code Values  All possible error codes returned by FreeType functions.",
            "title": "Error Codes"
        },
        {
            "location": "/ft2-toc/index.html#miscellaneous",
            "text": "TrueTypeGX/AAT Validation  An API to validate TrueTypeGX/AAT tables.   Incremental Loading  Custom Glyph Loading.   The TrueType Engine  TrueType bytecode support.   OpenType Validation  An API to validate OpenType tables.",
            "title": "Miscellaneous"
        },
        {
            "location": "/ft2-toc/index.html#global-index",
            "text": "generated on Sat Jul  7 13:40:41 2018 UTC",
            "title": "Global Index"
        },
        {
            "location": "/ft2-index/index.html",
            "text": "Docs\n \u00bb Global Index\n\n\n\n\nFreeType-2.9.1 API Reference\n\u00b6\n\n\n\n\nBDF_PROPERTY_TYPE_ATOM\nFT_KERNING_UNSCALED\nFT_String\n\n\nBDF_PROPERTY_TYPE_CARDINAL\nFT_Kerning_Mode\nFT_Stroker\n\n\nBDF_PROPERTY_TYPE_INTEGER\nFT_LayerIterator\nFT_Stroker_BeginSubPath\n\n\nBDF_PROPERTY_TYPE_NONE\nFT_LCD_FILTER_DEFAULT\nFT_Stroker_ConicTo\n\n\nBDF_Property\nFT_LCD_FILTER_H\nFT_Stroker_CubicTo\n\n\nBDF_PropertyRec\nFT_LCD_FILTER_LEGACY\nFT_Stroker_Done\n\n\nBDF_PropertyType\nFT_LCD_FILTER_LEGACY1\nFT_Stroker_EndSubPath\n\n\nCID_FaceDict\nFT_LCD_FILTER_LIGHT\nFT_Stroker_Export\n\n\nCID_FaceDictRec\nFT_LCD_FILTER_NONE\nFT_Stroker_ExportBorder\n\n\nCID_FaceInfo\nFT_LcdFilter\nFT_Stroker_GetBorderCounts\n\n\nCID_FaceInfoRec\nFT_LcdFiveTapFilter\nFT_Stroker_GetCounts\n\n\nCID_FontDict\nFT_LIST_H\nFT_Stroker_LineCap\n\n\nCID_Info\nFT_Library\nFT_Stroker_LineJoin\n\n\ndarkening-parameters\nFT_Library_SetLcdFilter\nFT_Stroker_LineTo\n\n\ndefault-script\nFT_Library_SetLcdFilterWeights\nFT_Stroker_New\n\n\nFREETYPE_MAJOR\nFT_Library_SetLcdGeometry\nFT_Stroker_ParseOutline\n\n\nFREETYPE_MINOR\nFT_Library_Version\nFT_Stroker_Rewind\n\n\nFREETYPE_PATCH\nFT_List\nFT_Stroker_Set\n\n\nFREETYPE_XXX\nFT_List_Add\nFT_StrokerBorder\n\n\nFT_Activate_Size\nFT_List_Destructor\nFT_SUBGLYPH_FLAG_2X2\n\n\nFT_ADVANCE_FLAG_FAST_ONLY\nFT_List_Finalize\nFT_SUBGLYPH_FLAG_ARGS_ARE_WORDS\n\n\nFT_ADVANCES_H\nFT_List_Find\nFT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES\n\n\nFT_Add_Default_Modules\nFT_List_Insert\nFT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID\n\n\nFT_Add_Module\nFT_List_Iterate\nFT_SUBGLYPH_FLAG_SCALE\n\n\nFT_Alloc_Func\nFT_List_Iterator\nFT_SUBGLYPH_FLAG_USE_MY_METRICS\n\n\nFT_ANGLE_2PI\nFT_List_Remove\nFT_SUBGLYPH_FLAG_XXX\n\n\nFT_ANGLE_PI\nFT_List_Up\nFT_SUBGLYPH_FLAG_XY_SCALE\n\n\nFT_ANGLE_PI2\nFT_ListNode\nFT_SubGlyph\n\n\nFT_ANGLE_PI4\nFT_ListNodeRec\nFT_SYNTHESIS_H\n\n\nFT_Angle\nFT_ListRec\nFT_SYSTEM_H\n\n\nFT_Angle_Diff\nFT_LOAD_BITMAP_METRICS_ONLY\nFT_Tag\n\n\nFT_Atan2\nFT_LOAD_COLOR\nFT_Tan\n\n\nFT_Attach_File\nFT_LOAD_COMPUTE_METRICS\nFT_TRIGONOMETRY_H\n\n\nFT_Attach_Stream\nFT_LOAD_CROP_BITMAP\nFT_TRUETYPE_DRIVER_H\n\n\nFT_AUTOHINTER_H\nFT_LOAD_DEFAULT\nFT_TRUETYPE_ENGINE_TYPE_NONE\n\n\nFT_AUTOHINTER_SCRIPT_CJK\nFT_LOAD_FORCE_AUTOHINT\nFT_TRUETYPE_ENGINE_TYPE_PATENTED\n\n\nFT_AUTOHINTER_SCRIPT_INDIC\nFT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH\nFT_TRUETYPE_ENGINE_TYPE_UNPATENTED\n\n\nFT_AUTOHINTER_SCRIPT_LATIN\nFT_LOAD_IGNORE_TRANSFORM\nFT_TRUETYPE_IDS_H\n\n\nFT_AUTOHINTER_SCRIPT_NONE\nFT_LOAD_LINEAR_DESIGN\nFT_TRUETYPE_TABLES_H\n\n\nFT_AUTOHINTER_SCRIPT_XXX\nFT_LOAD_MONOCHROME\nFT_TRUETYPE_TAGS_H\n\n\nFT_BBOX_H\nFT_LOAD_NO_AUTOHINT\nFT_TrueTypeEngineType\n\n\nFT_BBox\nFT_LOAD_NO_BITMAP\nFT_TrueTypeGX_Free\n\n\nFT_BDF_H\nFT_LOAD_NO_HINTING\nFT_TrueTypeGX_Validate\n\n\nFT_BITMAP_H\nFT_LOAD_NO_RECURSE\nFT_TYPE1_TABLES_H\n\n\nFT_Bitmap\nFT_LOAD_NO_SCALE\nFT_TYPES_H\n\n\nFT_Bitmap_Blend\nFT_LOAD_PEDANTIC\nFT_UFWord\n\n\nFT_Bitmap_Convert\nFT_LOAD_RENDER\nFT_UInt\n\n\nFT_Bitmap_Copy\nFT_LOAD_TARGET_LCD\nFT_UInt16\n\n\nFT_Bitmap_Done\nFT_LOAD_TARGET_LCD_V\nFT_UInt32\n\n\nFT_Bitmap_Embolden\nFT_LOAD_TARGET_LIGHT\nFT_UInt64\n\n\nFT_Bitmap_Init\nFT_LOAD_TARGET_MODE\nFT_ULong\n\n\nFT_Bitmap_Size\nFT_LOAD_TARGET_MONO\nFT_UnitVector\n\n\nFT_BitmapGlyph\nFT_LOAD_TARGET_NORMAL\nFT_UShort\n\n\nFT_BitmapGlyphRec\nFT_LOAD_TARGET_XXX\nFT_VALIDATE_APPLE\n\n\nFT_Bool\nFT_LOAD_VERTICAL_LAYOUT\nFT_VALIDATE_BASE\n\n\nFT_Byte\nFT_LOAD_XXX\nFT_VALIDATE_bsln\n\n\nFT_Bytes\nFT_Load_Char\nFT_VALIDATE_CKERN\n\n\nFT_BZIP2_H\nFT_Load_Glyph\nFT_VALIDATE_CKERNXXX\n\n\nFT_CACHE_H\nFT_Load_Sfnt_Table\nFT_VALIDATE_feat\n\n\nFT_CeilFix\nFT_Long\nFT_VALIDATE_GDEF\n\n\nFT_CFF_DRIVER_H\nFT_LZW_H\nFT_VALIDATE_GPOS\n\n\nFT_Char\nFT_MAC_H\nFT_VALIDATE_GSUB\n\n\nFT_CharMap\nFT_MAKE_TAG\nFT_VALIDATE_GX\n\n\nFT_CharMapRec\nFT_Matrix\nFT_VALIDATE_GX_LENGTH\n\n\nFT_CID_H\nFT_Matrix_Invert\nFT_VALIDATE_GXXXX\n\n\nFT_ClassicKern_Free\nFT_Matrix_Multiply\nFT_VALIDATE_JSTF\n\n\nFT_ClassicKern_Validate\nFT_Memory\nFT_VALIDATE_just\n\n\nFT_COLOR_H\nFT_MemoryRec\nFT_VALIDATE_kern\n\n\nFT_CONFIG_CONFIG_H\nFT_MM_Axis\nFT_VALIDATE_lcar\n\n\nFT_CONFIG_MODULES_H\nFT_MM_Var\nFT_VALIDATE_MATH\n\n\nFT_CONFIG_OPTIONS_H\nFT_MODULE_ERRORS_H\nFT_VALIDATE_MS\n\n\nFT_CONFIG_STANDARD_LIBRARY_H\nFT_MODULE_H\nFT_VALIDATE_mort\n\n\nFT_Color\nFT_Module\nFT_VALIDATE_morx\n\n\nFT_Cos\nFT_Module_Class\nFT_VALIDATE_OT\n\n\nFT_Data\nFT_Module_Constructor\nFT_VALIDATE_OTXXX\n\n\nFT_DivFix\nFT_Module_Destructor\nFT_VALIDATE_opbd\n\n\nFT_Done_Face\nFT_Module_Requester\nFT_VALIDATE_prop\n\n\nFT_Done_FreeType\nFT_MULTIPLE_MASTERS_H\nFT_VALIDATE_trak\n\n\nFT_Done_Glyph\nFT_MulDiv\nFT_VAR_AXIS_FLAG_HIDDEN\n\n\nFT_Done_Library\nFT_MulFix\nFT_VAR_AXIS_FLAG_XXX\n\n\nFT_Done_MM_Var\nFT_Multi_Master\nFT_Var_Axis\n\n\nFT_Done_Size\nFT_New_Face\nFT_Var_Named_Style\n\n\nFT_DRIVER_H\nFT_New_Face_From_FOND\nFT_Vector\n\n\nFT_Driver\nFT_New_Face_From_FSRef\nFT_Vector_From_Polar\n\n\nFT_ENC_TAG\nFT_New_Face_From_FSSpec\nFT_Vector_Length\n\n\nFT_ENCODING_ADOBE_CUSTOM\nFT_New_Glyph\nFT_Vector_Polarize\n\n\nFT_ENCODING_ADOBE_EXPERT\nFT_New_Library\nFT_Vector_Rotate\n\n\nFT_ENCODING_ADOBE_LATIN_1\nFT_New_Memory_Face\nFT_Vector_Transform\n\n\nFT_ENCODING_ADOBE_STANDARD\nFT_New_Size\nFT_Vector_Unit\n\n\nFT_ENCODING_APPLE_ROMAN\nFT_Offset\nFT_WINFONTS_H\n\n\nFT_ENCODING_BIG5\nFT_OPEN_DRIVER\nFT_WinFNT_Header\n\n\nFT_ENCODING_JOHAB\nFT_OPEN_MEMORY\nFT_WinFNT_HeaderRec\n\n\nFT_ENCODING_MS_BIG5\nFT_OPEN_PARAMS\nFT_WinFNT_ID_CP1250\n\n\nFT_ENCODING_MS_GB2312\nFT_OPEN_PATHNAME\nFT_WinFNT_ID_CP1251\n\n\nFT_ENCODING_MS_JOHAB\nFT_OPEN_STREAM\nFT_WinFNT_ID_CP1252\n\n\nFT_ENCODING_MS_SJIS\nFT_OPEN_XXX\nFT_WinFNT_ID_CP1253\n\n\nFT_ENCODING_MS_SYMBOL\nFT_OPENTYPE_VALIDATE_H\nFT_WinFNT_ID_CP1254\n\n\nFT_ENCODING_MS_WANSUNG\nFT_Open_Args\nFT_WinFNT_ID_CP1255\n\n\nFT_ENCODING_NONE\nFT_Open_Face\nFT_WinFNT_ID_CP1256\n\n\nFT_ENCODING_OLD_LATIN_2\nFT_OpenType_Free\nFT_WinFNT_ID_CP1257\n\n\nFT_ENCODING_PRC\nFT_OpenType_Validate\nFT_WinFNT_ID_CP1258\n\n\nFT_ENCODING_SJIS\nFT_ORIENTATION_FILL_LEFT\nFT_WinFNT_ID_CP1361\n\n\nFT_ENCODING_UNICODE\nFT_ORIENTATION_FILL_RIGHT\nFT_WinFNT_ID_CP874\n\n\nFT_ENCODING_WANSUNG\nFT_ORIENTATION_NONE\nFT_WinFNT_ID_CP932\n\n\nFT_Encoding\nFT_ORIENTATION_POSTSCRIPT\nFT_WinFNT_ID_CP936\n\n\nFT_ERRORS_H\nFT_ORIENTATION_TRUETYPE\nFT_WinFNT_ID_CP949\n\n\nFT_Err_XXX\nFT_Orientation\nFT_WinFNT_ID_CP950\n\n\nFT_Error\nFT_OUTLINE_EVEN_ODD_FILL\nFT_WinFNT_ID_DEFAULT\n\n\nFT_F26Dot6\nFT_OUTLINE_H\nFT_WinFNT_ID_MAC\n\n\nFT_F2Dot14\nFT_OUTLINE_HIGH_PRECISION\nFT_WinFNT_ID_OEM\n\n\nFT_FACE_FLAG_CID_KEYED\nFT_OUTLINE_IGNORE_DROPOUTS\nFT_WinFNT_ID_SYMBOL\n\n\nFT_FACE_FLAG_COLOR\nFT_OUTLINE_INCLUDE_STUBS\nFT_WinFNT_ID_XXX\n\n\nFT_FACE_FLAG_EXTERNAL_STREAM\nFT_OUTLINE_NONE\nFTC_CMapCache\n\n\nFT_FACE_FLAG_FAST_GLYPHS\nFT_OUTLINE_OWNER\nFTC_CMapCache_Lookup\n\n\nFT_FACE_FLAG_FIXED_SIZES\nFT_OUTLINE_REVERSE_FILL\nFTC_CMapCache_New\n\n\nFT_FACE_FLAG_FIXED_WIDTH\nFT_OUTLINE_SINGLE_PASS\nFTC_Face_Requester\n\n\nFT_FACE_FLAG_GLYPH_NAMES\nFT_OUTLINE_SMART_DROPOUTS\nFTC_FaceID\n\n\nFT_FACE_FLAG_HINTER\nFT_OUTLINE_XXX\nFTC_ImageCache\n\n\nFT_FACE_FLAG_HORIZONTAL\nFT_Outline\nFTC_ImageCache_Lookup\n\n\nFT_FACE_FLAG_KERNING\nFT_Outline_Check\nFTC_ImageCache_LookupScaler\n\n\nFT_FACE_FLAG_MULTIPLE_MASTERS\nFT_Outline_ConicToFunc\nFTC_ImageCache_New\n\n\nFT_FACE_FLAG_SCALABLE\nFT_Outline_Copy\nFTC_ImageType\n\n\nFT_FACE_FLAG_SFNT\nFT_Outline_CubicToFunc\nFTC_ImageTypeRec\n\n\nFT_FACE_FLAG_TRICKY\nFT_Outline_Decompose\nFTC_Manager\n\n\nFT_FACE_FLAG_VARIATION\nFT_Outline_Done\nFTC_Manager_Done\n\n\nFT_FACE_FLAG_VERTICAL\nFT_Outline_Embolden\nFTC_Manager_LookupFace\n\n\nFT_FACE_FLAG_XXX\nFT_Outline_EmboldenXY\nFTC_Manager_LookupSize\n\n\nFT_Face\nFT_Outline_Funcs\nFTC_Manager_New\n\n\nFT_Face_CheckTrueTypePatents\nFT_Outline_Get_BBox\nFTC_Manager_RemoveFaceID\n\n\nFT_Face_GetCharsOfVariant\nFT_Outline_Get_Bitmap\nFTC_Manager_Reset\n\n\nFT_Face_GetCharVariantIndex\nFT_Outline_Get_CBox\nFTC_Node\n\n\nFT_Face_GetCharVariantIsDefault\nFT_Outline_Get_Orientation\nFTC_Node_Unref\n\n\nFT_Face_GetVariantSelectors\nFT_Outline_GetInsideBorder\nFTC_SBit\n\n\nFT_Face_GetVariantsOfChar\nFT_Outline_GetOutsideBorder\nFTC_SBitCache\n\n\nFT_Face_Internal\nFT_Outline_LineToFunc\nFTC_SBitCache_Lookup\n\n\nFT_Face_Properties\nFT_Outline_MoveToFunc\nFTC_SBitCache_LookupScaler\n\n\nFT_Face_SetUnpatentedHinting\nFT_Outline_New\nFTC_SBitCache_New\n\n\nFT_FaceRec\nFT_Outline_Render\nFTC_SBitRec\n\n\nFT_Fixed\nFT_Outline_Reverse\nFTC_Scaler\n\n\nFT_FloorFix\nFT_Outline_Transform\nFTC_ScalerRec\n\n\nFT_FONT_FORMATS_H\nFT_Outline_Translate\nfallback-script\n\n\nFT_FREETYPE_H\nFT_OutlineGlyph\nglyph-to-script-map\n\n\nFT_Free_Func\nFT_OutlineGlyphRec\nhinting-engine\n\n\nFT_FSTYPE_BITMAP_EMBEDDING_ONLY\nFT_PALETTE_FOR_DARK_BACKGROUND\nincrease-x-height\n\n\nFT_FSTYPE_EDITABLE_EMBEDDING\nFT_PALETTE_FOR_LIGHT_BACKGROUND\ninterpreter-version\n\n\nFT_FSTYPE_INSTALLABLE_EMBEDDING\nFT_PALETTE_XXX\nno-long-family-names\n\n\nFT_FSTYPE_NO_SUBSETTING\nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY\nno-stem-darkening\n\n\nFT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING\nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY\nPS_DICT_BLUE_FUZZ\n\n\nFT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING\nFT_PARAM_TAG_INCREMENTAL\nPS_DICT_BLUE_SCALE\n\n\nFT_FSTYPE_XXX\nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\nPS_DICT_BLUE_SHIFT\n\n\nFT_FWord\nFT_PARAM_TAG_RANDOM_SEED\nPS_DICT_BLUE_VALUE\n\n\nFT_GASP_DO_GRAY\nFT_PARAM_TAG_STEM_DARKENING\nPS_DICT_CHAR_STRING\n\n\nFT_GASP_DO_GRIDFIT\nFT_PARAM_TAG_UNPATENTED_HINTING\nPS_DICT_CHAR_STRING_KEY\n\n\nFT_GASP_H\nFT_Palette_Data\nPS_DICT_ENCODING_ENTRY\n\n\nFT_GASP_NO_TABLE\nFT_Palette_Data_Get\nPS_DICT_ENCODING_TYPE\n\n\nFT_GASP_SYMMETRIC_GRIDFIT\nFT_Palette_Select\nPS_DICT_FAMILY_BLUE\n\n\nFT_GASP_SYMMETRIC_SMOOTHING\nFT_Palette_Set_Foreground_Color\nPS_DICT_FAMILY_NAME\n\n\nFT_GASP_XXX\nFT_Parameter\nPS_DICT_FAMILY_OTHER_BLUE\n\n\nFT_Generic\nFT_PCF_DRIVER_H\nPS_DICT_FONT_BBOX\n\n\nFT_Generic_Finalizer\nFT_PFR_H\nPS_DICT_FONT_MATRIX\n\n\nFT_Get_Advance\nFT_PIXEL_MODE_BGRA\nPS_DICT_FONT_NAME\n\n\nFT_Get_Advances\nFT_PIXEL_MODE_GRAY\nPS_DICT_FONT_TYPE\n\n\nFT_Get_BDF_Charset_ID\nFT_PIXEL_MODE_GRAY2\nPS_DICT_FORCE_BOLD\n\n\nFT_Get_BDF_Property\nFT_PIXEL_MODE_GRAY4\nPS_DICT_FS_TYPE\n\n\nFT_Get_Char_Index\nFT_PIXEL_MODE_LCD\nPS_DICT_FULL_NAME\n\n\nFT_Get_Charmap_Index\nFT_PIXEL_MODE_LCD_V\nPS_DICT_IS_FIXED_PITCH\n\n\nFT_Get_CID_From_Glyph_Index\nFT_PIXEL_MODE_MONO\nPS_DICT_ITALIC_ANGLE\n\n\nFT_Get_CID_Is_Internally_CID_Keyed\nFT_PIXEL_MODE_NONE\nPS_DICT_LANGUAGE_GROUP\n\n\nFT_Get_CID_Registry_Ordering_Supplement\nFT_Pixel_Mode\nPS_DICT_LEN_IV\n\n\nFT_Get_CMap_Format\nFT_Pointer\nPS_DICT_MIN_FEATURE\n\n\nFT_Get_CMap_Language_ID\nFT_Pos\nPS_DICT_NOTICE\n\n\nFT_Get_Color_Glyph_Layer\nFT_Prop_GlyphToScriptMap\nPS_DICT_NUM_BLUE_VALUES\n\n\nFT_Get_First_Char\nFT_Prop_IncreaseXHeight\nPS_DICT_NUM_CHAR_STRINGS\n\n\nFT_Get_Font_Format\nFT_Property_Get\nPS_DICT_NUM_FAMILY_BLUES\n\n\nFT_Get_FSType_Flags\nFT_Property_Set\nPS_DICT_NUM_FAMILY_OTHER_BLUES\n\n\nFT_Get_Gasp\nFT_PtrDist\nPS_DICT_NUM_OTHER_BLUES\n\n\nFT_Get_Glyph\nFT_RASTER_FLAG_AA\nPS_DICT_NUM_STEM_SNAP_H\n\n\nFT_Get_Glyph_Name\nFT_RASTER_FLAG_CLIP\nPS_DICT_NUM_STEM_SNAP_V\n\n\nFT_Get_Kerning\nFT_RASTER_FLAG_DEFAULT\nPS_DICT_NUM_SUBRS\n\n\nFT_Get_MM_Blend_Coordinates\nFT_RASTER_FLAG_DIRECT\nPS_DICT_OTHER_BLUE\n\n\nFT_Get_MM_Var\nFT_RASTER_FLAG_XXX\nPS_DICT_PAINT_TYPE\n\n\nFT_Get_Module\nFT_Raster\nPS_DICT_PASSWORD\n\n\nFT_Get_Multi_Master\nFT_Raster_BitSet_Func\nPS_DICT_RND_STEM_UP\n\n\nFT_Get_Name_Index\nFT_Raster_BitTest_Func\nPS_DICT_STD_HW\n\n\nFT_Get_Next_Char\nFT_Raster_DoneFunc\nPS_DICT_STD_VW\n\n\nFT_Get_PFR_Advance\nFT_Raster_Funcs\nPS_DICT_STEM_SNAP_H\n\n\nFT_Get_PFR_Kerning\nFT_Raster_NewFunc\nPS_DICT_STEM_SNAP_V\n\n\nFT_Get_PFR_Metrics\nFT_Raster_Params\nPS_DICT_SUBR\n\n\nFT_Get_Postscript_Name\nFT_Raster_RenderFunc\nPS_DICT_UNDERLINE_POSITION\n\n\nFT_Get_PS_Font_Info\nFT_Raster_ResetFunc\nPS_DICT_UNDERLINE_THICKNESS\n\n\nFT_Get_PS_Font_Private\nFT_Raster_SetModeFunc\nPS_DICT_UNIQUE_ID\n\n\nFT_Get_PS_Font_Value\nFT_RENDER_H\nPS_DICT_VERSION\n\n\nFT_Get_Renderer\nFT_RENDER_MODE_LCD\nPS_DICT_WEIGHT\n\n\nFT_Get_Sfnt_LangTag\nFT_RENDER_MODE_LCD_V\nPS_Dict_Keys\n\n\nFT_Get_Sfnt_Name\nFT_RENDER_MODE_LIGHT\nPS_FontInfo\n\n\nFT_Get_Sfnt_Name_Count\nFT_RENDER_MODE_MONO\nPS_FontInfoRec\n\n\nFT_Get_Sfnt_Table\nFT_RENDER_MODE_NORMAL\nPS_Private\n\n\nFT_Get_SubGlyph_Info\nFT_Realloc_Func\nPS_PrivateRec\n\n\nFT_Get_Track_Kerning\nFT_Reference_Face\nrandom-seed\n\n\nFT_Get_TrueType_Engine_Type\nFT_Reference_Library\nT1_BLEND_BLUE_SCALE\n\n\nFT_Get_Var_Axis_Flags\nFT_Remove_Module\nT1_BLEND_BLUE_SHIFT\n\n\nFT_Get_Var_Blend_Coordinates\nFT_Render_Glyph\nT1_BLEND_BLUE_VALUES\n\n\nFT_Get_Var_Design_Coordinates\nFT_Render_Mode\nT1_BLEND_FAMILY_BLUES\n\n\nFT_Get_WinFNT_Header\nFT_Renderer\nT1_BLEND_FAMILY_OTHER_BLUES\n\n\nFT_GetFile_From_Mac_ATS_Name\nFT_Renderer_Class\nT1_BLEND_FORCE_BOLD\n\n\nFT_GetFile_From_Mac_Name\nFT_Request_Size\nT1_BLEND_ITALIC_ANGLE\n\n\nFT_GetFilePath_From_Mac_ATS_Name\nFT_RoundFix\nT1_BLEND_OTHER_BLUES\n\n\nFT_GLYPH_BBOX_GRIDFIT\nFT_Select_Charmap\nT1_BLEND_STANDARD_HEIGHT\n\n\nFT_GLYPH_BBOX_PIXELS\nFT_Select_Size\nT1_BLEND_STANDARD_WIDTH\n\n\nFT_GLYPH_BBOX_SUBPIXELS\nFT_Set_Char_Size\nT1_BLEND_STEM_SNAP_HEIGHTS\n\n\nFT_GLYPH_BBOX_TRUNCATE\nFT_Set_Charmap\nT1_BLEND_STEM_SNAP_WIDTHS\n\n\nFT_GLYPH_BBOX_UNSCALED\nFT_Set_Debug_Hook\nT1_BLEND_UNDERLINE_POSITION\n\n\nFT_GLYPH_FORMAT_BITMAP\nFT_Set_Default_Properties\nT1_BLEND_UNDERLINE_THICKNESS\n\n\nFT_GLYPH_FORMAT_COMPOSITE\nFT_Set_MM_Blend_Coordinates\nT1_Blend_Flags\n\n\nFT_GLYPH_FORMAT_NONE\nFT_Set_MM_Design_Coordinates\nT1_ENCODING_TYPE_ARRAY\n\n\nFT_GLYPH_FORMAT_OUTLINE\nFT_Set_Named_Instance\nT1_ENCODING_TYPE_EXPERT\n\n\nFT_GLYPH_FORMAT_PLOTTER\nFT_Set_Pixel_Sizes\nT1_ENCODING_TYPE_ISOLATIN1\n\n\nFT_GLYPH_H\nFT_Set_Renderer\nT1_ENCODING_TYPE_NONE\n\n\nFT_Glyph\nFT_Set_Transform\nT1_ENCODING_TYPE_STANDARD\n\n\nFT_Glyph_BBox_Mode\nFT_Set_Var_Blend_Coordinates\nT1_EncodingType\n\n\nFT_Glyph_Copy\nFT_Set_Var_Design_Coordinates\nT1_FontInfo\n\n\nFT_Glyph_Format\nFT_SFNT_HEAD\nT1_Private\n\n\nFT_Glyph_Get_CBox\nFT_SFNT_HHEA\nTT_ADOBE_ID_CUSTOM\n\n\nFT_Glyph_Metrics\nFT_SFNT_MAXP\nTT_ADOBE_ID_EXPERT\n\n\nFT_Glyph_Stroke\nFT_SFNT_NAMES_H\nTT_ADOBE_ID_LATIN_1\n\n\nFT_Glyph_StrokeBorder\nFT_SFNT_OS2\nTT_ADOBE_ID_STANDARD\n\n\nFT_Glyph_To_Bitmap\nFT_SFNT_PCLT\nTT_ADOBE_ID_XXX\n\n\nFT_Glyph_Transform\nFT_SFNT_POST\nTT_APPLE_ID_DEFAULT\n\n\nFT_GlyphRec\nFT_SFNT_VHEA\nTT_APPLE_ID_FULL_UNICODE\n\n\nFT_GlyphSlot\nFT_Sfnt_Table_Info\nTT_APPLE_ID_ISO_10646\n\n\nFT_GlyphSlot_Own_Bitmap\nFT_Sfnt_Tag\nTT_APPLE_ID_UNICODE_1_1\n\n\nFT_GlyphSlotRec\nFT_SfntLangTag\nTT_APPLE_ID_UNICODE_2_0\n\n\nFT_GX_VALIDATE_H\nFT_SfntName\nTT_APPLE_ID_UNICODE_32\n\n\nFT_GZIP_H\nFT_Short\nTT_APPLE_ID_VARIANT_SELECTOR\n\n\nFT_Gzip_Uncompress\nFT_SIZE_REQUEST_TYPE_BBOX\nTT_APPLE_ID_XXX\n\n\nFT_HAS_COLOR\nFT_SIZE_REQUEST_TYPE_CELL\nTT_Header\n\n\nFT_HAS_FAST_GLYPHS\nFT_SIZE_REQUEST_TYPE_NOMINAL\nTT_HoriHeader\n\n\nFT_HAS_FIXED_SIZES\nFT_SIZE_REQUEST_TYPE_REAL_DIM\nTT_INTERPRETER_VERSION_35\n\n\nFT_HAS_GLYPH_NAMES\nFT_SIZE_REQUEST_TYPE_SCALES\nTT_INTERPRETER_VERSION_38\n\n\nFT_HAS_HORIZONTAL\nFT_SIZES_H\nTT_INTERPRETER_VERSION_40\n\n\nFT_HAS_KERNING\nFT_Sin\nTT_INTERPRETER_VERSION_XXX\n\n\nFT_HAS_MULTIPLE_MASTERS\nFT_Size\nTT_ISO_ID_10646\n\n\nFT_HAS_VERTICAL\nFT_Size_Internal\nTT_ISO_ID_7BIT_ASCII\n\n\nFT_Has_PS_Glyph_Names\nFT_Size_Metrics\nTT_ISO_ID_8859_1\n\n\nFT_HINTING_ADOBE\nFT_Size_Request\nTT_ISO_ID_XXX\n\n\nFT_HINTING_FREETYPE\nFT_Size_Request_Type\nTT_MAC_ID_XXX\n\n\nFT_HINTING_XXX\nFT_Size_RequestRec\nTT_MAC_LANGID_XXX\n\n\nFT_IMAGE_H\nFT_SizeRec\nTT_MaxProfile\n\n\nFT_IMAGE_TAG\nFT_Slot_Internal\nTT_MS_ID_BIG_5\n\n\nFT_INCREMENTAL_H\nFT_Span\nTT_MS_ID_JOHAB\n\n\nFT_Incremental\nFT_SpanFunc\nTT_MS_ID_PRC\n\n\nFT_Incremental_FreeGlyphDataFunc\nFT_STROKER_BORDER_LEFT\nTT_MS_ID_SJIS\n\n\nFT_Incremental_FuncsRec\nFT_STROKER_BORDER_RIGHT\nTT_MS_ID_SYMBOL_CS\n\n\nFT_Incremental_GetGlyphDataFunc\nFT_STROKER_H\nTT_MS_ID_UCS_4\n\n\nFT_Incremental_GetGlyphMetricsFunc\nFT_STROKER_LINECAP_BUTT\nTT_MS_ID_UNICODE_CS\n\n\nFT_Incremental_Interface\nFT_STROKER_LINECAP_ROUND\nTT_MS_ID_WANSUNG\n\n\nFT_Incremental_InterfaceRec\nFT_STROKER_LINECAP_SQUARE\nTT_MS_ID_XXX\n\n\nFT_Incremental_Metrics\nFT_STROKER_LINEJOIN_BEVEL\nTT_MS_LANGID_XXX\n\n\nFT_Incremental_MetricsRec\nFT_STROKER_LINEJOIN_MITER\nTT_NAME_ID_XXX\n\n\nFT_Init_FreeType\nFT_STROKER_LINEJOIN_MITER_FIXED\nTT_OS2\n\n\nFT_Int\nFT_STROKER_LINEJOIN_MITER_VARIABLE\nTT_PCLT\n\n\nFT_Int16\nFT_STROKER_LINEJOIN_ROUND\nTT_PLATFORM_ADOBE\n\n\nFT_Int32\nFT_STYLE_FLAG_BOLD\nTT_PLATFORM_APPLE_UNICODE\n\n\nFT_Int64\nFT_STYLE_FLAG_ITALIC\nTT_PLATFORM_CUSTOM\n\n\nFT_IS_CID_KEYED\nFT_STYLE_FLAG_XXX\nTT_PLATFORM_ISO\n\n\nFT_IS_FIXED_WIDTH\nFT_Stream\nTT_PLATFORM_MACINTOSH\n\n\nFT_IS_NAMED_INSTANCE\nFT_Stream_CloseFunc\nTT_PLATFORM_MICROSOFT\n\n\nFT_IS_SCALABLE\nFT_Stream_IoFunc\nTT_PLATFORM_XXX\n\n\nFT_IS_SFNT\nFT_Stream_OpenBzip2\nTT_Postscript\n\n\nFT_IS_TRICKY\nFT_Stream_OpenGzip\nTT_UCR_XXX\n\n\nFT_IS_VARIATION\nFT_Stream_OpenLZW\nTT_VertHeader\n\n\nFT_KERNING_DEFAULT\nFT_StreamDesc\nwarping\n\n\nFT_KERNING_UNFITTED\nFT_StreamRec\n\n\n\n\n\ngenerated on Sat Jul  7 13:40:41 2018 UTC",
            "title": "Index"
        },
        {
            "location": "/ft2-index/index.html#freetype-291-api-reference",
            "text": "BDF_PROPERTY_TYPE_ATOM FT_KERNING_UNSCALED FT_String  BDF_PROPERTY_TYPE_CARDINAL FT_Kerning_Mode FT_Stroker  BDF_PROPERTY_TYPE_INTEGER FT_LayerIterator FT_Stroker_BeginSubPath  BDF_PROPERTY_TYPE_NONE FT_LCD_FILTER_DEFAULT FT_Stroker_ConicTo  BDF_Property FT_LCD_FILTER_H FT_Stroker_CubicTo  BDF_PropertyRec FT_LCD_FILTER_LEGACY FT_Stroker_Done  BDF_PropertyType FT_LCD_FILTER_LEGACY1 FT_Stroker_EndSubPath  CID_FaceDict FT_LCD_FILTER_LIGHT FT_Stroker_Export  CID_FaceDictRec FT_LCD_FILTER_NONE FT_Stroker_ExportBorder  CID_FaceInfo FT_LcdFilter FT_Stroker_GetBorderCounts  CID_FaceInfoRec FT_LcdFiveTapFilter FT_Stroker_GetCounts  CID_FontDict FT_LIST_H FT_Stroker_LineCap  CID_Info FT_Library FT_Stroker_LineJoin  darkening-parameters FT_Library_SetLcdFilter FT_Stroker_LineTo  default-script FT_Library_SetLcdFilterWeights FT_Stroker_New  FREETYPE_MAJOR FT_Library_SetLcdGeometry FT_Stroker_ParseOutline  FREETYPE_MINOR FT_Library_Version FT_Stroker_Rewind  FREETYPE_PATCH FT_List FT_Stroker_Set  FREETYPE_XXX FT_List_Add FT_StrokerBorder  FT_Activate_Size FT_List_Destructor FT_SUBGLYPH_FLAG_2X2  FT_ADVANCE_FLAG_FAST_ONLY FT_List_Finalize FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS  FT_ADVANCES_H FT_List_Find FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES  FT_Add_Default_Modules FT_List_Insert FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID  FT_Add_Module FT_List_Iterate FT_SUBGLYPH_FLAG_SCALE  FT_Alloc_Func FT_List_Iterator FT_SUBGLYPH_FLAG_USE_MY_METRICS  FT_ANGLE_2PI FT_List_Remove FT_SUBGLYPH_FLAG_XXX  FT_ANGLE_PI FT_List_Up FT_SUBGLYPH_FLAG_XY_SCALE  FT_ANGLE_PI2 FT_ListNode FT_SubGlyph  FT_ANGLE_PI4 FT_ListNodeRec FT_SYNTHESIS_H  FT_Angle FT_ListRec FT_SYSTEM_H  FT_Angle_Diff FT_LOAD_BITMAP_METRICS_ONLY FT_Tag  FT_Atan2 FT_LOAD_COLOR FT_Tan  FT_Attach_File FT_LOAD_COMPUTE_METRICS FT_TRIGONOMETRY_H  FT_Attach_Stream FT_LOAD_CROP_BITMAP FT_TRUETYPE_DRIVER_H  FT_AUTOHINTER_H FT_LOAD_DEFAULT FT_TRUETYPE_ENGINE_TYPE_NONE  FT_AUTOHINTER_SCRIPT_CJK FT_LOAD_FORCE_AUTOHINT FT_TRUETYPE_ENGINE_TYPE_PATENTED  FT_AUTOHINTER_SCRIPT_INDIC FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH FT_TRUETYPE_ENGINE_TYPE_UNPATENTED  FT_AUTOHINTER_SCRIPT_LATIN FT_LOAD_IGNORE_TRANSFORM FT_TRUETYPE_IDS_H  FT_AUTOHINTER_SCRIPT_NONE FT_LOAD_LINEAR_DESIGN FT_TRUETYPE_TABLES_H  FT_AUTOHINTER_SCRIPT_XXX FT_LOAD_MONOCHROME FT_TRUETYPE_TAGS_H  FT_BBOX_H FT_LOAD_NO_AUTOHINT FT_TrueTypeEngineType  FT_BBox FT_LOAD_NO_BITMAP FT_TrueTypeGX_Free  FT_BDF_H FT_LOAD_NO_HINTING FT_TrueTypeGX_Validate  FT_BITMAP_H FT_LOAD_NO_RECURSE FT_TYPE1_TABLES_H  FT_Bitmap FT_LOAD_NO_SCALE FT_TYPES_H  FT_Bitmap_Blend FT_LOAD_PEDANTIC FT_UFWord  FT_Bitmap_Convert FT_LOAD_RENDER FT_UInt  FT_Bitmap_Copy FT_LOAD_TARGET_LCD FT_UInt16  FT_Bitmap_Done FT_LOAD_TARGET_LCD_V FT_UInt32  FT_Bitmap_Embolden FT_LOAD_TARGET_LIGHT FT_UInt64  FT_Bitmap_Init FT_LOAD_TARGET_MODE FT_ULong  FT_Bitmap_Size FT_LOAD_TARGET_MONO FT_UnitVector  FT_BitmapGlyph FT_LOAD_TARGET_NORMAL FT_UShort  FT_BitmapGlyphRec FT_LOAD_TARGET_XXX FT_VALIDATE_APPLE  FT_Bool FT_LOAD_VERTICAL_LAYOUT FT_VALIDATE_BASE  FT_Byte FT_LOAD_XXX FT_VALIDATE_bsln  FT_Bytes FT_Load_Char FT_VALIDATE_CKERN  FT_BZIP2_H FT_Load_Glyph FT_VALIDATE_CKERNXXX  FT_CACHE_H FT_Load_Sfnt_Table FT_VALIDATE_feat  FT_CeilFix FT_Long FT_VALIDATE_GDEF  FT_CFF_DRIVER_H FT_LZW_H FT_VALIDATE_GPOS  FT_Char FT_MAC_H FT_VALIDATE_GSUB  FT_CharMap FT_MAKE_TAG FT_VALIDATE_GX  FT_CharMapRec FT_Matrix FT_VALIDATE_GX_LENGTH  FT_CID_H FT_Matrix_Invert FT_VALIDATE_GXXXX  FT_ClassicKern_Free FT_Matrix_Multiply FT_VALIDATE_JSTF  FT_ClassicKern_Validate FT_Memory FT_VALIDATE_just  FT_COLOR_H FT_MemoryRec FT_VALIDATE_kern  FT_CONFIG_CONFIG_H FT_MM_Axis FT_VALIDATE_lcar  FT_CONFIG_MODULES_H FT_MM_Var FT_VALIDATE_MATH  FT_CONFIG_OPTIONS_H FT_MODULE_ERRORS_H FT_VALIDATE_MS  FT_CONFIG_STANDARD_LIBRARY_H FT_MODULE_H FT_VALIDATE_mort  FT_Color FT_Module FT_VALIDATE_morx  FT_Cos FT_Module_Class FT_VALIDATE_OT  FT_Data FT_Module_Constructor FT_VALIDATE_OTXXX  FT_DivFix FT_Module_Destructor FT_VALIDATE_opbd  FT_Done_Face FT_Module_Requester FT_VALIDATE_prop  FT_Done_FreeType FT_MULTIPLE_MASTERS_H FT_VALIDATE_trak  FT_Done_Glyph FT_MulDiv FT_VAR_AXIS_FLAG_HIDDEN  FT_Done_Library FT_MulFix FT_VAR_AXIS_FLAG_XXX  FT_Done_MM_Var FT_Multi_Master FT_Var_Axis  FT_Done_Size FT_New_Face FT_Var_Named_Style  FT_DRIVER_H FT_New_Face_From_FOND FT_Vector  FT_Driver FT_New_Face_From_FSRef FT_Vector_From_Polar  FT_ENC_TAG FT_New_Face_From_FSSpec FT_Vector_Length  FT_ENCODING_ADOBE_CUSTOM FT_New_Glyph FT_Vector_Polarize  FT_ENCODING_ADOBE_EXPERT FT_New_Library FT_Vector_Rotate  FT_ENCODING_ADOBE_LATIN_1 FT_New_Memory_Face FT_Vector_Transform  FT_ENCODING_ADOBE_STANDARD FT_New_Size FT_Vector_Unit  FT_ENCODING_APPLE_ROMAN FT_Offset FT_WINFONTS_H  FT_ENCODING_BIG5 FT_OPEN_DRIVER FT_WinFNT_Header  FT_ENCODING_JOHAB FT_OPEN_MEMORY FT_WinFNT_HeaderRec  FT_ENCODING_MS_BIG5 FT_OPEN_PARAMS FT_WinFNT_ID_CP1250  FT_ENCODING_MS_GB2312 FT_OPEN_PATHNAME FT_WinFNT_ID_CP1251  FT_ENCODING_MS_JOHAB FT_OPEN_STREAM FT_WinFNT_ID_CP1252  FT_ENCODING_MS_SJIS FT_OPEN_XXX FT_WinFNT_ID_CP1253  FT_ENCODING_MS_SYMBOL FT_OPENTYPE_VALIDATE_H FT_WinFNT_ID_CP1254  FT_ENCODING_MS_WANSUNG FT_Open_Args FT_WinFNT_ID_CP1255  FT_ENCODING_NONE FT_Open_Face FT_WinFNT_ID_CP1256  FT_ENCODING_OLD_LATIN_2 FT_OpenType_Free FT_WinFNT_ID_CP1257  FT_ENCODING_PRC FT_OpenType_Validate FT_WinFNT_ID_CP1258  FT_ENCODING_SJIS FT_ORIENTATION_FILL_LEFT FT_WinFNT_ID_CP1361  FT_ENCODING_UNICODE FT_ORIENTATION_FILL_RIGHT FT_WinFNT_ID_CP874  FT_ENCODING_WANSUNG FT_ORIENTATION_NONE FT_WinFNT_ID_CP932  FT_Encoding FT_ORIENTATION_POSTSCRIPT FT_WinFNT_ID_CP936  FT_ERRORS_H FT_ORIENTATION_TRUETYPE FT_WinFNT_ID_CP949  FT_Err_XXX FT_Orientation FT_WinFNT_ID_CP950  FT_Error FT_OUTLINE_EVEN_ODD_FILL FT_WinFNT_ID_DEFAULT  FT_F26Dot6 FT_OUTLINE_H FT_WinFNT_ID_MAC  FT_F2Dot14 FT_OUTLINE_HIGH_PRECISION FT_WinFNT_ID_OEM  FT_FACE_FLAG_CID_KEYED FT_OUTLINE_IGNORE_DROPOUTS FT_WinFNT_ID_SYMBOL  FT_FACE_FLAG_COLOR FT_OUTLINE_INCLUDE_STUBS FT_WinFNT_ID_XXX  FT_FACE_FLAG_EXTERNAL_STREAM FT_OUTLINE_NONE FTC_CMapCache  FT_FACE_FLAG_FAST_GLYPHS FT_OUTLINE_OWNER FTC_CMapCache_Lookup  FT_FACE_FLAG_FIXED_SIZES FT_OUTLINE_REVERSE_FILL FTC_CMapCache_New  FT_FACE_FLAG_FIXED_WIDTH FT_OUTLINE_SINGLE_PASS FTC_Face_Requester  FT_FACE_FLAG_GLYPH_NAMES FT_OUTLINE_SMART_DROPOUTS FTC_FaceID  FT_FACE_FLAG_HINTER FT_OUTLINE_XXX FTC_ImageCache  FT_FACE_FLAG_HORIZONTAL FT_Outline FTC_ImageCache_Lookup  FT_FACE_FLAG_KERNING FT_Outline_Check FTC_ImageCache_LookupScaler  FT_FACE_FLAG_MULTIPLE_MASTERS FT_Outline_ConicToFunc FTC_ImageCache_New  FT_FACE_FLAG_SCALABLE FT_Outline_Copy FTC_ImageType  FT_FACE_FLAG_SFNT FT_Outline_CubicToFunc FTC_ImageTypeRec  FT_FACE_FLAG_TRICKY FT_Outline_Decompose FTC_Manager  FT_FACE_FLAG_VARIATION FT_Outline_Done FTC_Manager_Done  FT_FACE_FLAG_VERTICAL FT_Outline_Embolden FTC_Manager_LookupFace  FT_FACE_FLAG_XXX FT_Outline_EmboldenXY FTC_Manager_LookupSize  FT_Face FT_Outline_Funcs FTC_Manager_New  FT_Face_CheckTrueTypePatents FT_Outline_Get_BBox FTC_Manager_RemoveFaceID  FT_Face_GetCharsOfVariant FT_Outline_Get_Bitmap FTC_Manager_Reset  FT_Face_GetCharVariantIndex FT_Outline_Get_CBox FTC_Node  FT_Face_GetCharVariantIsDefault FT_Outline_Get_Orientation FTC_Node_Unref  FT_Face_GetVariantSelectors FT_Outline_GetInsideBorder FTC_SBit  FT_Face_GetVariantsOfChar FT_Outline_GetOutsideBorder FTC_SBitCache  FT_Face_Internal FT_Outline_LineToFunc FTC_SBitCache_Lookup  FT_Face_Properties FT_Outline_MoveToFunc FTC_SBitCache_LookupScaler  FT_Face_SetUnpatentedHinting FT_Outline_New FTC_SBitCache_New  FT_FaceRec FT_Outline_Render FTC_SBitRec  FT_Fixed FT_Outline_Reverse FTC_Scaler  FT_FloorFix FT_Outline_Transform FTC_ScalerRec  FT_FONT_FORMATS_H FT_Outline_Translate fallback-script  FT_FREETYPE_H FT_OutlineGlyph glyph-to-script-map  FT_Free_Func FT_OutlineGlyphRec hinting-engine  FT_FSTYPE_BITMAP_EMBEDDING_ONLY FT_PALETTE_FOR_DARK_BACKGROUND increase-x-height  FT_FSTYPE_EDITABLE_EMBEDDING FT_PALETTE_FOR_LIGHT_BACKGROUND interpreter-version  FT_FSTYPE_INSTALLABLE_EMBEDDING FT_PALETTE_XXX no-long-family-names  FT_FSTYPE_NO_SUBSETTING FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY no-stem-darkening  FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY PS_DICT_BLUE_FUZZ  FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING FT_PARAM_TAG_INCREMENTAL PS_DICT_BLUE_SCALE  FT_FSTYPE_XXX FT_PARAM_TAG_LCD_FILTER_WEIGHTS PS_DICT_BLUE_SHIFT  FT_FWord FT_PARAM_TAG_RANDOM_SEED PS_DICT_BLUE_VALUE  FT_GASP_DO_GRAY FT_PARAM_TAG_STEM_DARKENING PS_DICT_CHAR_STRING  FT_GASP_DO_GRIDFIT FT_PARAM_TAG_UNPATENTED_HINTING PS_DICT_CHAR_STRING_KEY  FT_GASP_H FT_Palette_Data PS_DICT_ENCODING_ENTRY  FT_GASP_NO_TABLE FT_Palette_Data_Get PS_DICT_ENCODING_TYPE  FT_GASP_SYMMETRIC_GRIDFIT FT_Palette_Select PS_DICT_FAMILY_BLUE  FT_GASP_SYMMETRIC_SMOOTHING FT_Palette_Set_Foreground_Color PS_DICT_FAMILY_NAME  FT_GASP_XXX FT_Parameter PS_DICT_FAMILY_OTHER_BLUE  FT_Generic FT_PCF_DRIVER_H PS_DICT_FONT_BBOX  FT_Generic_Finalizer FT_PFR_H PS_DICT_FONT_MATRIX  FT_Get_Advance FT_PIXEL_MODE_BGRA PS_DICT_FONT_NAME  FT_Get_Advances FT_PIXEL_MODE_GRAY PS_DICT_FONT_TYPE  FT_Get_BDF_Charset_ID FT_PIXEL_MODE_GRAY2 PS_DICT_FORCE_BOLD  FT_Get_BDF_Property FT_PIXEL_MODE_GRAY4 PS_DICT_FS_TYPE  FT_Get_Char_Index FT_PIXEL_MODE_LCD PS_DICT_FULL_NAME  FT_Get_Charmap_Index FT_PIXEL_MODE_LCD_V PS_DICT_IS_FIXED_PITCH  FT_Get_CID_From_Glyph_Index FT_PIXEL_MODE_MONO PS_DICT_ITALIC_ANGLE  FT_Get_CID_Is_Internally_CID_Keyed FT_PIXEL_MODE_NONE PS_DICT_LANGUAGE_GROUP  FT_Get_CID_Registry_Ordering_Supplement FT_Pixel_Mode PS_DICT_LEN_IV  FT_Get_CMap_Format FT_Pointer PS_DICT_MIN_FEATURE  FT_Get_CMap_Language_ID FT_Pos PS_DICT_NOTICE  FT_Get_Color_Glyph_Layer FT_Prop_GlyphToScriptMap PS_DICT_NUM_BLUE_VALUES  FT_Get_First_Char FT_Prop_IncreaseXHeight PS_DICT_NUM_CHAR_STRINGS  FT_Get_Font_Format FT_Property_Get PS_DICT_NUM_FAMILY_BLUES  FT_Get_FSType_Flags FT_Property_Set PS_DICT_NUM_FAMILY_OTHER_BLUES  FT_Get_Gasp FT_PtrDist PS_DICT_NUM_OTHER_BLUES  FT_Get_Glyph FT_RASTER_FLAG_AA PS_DICT_NUM_STEM_SNAP_H  FT_Get_Glyph_Name FT_RASTER_FLAG_CLIP PS_DICT_NUM_STEM_SNAP_V  FT_Get_Kerning FT_RASTER_FLAG_DEFAULT PS_DICT_NUM_SUBRS  FT_Get_MM_Blend_Coordinates FT_RASTER_FLAG_DIRECT PS_DICT_OTHER_BLUE  FT_Get_MM_Var FT_RASTER_FLAG_XXX PS_DICT_PAINT_TYPE  FT_Get_Module FT_Raster PS_DICT_PASSWORD  FT_Get_Multi_Master FT_Raster_BitSet_Func PS_DICT_RND_STEM_UP  FT_Get_Name_Index FT_Raster_BitTest_Func PS_DICT_STD_HW  FT_Get_Next_Char FT_Raster_DoneFunc PS_DICT_STD_VW  FT_Get_PFR_Advance FT_Raster_Funcs PS_DICT_STEM_SNAP_H  FT_Get_PFR_Kerning FT_Raster_NewFunc PS_DICT_STEM_SNAP_V  FT_Get_PFR_Metrics FT_Raster_Params PS_DICT_SUBR  FT_Get_Postscript_Name FT_Raster_RenderFunc PS_DICT_UNDERLINE_POSITION  FT_Get_PS_Font_Info FT_Raster_ResetFunc PS_DICT_UNDERLINE_THICKNESS  FT_Get_PS_Font_Private FT_Raster_SetModeFunc PS_DICT_UNIQUE_ID  FT_Get_PS_Font_Value FT_RENDER_H PS_DICT_VERSION  FT_Get_Renderer FT_RENDER_MODE_LCD PS_DICT_WEIGHT  FT_Get_Sfnt_LangTag FT_RENDER_MODE_LCD_V PS_Dict_Keys  FT_Get_Sfnt_Name FT_RENDER_MODE_LIGHT PS_FontInfo  FT_Get_Sfnt_Name_Count FT_RENDER_MODE_MONO PS_FontInfoRec  FT_Get_Sfnt_Table FT_RENDER_MODE_NORMAL PS_Private  FT_Get_SubGlyph_Info FT_Realloc_Func PS_PrivateRec  FT_Get_Track_Kerning FT_Reference_Face random-seed  FT_Get_TrueType_Engine_Type FT_Reference_Library T1_BLEND_BLUE_SCALE  FT_Get_Var_Axis_Flags FT_Remove_Module T1_BLEND_BLUE_SHIFT  FT_Get_Var_Blend_Coordinates FT_Render_Glyph T1_BLEND_BLUE_VALUES  FT_Get_Var_Design_Coordinates FT_Render_Mode T1_BLEND_FAMILY_BLUES  FT_Get_WinFNT_Header FT_Renderer T1_BLEND_FAMILY_OTHER_BLUES  FT_GetFile_From_Mac_ATS_Name FT_Renderer_Class T1_BLEND_FORCE_BOLD  FT_GetFile_From_Mac_Name FT_Request_Size T1_BLEND_ITALIC_ANGLE  FT_GetFilePath_From_Mac_ATS_Name FT_RoundFix T1_BLEND_OTHER_BLUES  FT_GLYPH_BBOX_GRIDFIT FT_Select_Charmap T1_BLEND_STANDARD_HEIGHT  FT_GLYPH_BBOX_PIXELS FT_Select_Size T1_BLEND_STANDARD_WIDTH  FT_GLYPH_BBOX_SUBPIXELS FT_Set_Char_Size T1_BLEND_STEM_SNAP_HEIGHTS  FT_GLYPH_BBOX_TRUNCATE FT_Set_Charmap T1_BLEND_STEM_SNAP_WIDTHS  FT_GLYPH_BBOX_UNSCALED FT_Set_Debug_Hook T1_BLEND_UNDERLINE_POSITION  FT_GLYPH_FORMAT_BITMAP FT_Set_Default_Properties T1_BLEND_UNDERLINE_THICKNESS  FT_GLYPH_FORMAT_COMPOSITE FT_Set_MM_Blend_Coordinates T1_Blend_Flags  FT_GLYPH_FORMAT_NONE FT_Set_MM_Design_Coordinates T1_ENCODING_TYPE_ARRAY  FT_GLYPH_FORMAT_OUTLINE FT_Set_Named_Instance T1_ENCODING_TYPE_EXPERT  FT_GLYPH_FORMAT_PLOTTER FT_Set_Pixel_Sizes T1_ENCODING_TYPE_ISOLATIN1  FT_GLYPH_H FT_Set_Renderer T1_ENCODING_TYPE_NONE  FT_Glyph FT_Set_Transform T1_ENCODING_TYPE_STANDARD  FT_Glyph_BBox_Mode FT_Set_Var_Blend_Coordinates T1_EncodingType  FT_Glyph_Copy FT_Set_Var_Design_Coordinates T1_FontInfo  FT_Glyph_Format FT_SFNT_HEAD T1_Private  FT_Glyph_Get_CBox FT_SFNT_HHEA TT_ADOBE_ID_CUSTOM  FT_Glyph_Metrics FT_SFNT_MAXP TT_ADOBE_ID_EXPERT  FT_Glyph_Stroke FT_SFNT_NAMES_H TT_ADOBE_ID_LATIN_1  FT_Glyph_StrokeBorder FT_SFNT_OS2 TT_ADOBE_ID_STANDARD  FT_Glyph_To_Bitmap FT_SFNT_PCLT TT_ADOBE_ID_XXX  FT_Glyph_Transform FT_SFNT_POST TT_APPLE_ID_DEFAULT  FT_GlyphRec FT_SFNT_VHEA TT_APPLE_ID_FULL_UNICODE  FT_GlyphSlot FT_Sfnt_Table_Info TT_APPLE_ID_ISO_10646  FT_GlyphSlot_Own_Bitmap FT_Sfnt_Tag TT_APPLE_ID_UNICODE_1_1  FT_GlyphSlotRec FT_SfntLangTag TT_APPLE_ID_UNICODE_2_0  FT_GX_VALIDATE_H FT_SfntName TT_APPLE_ID_UNICODE_32  FT_GZIP_H FT_Short TT_APPLE_ID_VARIANT_SELECTOR  FT_Gzip_Uncompress FT_SIZE_REQUEST_TYPE_BBOX TT_APPLE_ID_XXX  FT_HAS_COLOR FT_SIZE_REQUEST_TYPE_CELL TT_Header  FT_HAS_FAST_GLYPHS FT_SIZE_REQUEST_TYPE_NOMINAL TT_HoriHeader  FT_HAS_FIXED_SIZES FT_SIZE_REQUEST_TYPE_REAL_DIM TT_INTERPRETER_VERSION_35  FT_HAS_GLYPH_NAMES FT_SIZE_REQUEST_TYPE_SCALES TT_INTERPRETER_VERSION_38  FT_HAS_HORIZONTAL FT_SIZES_H TT_INTERPRETER_VERSION_40  FT_HAS_KERNING FT_Sin TT_INTERPRETER_VERSION_XXX  FT_HAS_MULTIPLE_MASTERS FT_Size TT_ISO_ID_10646  FT_HAS_VERTICAL FT_Size_Internal TT_ISO_ID_7BIT_ASCII  FT_Has_PS_Glyph_Names FT_Size_Metrics TT_ISO_ID_8859_1  FT_HINTING_ADOBE FT_Size_Request TT_ISO_ID_XXX  FT_HINTING_FREETYPE FT_Size_Request_Type TT_MAC_ID_XXX  FT_HINTING_XXX FT_Size_RequestRec TT_MAC_LANGID_XXX  FT_IMAGE_H FT_SizeRec TT_MaxProfile  FT_IMAGE_TAG FT_Slot_Internal TT_MS_ID_BIG_5  FT_INCREMENTAL_H FT_Span TT_MS_ID_JOHAB  FT_Incremental FT_SpanFunc TT_MS_ID_PRC  FT_Incremental_FreeGlyphDataFunc FT_STROKER_BORDER_LEFT TT_MS_ID_SJIS  FT_Incremental_FuncsRec FT_STROKER_BORDER_RIGHT TT_MS_ID_SYMBOL_CS  FT_Incremental_GetGlyphDataFunc FT_STROKER_H TT_MS_ID_UCS_4  FT_Incremental_GetGlyphMetricsFunc FT_STROKER_LINECAP_BUTT TT_MS_ID_UNICODE_CS  FT_Incremental_Interface FT_STROKER_LINECAP_ROUND TT_MS_ID_WANSUNG  FT_Incremental_InterfaceRec FT_STROKER_LINECAP_SQUARE TT_MS_ID_XXX  FT_Incremental_Metrics FT_STROKER_LINEJOIN_BEVEL TT_MS_LANGID_XXX  FT_Incremental_MetricsRec FT_STROKER_LINEJOIN_MITER TT_NAME_ID_XXX  FT_Init_FreeType FT_STROKER_LINEJOIN_MITER_FIXED TT_OS2  FT_Int FT_STROKER_LINEJOIN_MITER_VARIABLE TT_PCLT  FT_Int16 FT_STROKER_LINEJOIN_ROUND TT_PLATFORM_ADOBE  FT_Int32 FT_STYLE_FLAG_BOLD TT_PLATFORM_APPLE_UNICODE  FT_Int64 FT_STYLE_FLAG_ITALIC TT_PLATFORM_CUSTOM  FT_IS_CID_KEYED FT_STYLE_FLAG_XXX TT_PLATFORM_ISO  FT_IS_FIXED_WIDTH FT_Stream TT_PLATFORM_MACINTOSH  FT_IS_NAMED_INSTANCE FT_Stream_CloseFunc TT_PLATFORM_MICROSOFT  FT_IS_SCALABLE FT_Stream_IoFunc TT_PLATFORM_XXX  FT_IS_SFNT FT_Stream_OpenBzip2 TT_Postscript  FT_IS_TRICKY FT_Stream_OpenGzip TT_UCR_XXX  FT_IS_VARIATION FT_Stream_OpenLZW TT_VertHeader  FT_KERNING_DEFAULT FT_StreamDesc warping  FT_KERNING_UNFITTED FT_StreamRec   generated on Sat Jul  7 13:40:41 2018 UTC",
            "title": "FreeType-2.9.1 API Reference"
        },
        {
            "location": "/ft2-header_inclusion/index.html",
            "text": "Docs\n \u00bb \nGeneral Remarks\n \u00bb FreeType's header inclusion scheme\n\n\n\n\nFreeType's header inclusion scheme\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nTo be as flexible as possible (and for historical reasons), FreeType uses a very special inclusion scheme to load header files, for example\n\n  #include <ft2build.h>\n\n  #include FT_FREETYPE_H\n  #include FT_OUTLINE_H\n\n\n\nA compiler and its preprocessor only needs an include path to find the file \nft2build.h\n; the exact locations and names of the other FreeType header files are hidden by \u2018\nHeader File Macros\n\u2019, loaded by \nft2build.h\n. The API documentation always gives the header macro name needed for a particular function.",
            "title": "FreeType's header inclusion scheme"
        },
        {
            "location": "/ft2-header_inclusion/index.html#freetypes-header-inclusion-scheme",
            "text": "",
            "title": "FreeType's header inclusion scheme"
        },
        {
            "location": "/ft2-header_inclusion/index.html#synopsis",
            "text": "To be as flexible as possible (and for historical reasons), FreeType uses a very special inclusion scheme to load header files, for example   #include <ft2build.h>\n\n  #include FT_FREETYPE_H\n  #include FT_OUTLINE_H  A compiler and its preprocessor only needs an include path to find the file  ft2build.h ; the exact locations and names of the other FreeType header files are hidden by \u2018 Header File Macros \u2019, loaded by  ft2build.h . The API documentation always gives the header macro name needed for a particular function.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-user_allocation/index.html",
            "text": "Docs\n \u00bb \nGeneral Remarks\n \u00bb User allocation\n\n\n\n\nUser allocation\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nFreeType assumes that structures allocated by the user and passed as arguments are zeroed out except for the actual data. In other words, it is recommended to use \u2018calloc\u2019 (or variants of it) instead of \u2018malloc\u2019 for allocation.",
            "title": "User allocation"
        },
        {
            "location": "/ft2-user_allocation/index.html#user-allocation",
            "text": "",
            "title": "User allocation"
        },
        {
            "location": "/ft2-user_allocation/index.html#synopsis",
            "text": "FreeType assumes that structures allocated by the user and passed as arguments are zeroed out except for the actual data. In other words, it is recommended to use \u2018calloc\u2019 (or variants of it) instead of \u2018malloc\u2019 for allocation.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-version/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb FreeType Version\n\n\n\n\nFreeType Version\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nNote that those functions and macros are of limited use because even a new release of FreeType with only documentation changes increases the version number.\n\n\nFT_Library_Version\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Library_Version\n( \nFT_Library\n   library,\n                      \nFT_Int\n      *amajor,\n                      \nFT_Int\n      *aminor,\n                      \nFT_Int\n      *apatch );\n\n\n\n\n\n\nReturn the version of the FreeType library being used. This is useful when dynamically linking to the library, since one cannot use the macros \nFREETYPE_MAJOR\n, \nFREETYPE_MINOR\n, and \nFREETYPE_PATCH\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA source library handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\namajor\n\n\nThe major version number.\n\n\n\n\naminor\n\n\nThe minor version number.\n\n\n\n\napatch\n\n\nThe patch version number.\n\n\n\n\n\n\n\nnote\n\n\n\nThe reason why this function takes a \u2018library\u2019 argument is because certain programs implement library initialization in a custom way that doesn't use \nFT_Init_FreeType\n.\n\n\nIn such cases, the library version might not be available before the library object has been created.\n\n\n\n\n\nFT_Face_CheckTrueTypePatents\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Bool\n )\n  \nFT_Face_CheckTrueTypePatents\n( \nFT_Face\n  face );\n\n\n\n\n\n\nDeprecated, does nothing.\n\n\ninput\n\n\n\n\n\nface\n\n\nA face handle.\n\n\n\n\n\n\n\nreturn\n\n\n\nAlways returns false.\n\n\nnote\n\n\n\nSince May 2010, TrueType hinting is no longer patented.\n\n\nsince\n\n\n\n2.3.5\n\n\n\n\n\nFT_Face_SetUnpatentedHinting\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Bool\n )\n  \nFT_Face_SetUnpatentedHinting\n( \nFT_Face\n  face,\n                                \nFT_Bool\n  value );\n\n\n\n\n\n\nDeprecated, does nothing.\n\n\ninput\n\n\n\n\n\nface\n\n\nA face handle.\n\n\n\n\nvalue\n\n\nNew boolean setting.\n\n\n\n\n\n\n\nreturn\n\n\n\nAlways returns false.\n\n\nnote\n\n\n\nSince May 2010, TrueType hinting is no longer patented.\n\n\nsince\n\n\n\n2.3.5\n\n\n\n\n\nFREETYPE_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFREETYPE_MAJOR\n  2\n#\ndefine\n \nFREETYPE_MINOR\n  9\n#\ndefine\n \nFREETYPE_PATCH\n  1\n\n\n\n\n\n\nThese three macros identify the FreeType source code version. Use \nFT_Library_Version\n to access them at runtime.\n\n\nvalues\n\n\n\n\n\nFREETYPE_MAJOR\n\n\nThe major version number.\n\n\n\n\nFREETYPE_MINOR\n\n\nThe minor version number.\n\n\n\n\nFREETYPE_PATCH\n\n\nThe patch level.\n\n\n\n\n\n\n\nnote\n\n\n\nThe version number of FreeType if built as a dynamic link library with the \u2018libtool\u2019 package is \nnot\n controlled by these three macros.",
            "title": "FreeType Version"
        },
        {
            "location": "/ft2-version/index.html#freetype-version",
            "text": "",
            "title": "FreeType Version"
        },
        {
            "location": "/ft2-version/index.html#synopsis",
            "text": "Note that those functions and macros are of limited use because even a new release of FreeType with only documentation changes increases the version number.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-version/index.html#ft_library_version",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  void  )\n   FT_Library_Version (  FT_Library    library,\n                       FT_Int       *amajor,\n                       FT_Int       *aminor,\n                       FT_Int       *apatch );   Return the version of the FreeType library being used. This is useful when dynamically linking to the library, since one cannot use the macros  FREETYPE_MAJOR ,  FREETYPE_MINOR , and  FREETYPE_PATCH .",
            "title": "FT_Library_Version"
        },
        {
            "location": "/ft2-version/index.html#ft_face_checktruetypepatents",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Bool  )\n   FT_Face_CheckTrueTypePatents (  FT_Face   face );   Deprecated, does nothing.",
            "title": "FT_Face_CheckTrueTypePatents"
        },
        {
            "location": "/ft2-version/index.html#ft_face_setunpatentedhinting",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Bool  )\n   FT_Face_SetUnpatentedHinting (  FT_Face   face,\n                                 FT_Bool   value );   Deprecated, does nothing.",
            "title": "FT_Face_SetUnpatentedHinting"
        },
        {
            "location": "/ft2-version/index.html#freetype_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FREETYPE_MAJOR   2\n# define   FREETYPE_MINOR   9\n# define   FREETYPE_PATCH   1   These three macros identify the FreeType source code version. Use  FT_Library_Version  to access them at runtime.",
            "title": "FREETYPE_XXX"
        },
        {
            "location": "/ft2-basic_types/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Basic Data Types\n\n\n\n\nBasic Data Types\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the basic data types defined by FreeType\u00a02, ranging from simple scalar types to bitmap descriptors. More font-specific structures are defined in a different section.\n\n\nFT_Byte\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nchar\n  \nFT_Byte\n;\n\n\n\n\n\n\nA simple typedef for the \nunsigned\n char type.\n\n\n\n\n\nFT_Bytes\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nconst\n \nFT_Byte\n*  \nFT_Bytes\n;\n\n\n\n\n\n\nA typedef for constant memory areas.\n\n\n\n\n\nFT_Char\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nchar\n  \nFT_Char\n;\n\n\n\n\n\n\nA simple typedef for the \nsigned\n char type.\n\n\n\n\n\nFT_Int\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nint\n  \nFT_Int\n;\n\n\n\n\n\n\nA typedef for the int type.\n\n\n\n\n\nFT_UInt\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nint\n  \nFT_UInt\n;\n\n\n\n\n\n\nA typedef for the unsigned int type.\n\n\n\n\n\nFT_Int16\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_Int16\n;\n\n\n\n\n\n\nA typedef for a 16bit signed integer type.\n\n\n\n\n\nFT_UInt16\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nshort\n  \nFT_UInt16\n;\n\n\n\n\n\n\nA typedef for a 16bit unsigned integer type.\n\n\n\n\n\nFT_Int32\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n XXX  \nFT_Int32\n;\n\n\n\n\n\n\nA typedef for a 32bit signed integer type. The size depends on the configuration.\n\n\n\n\n\nFT_UInt32\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n XXX  \nFT_UInt32\n;\n\n\n\n\n\n\n\n\n\nFT_Int64\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n XXX  \nFT_Int64\n;\n\n\n\n\n\n\n\n\n\nFT_UInt64\n\u00b6\n\n\nDefined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n XXX  \nFT_UInt64\n;\n\n\n\n\n\n\n\n\n\nFT_Short\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_Short\n;\n\n\n\n\n\n\nA typedef for signed short.\n\n\n\n\n\nFT_UShort\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nshort\n  \nFT_UShort\n;\n\n\n\n\n\n\nA typedef for unsigned short.\n\n\n\n\n\nFT_Long\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_Long\n;\n\n\n\n\n\n\nA typedef for signed long.\n\n\n\n\n\nFT_ULong\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nlong\n  \nFT_ULong\n;\n\n\n\n\n\n\nA typedef for unsigned long.\n\n\n\n\n\nFT_Bool\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nchar\n  \nFT_Bool\n;\n\n\n\n\n\n\nA typedef of unsigned char, used for simple booleans. As usual, values 1 and\u00a00 represent true and false, respectively.\n\n\n\n\n\nFT_Offset\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n size_t  \nFT_Offset\n;\n\n\n\n\n\n\nThis is equivalent to the ANSI\u00a0C \nsize_t\n type, i.e., the largest \nunsigned\n integer type used to express a file size or position, or a memory block size.\n\n\n\n\n\nFT_PtrDist\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n ft_ptrdiff_t  \nFT_PtrDist\n;\n\n\n\n\n\n\nThis is equivalent to the ANSI\u00a0C \nptrdiff_t\n type, i.e., the largest \nsigned\n integer type used to express the distance between two pointers.\n\n\n\n\n\nFT_String\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nchar\n  \nFT_String\n;\n\n\n\n\n\n\nA simple typedef for the char type, usually used for strings.\n\n\n\n\n\nFT_Tag\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nFT_UInt32\n  \nFT_Tag\n;\n\n\n\n\n\n\nA typedef for 32-bit tags (as used in the SFNT format).\n\n\n\n\n\nFT_Error\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nint\n  \nFT_Error\n;\n\n\n\n\n\n\nThe FreeType error code type. A value of\u00a00 is always interpreted as a successful operation.\n\n\n\n\n\nFT_Fixed\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_Fixed\n;\n\n\n\n\n\n\nThis type is used to store 16.16 fixed-point values, like scaling values or matrix coefficients.\n\n\n\n\n\nFT_Pointer\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n*  \nFT_Pointer\n;\n\n\n\n\n\n\nA simple typedef for a typeless pointer.\n\n\n\n\n\nFT_Pos\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_Pos\n;\n\n\n\n\n\n\nThe type FT_Pos is used to store vectorial coordinates. Depending on the context, these can represent distances in integer font units, or 16.16, or 26.6 fixed-point pixel coordinates.\n\n\n\n\n\nFT_Vector\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Vector_\n  {\n    \nFT_Pos\n  x;\n    \nFT_Pos\n  y;\n\n  } \nFT_Vector\n;\n\n\n\n\n\n\nA simple structure used to store a 2D vector; coordinates are of the FT_Pos type.\n\n\nfields\n\n\n\n\n\nx\n\n\nThe horizontal coordinate.\n\n\n\n\ny\n\n\nThe vertical coordinate.\n\n\n\n\n\n\n\n\n\n\nFT_BBox\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_BBox_\n  {\n    \nFT_Pos\n  xMin, yMin;\n    \nFT_Pos\n  xMax, yMax;\n\n  } \nFT_BBox\n;\n\n\n\n\n\n\nA structure used to hold an outline's bounding box, i.e., the coordinates of its extrema in the horizontal and vertical directions.\n\n\nfields\n\n\n\n\n\nxMin\n\n\nThe horizontal minimum (left-most).\n\n\n\n\nyMin\n\n\nThe vertical minimum (bottom-most).\n\n\n\n\nxMax\n\n\nThe horizontal maximum (right-most).\n\n\n\n\nyMax\n\n\nThe vertical maximum (top-most).\n\n\n\n\n\n\n\nnote\n\n\n\nThe bounding box is specified with the coordinates of the lower left and the upper right corner. In PostScript, those values are often called (llx,lly) and (urx,ury), respectively.\n\n\nIf \nyMin\n is negative, this value gives the glyph's descender. Otherwise, the glyph doesn't descend below the baseline. Similarly, if \u2018ymax\u2019 is positive, this value gives the glyph's ascender.\n\n\nxMin\n gives the horizontal distance from the glyph's origin to the left edge of the glyph's bounding box. If \nxMin\n is negative, the glyph extends to the left of the origin.\n\n\n\n\n\nFT_Matrix\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Matrix_\n  {\n    \nFT_Fixed\n  xx, xy;\n    \nFT_Fixed\n  yx, yy;\n\n  } \nFT_Matrix\n;\n\n\n\n\n\n\nA simple structure used to store a 2x2 matrix. Coefficients are in 16.16 fixed-point format. The computation performed is:\n\n   x' = x*xx + y*xy\n   y' = x*yx + y*yy\n\n\n\nfields\n\n\n\n\n\nxx\n\n\nMatrix coefficient.\n\n\n\n\nxy\n\n\nMatrix coefficient.\n\n\n\n\nyx\n\n\nMatrix coefficient.\n\n\n\n\nyy\n\n\nMatrix coefficient.\n\n\n\n\n\n\n\n\n\n\nFT_FWord\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_FWord\n;   /* distance in FUnits */\n\n\n\n\n\n\nA signed 16-bit integer used to store a distance in original font units.\n\n\n\n\n\nFT_UFWord\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nshort\n  \nFT_UFWord\n;  /* \nunsigned\n distance */\n\n\n\n\n\n\nAn unsigned 16-bit integer used to store a distance in original font units.\n\n\n\n\n\nFT_F2Dot14\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nshort\n  \nFT_F2Dot14\n;\n\n\n\n\n\n\nA signed 2.14 fixed-point type used for unit vectors.\n\n\n\n\n\nFT_UnitVector\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_UnitVector_\n  {\n    \nFT_F2Dot14\n  x;\n    \nFT_F2Dot14\n  y;\n\n  } \nFT_UnitVector\n;\n\n\n\n\n\n\nA simple structure used to store a 2D vector unit vector. Uses FT_F2Dot14 types.\n\n\nfields\n\n\n\n\n\nx\n\n\nHorizontal coordinate.\n\n\n\n\ny\n\n\nVertical coordinate.\n\n\n\n\n\n\n\n\n\n\nFT_F26Dot6\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nsigned\n \nlong\n  \nFT_F26Dot6\n;\n\n\n\n\n\n\nA signed 26.6 fixed-point type used for vectorial pixel coordinates.\n\n\n\n\n\nFT_Data\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Data_\n  {\n    \nconst\n \nFT_Byte\n*  pointer;\n    \nFT_Int\n          length;\n\n  } \nFT_Data\n;\n\n\n\n\n\n\nRead-only binary data represented as a pointer and a length.\n\n\nfields\n\n\n\n\n\npointer\n\n\nThe data.\n\n\n\n\nlength\n\n\nThe length of the data in bytes.\n\n\n\n\n\n\n\n\n\n\nFT_MAKE_TAG\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n#\ndefine\n \nFT_MAKE_TAG\n( _x1, _x2, _x3, _x4 ) \\\n          (\nFT_Tag\n)                        \\\n          ( ( (\nFT_ULong\n)_x1 << 24 ) |     \\\n            ( (\nFT_ULong\n)_x2 << 16 ) |     \\\n            ( (\nFT_ULong\n)_x3 <<  8 ) |     \\\n              (\nFT_ULong\n)_x4         )\n\n\n\n\n\n\nThis macro converts four-letter tags that are used to label TrueType tables into an unsigned long, to be used within FreeType.\n\n\nnote\n\n\n\nThe produced values \nmust\n be 32-bit integers. Don't redefine this macro.\n\n\n\n\n\nFT_Generic\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Generic_\n  {\n    \nvoid\n*                 data;\n    \nFT_Generic_Finalizer\n  finalizer;\n\n  } \nFT_Generic\n;\n\n\n\n\n\n\nClient applications often need to associate their own data to a variety of FreeType core objects. For example, a text layout API might want to associate a glyph cache to a given size object.\n\n\nSome FreeType object contains a \u2018generic\u2019 field, of type FT_Generic, which usage is left to client applications and font servers.\n\n\nIt can be used to store a pointer to client-specific data, as well as the address of a \u2018finalizer\u2019 function, which will be called by FreeType when the object is destroyed (for example, the previous client example would put the address of the glyph cache destructor in the \u2018finalizer\u2019 field).\n\n\nfields\n\n\n\n\n\ndata\n\n\nA typeless pointer to any client-specified data. This field is completely ignored by the FreeType library.\n\n\n\n\nfinalizer\n\n\nA pointer to a \u2018generic finalizer\u2019 function, which will be called when the object is destroyed. If this field is set to NULL, no code will be called.\n\n\n\n\n\n\n\n\n\n\nFT_Generic_Finalizer\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n  (*\nFT_Generic_Finalizer\n)( \nvoid\n*  object );\n\n\n\n\n\n\nDescribe a function used to destroy the \u2018client\u2019 data of any FreeType object. See the description of the \nFT_Generic\n type for details of usage.\n\n\ninput\n\n\n\nThe address of the FreeType object that is under finalization. Its client data is accessed through its \u2018generic\u2019 field.\n\n\n\n\n\nFT_Bitmap\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Bitmap_\n  {\n    \nunsigned\n \nint\n    rows;\n    \nunsigned\n \nint\n    width;\n    \nint\n             pitch;\n    \nunsigned\n \nchar\n*  buffer;\n    \nunsigned\n \nshort\n  num_grays;\n    \nunsigned\n \nchar\n   pixel_mode;\n    \nunsigned\n \nchar\n   palette_mode;\n    \nvoid\n*           palette;\n\n  } \nFT_Bitmap\n;\n\n\n\n\n\n\nA structure used to describe a bitmap or pixmap to the raster. Note that we now manage pixmaps of various depths through the \npixel_mode\n field.\n\n\nfields\n\n\n\n\n\nrows\n\n\nThe number of bitmap rows.\n\n\n\n\nwidth\n\n\nThe number of pixels in bitmap row.\n\n\n\n\npitch\n\n\nThe pitch's absolute value is the number of bytes taken by one bitmap row, including padding. However, the pitch is positive when the bitmap has a \u2018down\u2019 flow, and negative when it has an \u2018up\u2019 flow. In all cases, the pitch is an offset to add to a bitmap pointer in order to go down one row.\nNote that \u2018padding\u2019 means the alignment of a bitmap to a byte border, and FreeType functions normally align to the smallest possible integer value.\nFor the B/W rasterizer, \u2018pitch\u2019 is always an even number.\nTo change the pitch of a bitmap (say, to make it a multiple of 4), use \nFT_Bitmap_Convert\n. Alternatively, you might use callback functions to directly render to the application's surface; see the file \nexample2.cpp\n in the tutorial for a demonstration.\n\n\n\n\nbuffer\n\n\nA typeless pointer to the bitmap buffer. This value should be aligned on 32-bit boundaries in most cases.\n\n\n\n\nnum_grays\n\n\nThis field is only used with \nFT_PIXEL_MODE_GRAY\n; it gives the number of gray levels used in the bitmap.\n\n\n\n\npixel_mode\n\n\nThe pixel mode, i.e., how pixel bits are stored. See \nFT_Pixel_Mode\n for possible values.\n\n\n\n\npalette_mode\n\n\nThis field is intended for paletted pixel modes; it indicates how the palette is stored. Not used currently.\n\n\n\n\npalette\n\n\nA typeless pointer to the bitmap palette; this field is intended for paletted pixel modes. Not used currently.\n\n\n\n\n\n\n\n\n\n\nFT_Pixel_Mode\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Pixel_Mode_\n  {\n    \nFT_PIXEL_MODE_NONE\n = 0,\n    \nFT_PIXEL_MODE_MONO\n,\n    \nFT_PIXEL_MODE_GRAY\n,\n    \nFT_PIXEL_MODE_GRAY2\n,\n    \nFT_PIXEL_MODE_GRAY4\n,\n    \nFT_PIXEL_MODE_LCD\n,\n    \nFT_PIXEL_MODE_LCD_V\n,\n    \nFT_PIXEL_MODE_BGRA\n,\n\n    FT_PIXEL_MODE_MAX      /* do not remove */\n\n  } \nFT_Pixel_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding `\nFT_Pixel_Mode\n' */\n  /* values instead.                                                       */\n#\ndefine\n ft_pixel_mode_none   \nFT_PIXEL_MODE_NONE\n\n#\ndefine\n ft_pixel_mode_mono   \nFT_PIXEL_MODE_MONO\n\n#\ndefine\n ft_pixel_mode_grays  \nFT_PIXEL_MODE_GRAY\n\n#\ndefine\n ft_pixel_mode_pal2   \nFT_PIXEL_MODE_GRAY2\n\n#\ndefine\n ft_pixel_mode_pal4   \nFT_PIXEL_MODE_GRAY4\n\n\n\n\n\n\n\nAn enumeration type used to describe the format of pixels in a given bitmap. Note that additional formats may be added in the future.\n\n\nvalues\n\n\n\n\n\nFT_PIXEL_MODE_NONE\n\n\nValue\u00a00 is reserved.\n\n\n\n\nFT_PIXEL_MODE_MONO\n\n\nA monochrome bitmap, using 1\u00a0bit per pixel. Note that pixels are stored in most-significant order (MSB), which means that the left-most pixel in a byte has value 128.\n\n\n\n\nFT_PIXEL_MODE_GRAY\n\n\nAn 8-bit bitmap, generally used to represent anti-aliased glyph images. Each pixel is stored in one byte. Note that the number of \u2018gray\u2019 levels is stored in the \nnum_grays\n field of the \nFT_Bitmap\n structure (it generally is 256).\n\n\n\n\nFT_PIXEL_MODE_GRAY2\n\n\nA 2-bit per pixel bitmap, used to represent embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.\n\n\n\n\nFT_PIXEL_MODE_GRAY4\n\n\nA 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.\n\n\n\n\nFT_PIXEL_MODE_LCD\n\n\nAn 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on LCD displays; the bitmap is three times wider than the original glyph image. See also \nFT_RENDER_MODE_LCD\n.\n\n\n\n\nFT_PIXEL_MODE_LCD_V\n\n\nAn 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on rotated LCD displays; the bitmap is three times taller than the original glyph image. See also \nFT_RENDER_MODE_LCD_V\n.\n\n\n\n\nFT_PIXEL_MODE_BGRA\n\n\n[Since 2.5] An image with four 8-bit channels per pixel, representing a color image (such as emoticons) with alpha channel. For each pixel, the format is BGRA, which means, the blue channel comes first in memory. The color channels are pre-multiplied and in the sRGB colorspace. For example, full red at half-translucent opacity will be represented as \u201800,00,80,80\u2019, not \u201800,00,FF,80\u2019. See also \nFT_LOAD_COLOR\n.\n\n\n\n\n\n\n\n\n\n\nFT_Glyph_Format\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Glyph_Format_\n  {\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_NONE\n, 0, 0, 0, 0 ),\n\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_COMPOSITE\n, 'c', 'o', 'm', 'p' ),\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_BITMAP\n,    'b', 'i', 't', 's' ),\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_OUTLINE\n,   'o', 'u', 't', 'l' ),\n    \nFT_IMAGE_TAG\n( \nFT_GLYPH_FORMAT_PLOTTER\n,   'p', 'l', 'o', 't' )\n\n  } \nFT_Glyph_Format\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Glyph_Format\n' values instead.                     */\n#\ndefine\n ft_glyph_format_none       \nFT_GLYPH_FORMAT_NONE\n\n#\ndefine\n ft_glyph_format_composite  \nFT_GLYPH_FORMAT_COMPOSITE\n\n#\ndefine\n ft_glyph_format_bitmap     \nFT_GLYPH_FORMAT_BITMAP\n\n#\ndefine\n ft_glyph_format_outline    \nFT_GLYPH_FORMAT_OUTLINE\n\n#\ndefine\n ft_glyph_format_plotter    \nFT_GLYPH_FORMAT_PLOTTER\n\n\n\n\n\n\n\nAn enumeration type used to describe the format of a given glyph image. Note that this version of FreeType only supports two image formats, even though future font drivers will be able to register their own format.\n\n\nvalues\n\n\n\n\n\nFT_GLYPH_FORMAT_NONE\n\n\nThe value\u00a00 is reserved.\n\n\n\n\nFT_GLYPH_FORMAT_COMPOSITE\n\n\nThe glyph image is a composite of several other images. This format is \nonly\n used with \nFT_LOAD_NO_RECURSE\n, and is used to report compound glyphs (like accented characters).\n\n\n\n\nFT_GLYPH_FORMAT_BITMAP\n\n\nThe glyph image is a bitmap, and can be described as an \nFT_Bitmap\n. You generally need to access the \u2018bitmap\u2019 field of the \nFT_GlyphSlotRec\n structure to read it.\n\n\n\n\nFT_GLYPH_FORMAT_OUTLINE\n\n\nThe glyph image is a vectorial outline made of line segments and Bezier arcs; it can be described as an \nFT_Outline\n; you generally want to access the \u2018outline\u2019 field of the \nFT_GlyphSlotRec\n structure to read it.\n\n\n\n\nFT_GLYPH_FORMAT_PLOTTER\n\n\nThe glyph image is a vectorial path with no inside and outside contours. Some Type\u00a01 fonts, like those in the Hershey family, contain glyphs in this format. These are described as \nFT_Outline\n, but FreeType isn't currently capable of rendering them correctly.\n\n\n\n\n\n\n\n\n\n\nFT_IMAGE_TAG\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n#\nifndef\n \nFT_IMAGE_TAG\n\n#\ndefine\n \nFT_IMAGE_TAG\n( value, _x1, _x2, _x3, _x4 )  \\\n          value = ( ( (\nunsigned\n \nlong\n)_x1 << 24 ) | \\\n                    ( (\nunsigned\n \nlong\n)_x2 << 16 ) | \\\n                    ( (\nunsigned\n \nlong\n)_x3 << 8  ) | \\\n                      (\nunsigned\n \nlong\n)_x4         )\n#\nendif\n /* \nFT_IMAGE_TAG\n */\n\n\n\n\n\n\nThis macro converts four-letter tags to an unsigned long type.\n\n\nnote\n\n\n\nSince many 16-bit compilers don't like 32-bit enumerations, you should redefine this macro in case of problems to something like this:\n\n  #define FT_IMAGE_TAG( value, _x1, _x2, _x3, _x4 )  value\n\n\n\nto get a simple enumeration without assigning special numbers.",
            "title": "Basic Data Types"
        },
        {
            "location": "/ft2-basic_types/index.html#basic-data-types",
            "text": "",
            "title": "Basic Data Types"
        },
        {
            "location": "/ft2-basic_types/index.html#synopsis",
            "text": "This section contains the basic data types defined by FreeType\u00a02, ranging from simple scalar types to bitmap descriptors. More font-specific structures are defined in a different section.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_byte",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   unsigned   char    FT_Byte ;   A simple typedef for the  unsigned  char type.",
            "title": "FT_Byte"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_bytes",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   const   FT_Byte *   FT_Bytes ;   A typedef for constant memory areas.",
            "title": "FT_Bytes"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_char",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   char    FT_Char ;   A simple typedef for the  signed  char type.",
            "title": "FT_Char"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_int",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   int    FT_Int ;   A typedef for the int type.",
            "title": "FT_Int"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_uint",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   unsigned   int    FT_UInt ;   A typedef for the unsigned int type.",
            "title": "FT_UInt"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_int16",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).   \n   typedef   signed   short    FT_Int16 ;   A typedef for a 16bit signed integer type.",
            "title": "FT_Int16"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_uint16",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).   \n   typedef   unsigned   short    FT_UInt16 ;   A typedef for a 16bit unsigned integer type.",
            "title": "FT_UInt16"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_int32",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).   \n   typedef   signed  XXX   FT_Int32 ;   A typedef for a 32bit signed integer type. The size depends on the configuration.",
            "title": "FT_Int32"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_uint32",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).   \n   typedef   unsigned  XXX   FT_UInt32 ;",
            "title": "FT_UInt32"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_int64",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).   \n   typedef   signed  XXX   FT_Int64 ;",
            "title": "FT_Int64"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_uint64",
            "text": "Defined in FT_CONFIG_CONFIG_H (freetype/config/ftconfig.h).   \n   typedef   unsigned  XXX   FT_UInt64 ;",
            "title": "FT_UInt64"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_short",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   short    FT_Short ;   A typedef for signed short.",
            "title": "FT_Short"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_ushort",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   unsigned   short    FT_UShort ;   A typedef for unsigned short.",
            "title": "FT_UShort"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_long",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   long    FT_Long ;   A typedef for signed long.",
            "title": "FT_Long"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_ulong",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   unsigned   long    FT_ULong ;   A typedef for unsigned long.",
            "title": "FT_ULong"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_bool",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   unsigned   char    FT_Bool ;   A typedef of unsigned char, used for simple booleans. As usual, values 1 and\u00a00 represent true and false, respectively.",
            "title": "FT_Bool"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_offset",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef  size_t   FT_Offset ;   This is equivalent to the ANSI\u00a0C  size_t  type, i.e., the largest  unsigned  integer type used to express a file size or position, or a memory block size.",
            "title": "FT_Offset"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_ptrdist",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef  ft_ptrdiff_t   FT_PtrDist ;   This is equivalent to the ANSI\u00a0C  ptrdiff_t  type, i.e., the largest  signed  integer type used to express the distance between two pointers.",
            "title": "FT_PtrDist"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_string",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   char    FT_String ;   A simple typedef for the char type, usually used for strings.",
            "title": "FT_String"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_tag",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   FT_UInt32    FT_Tag ;   A typedef for 32-bit tags (as used in the SFNT format).",
            "title": "FT_Tag"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_error",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   int    FT_Error ;   The FreeType error code type. A value of\u00a00 is always interpreted as a successful operation.",
            "title": "FT_Error"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_fixed",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   long    FT_Fixed ;   This type is used to store 16.16 fixed-point values, like scaling values or matrix coefficients.",
            "title": "FT_Fixed"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_pointer",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   void *   FT_Pointer ;   A simple typedef for a typeless pointer.",
            "title": "FT_Pointer"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_pos",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   signed   long    FT_Pos ;   The type FT_Pos is used to store vectorial coordinates. Depending on the context, these can represent distances in integer font units, or 16.16, or 26.6 fixed-point pixel coordinates.",
            "title": "FT_Pos"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_vector",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Vector_\n  {\n     FT_Pos   x;\n     FT_Pos   y;\n\n  }  FT_Vector ;   A simple structure used to store a 2D vector; coordinates are of the FT_Pos type.",
            "title": "FT_Vector"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_bbox",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_BBox_\n  {\n     FT_Pos   xMin, yMin;\n     FT_Pos   xMax, yMax;\n\n  }  FT_BBox ;   A structure used to hold an outline's bounding box, i.e., the coordinates of its extrema in the horizontal and vertical directions.",
            "title": "FT_BBox"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_matrix",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct   FT_Matrix_\n  {\n     FT_Fixed   xx, xy;\n     FT_Fixed   yx, yy;\n\n  }  FT_Matrix ;   A simple structure used to store a 2x2 matrix. Coefficients are in 16.16 fixed-point format. The computation performed is:    x' = x*xx + y*xy\n   y' = x*yx + y*yy",
            "title": "FT_Matrix"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_fword",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   short    FT_FWord ;   /* distance in FUnits */   A signed 16-bit integer used to store a distance in original font units.",
            "title": "FT_FWord"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_ufword",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   unsigned   short    FT_UFWord ;  /*  unsigned  distance */   An unsigned 16-bit integer used to store a distance in original font units.",
            "title": "FT_UFWord"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_f2dot14",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   short    FT_F2Dot14 ;   A signed 2.14 fixed-point type used for unit vectors.",
            "title": "FT_F2Dot14"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_unitvector",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct   FT_UnitVector_\n  {\n     FT_F2Dot14   x;\n     FT_F2Dot14   y;\n\n  }  FT_UnitVector ;   A simple structure used to store a 2D vector unit vector. Uses FT_F2Dot14 types.",
            "title": "FT_UnitVector"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_f26dot6",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   signed   long    FT_F26Dot6 ;   A signed 26.6 fixed-point type used for vectorial pixel coordinates.",
            "title": "FT_F26Dot6"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_data",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct   FT_Data_\n  {\n     const   FT_Byte *  pointer;\n     FT_Int           length;\n\n  }  FT_Data ;   Read-only binary data represented as a pointer and a length.",
            "title": "FT_Data"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_make_tag",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n# define   FT_MAKE_TAG ( _x1, _x2, _x3, _x4 ) \\\n          ( FT_Tag )                        \\\n          ( ( ( FT_ULong )_x1 << 24 ) |     \\\n            ( ( FT_ULong )_x2 << 16 ) |     \\\n            ( ( FT_ULong )_x3 <<  8 ) |     \\\n              ( FT_ULong )_x4         )   This macro converts four-letter tags that are used to label TrueType tables into an unsigned long, to be used within FreeType.",
            "title": "FT_MAKE_TAG"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_generic",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct   FT_Generic_\n  {\n     void *                 data;\n     FT_Generic_Finalizer   finalizer;\n\n  }  FT_Generic ;   Client applications often need to associate their own data to a variety of FreeType core objects. For example, a text layout API might want to associate a glyph cache to a given size object.  Some FreeType object contains a \u2018generic\u2019 field, of type FT_Generic, which usage is left to client applications and font servers.  It can be used to store a pointer to client-specific data, as well as the address of a \u2018finalizer\u2019 function, which will be called by FreeType when the object is destroyed (for example, the previous client example would put the address of the glyph cache destructor in the \u2018finalizer\u2019 field).",
            "title": "FT_Generic"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_generic_finalizer",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   void   (* FT_Generic_Finalizer )(  void *  object );   Describe a function used to destroy the \u2018client\u2019 data of any FreeType object. See the description of the  FT_Generic  type for details of usage.",
            "title": "FT_Generic_Finalizer"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_bitmap",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Bitmap_\n  {\n     unsigned   int     rows;\n     unsigned   int     width;\n     int              pitch;\n     unsigned   char *  buffer;\n     unsigned   short   num_grays;\n     unsigned   char    pixel_mode;\n     unsigned   char    palette_mode;\n     void *           palette;\n\n  }  FT_Bitmap ;   A structure used to describe a bitmap or pixmap to the raster. Note that we now manage pixmaps of various depths through the  pixel_mode  field.",
            "title": "FT_Bitmap"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_pixel_mode",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   enum   FT_Pixel_Mode_\n  {\n     FT_PIXEL_MODE_NONE  = 0,\n     FT_PIXEL_MODE_MONO ,\n     FT_PIXEL_MODE_GRAY ,\n     FT_PIXEL_MODE_GRAY2 ,\n     FT_PIXEL_MODE_GRAY4 ,\n     FT_PIXEL_MODE_LCD ,\n     FT_PIXEL_MODE_LCD_V ,\n     FT_PIXEL_MODE_BGRA ,\n\n    FT_PIXEL_MODE_MAX      /* do not remove */\n\n  }  FT_Pixel_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding ` FT_Pixel_Mode ' */\n  /* values instead.                                                       */\n# define  ft_pixel_mode_none    FT_PIXEL_MODE_NONE \n# define  ft_pixel_mode_mono    FT_PIXEL_MODE_MONO \n# define  ft_pixel_mode_grays   FT_PIXEL_MODE_GRAY \n# define  ft_pixel_mode_pal2    FT_PIXEL_MODE_GRAY2 \n# define  ft_pixel_mode_pal4    FT_PIXEL_MODE_GRAY4    An enumeration type used to describe the format of pixels in a given bitmap. Note that additional formats may be added in the future.",
            "title": "FT_Pixel_Mode"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_glyph_format",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   enum   FT_Glyph_Format_\n  {\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_NONE , 0, 0, 0, 0 ),\n\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_COMPOSITE , 'c', 'o', 'm', 'p' ),\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_BITMAP ,    'b', 'i', 't', 's' ),\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_OUTLINE ,   'o', 'u', 't', 'l' ),\n     FT_IMAGE_TAG (  FT_GLYPH_FORMAT_PLOTTER ,   'p', 'l', 'o', 't' )\n\n  }  FT_Glyph_Format ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Glyph_Format ' values instead.                     */\n# define  ft_glyph_format_none        FT_GLYPH_FORMAT_NONE \n# define  ft_glyph_format_composite   FT_GLYPH_FORMAT_COMPOSITE \n# define  ft_glyph_format_bitmap      FT_GLYPH_FORMAT_BITMAP \n# define  ft_glyph_format_outline     FT_GLYPH_FORMAT_OUTLINE \n# define  ft_glyph_format_plotter     FT_GLYPH_FORMAT_PLOTTER    An enumeration type used to describe the format of a given glyph image. Note that this version of FreeType only supports two image formats, even though future font drivers will be able to register their own format.",
            "title": "FT_Glyph_Format"
        },
        {
            "location": "/ft2-basic_types/index.html#ft_image_tag",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n# ifndef   FT_IMAGE_TAG \n# define   FT_IMAGE_TAG ( value, _x1, _x2, _x3, _x4 )  \\\n          value = ( ( ( unsigned   long )_x1 << 24 ) | \\\n                    ( ( unsigned   long )_x2 << 16 ) | \\\n                    ( ( unsigned   long )_x3 << 8  ) | \\\n                      ( unsigned   long )_x4         )\n# endif  /*  FT_IMAGE_TAG  */   This macro converts four-letter tags to an unsigned long type.",
            "title": "FT_IMAGE_TAG"
        },
        {
            "location": "/ft2-base_interface/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Base Interface\n\n\n\n\nBase Interface\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section describes the most important public high-level API functions of FreeType\u00a02.\n\n\nFT_Library\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_LibraryRec_  *\nFT_Library\n;\n\n\n\n\n\n\nA handle to a FreeType library instance. Each \u2018library\u2019 is completely independent from the others; it is the \u2018root\u2019 of a set of objects like fonts, faces, sizes, etc.\n\n\nIt also embeds a memory manager (see \nFT_Memory\n), as well as a scan-line converter object (see \nFT_Raster\n).\n\n\nIn multi-threaded applications it is easiest to use one \nFT_Library\n object per thread. In case this is too cumbersome, a single \nFT_Library\n object across threads is possible also (since FreeType version 2.5.6), as long as a mutex lock is used around \nFT_New_Face\n and \nFT_Done_Face\n.\n\n\nnote\n\n\n\nLibrary objects are normally created by \nFT_Init_FreeType\n, and destroyed with \nFT_Done_FreeType\n. If you need reference-counting (cf. \nFT_Reference_Library\n), use \nFT_New_Library\n and \nFT_Done_Library\n.\n\n\n\n\n\nFT_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_FaceRec_*  \nFT_Face\n;\n\n\n\n\n\n\nA handle to a typographic face object. A face object models a given typeface, in a given style.\n\n\nnote\n\n\n\nA face object also owns a single \nFT_GlyphSlot\n object, as well as one or more \nFT_Size\n objects.\n\n\nUse \nFT_New_Face\n or \nFT_Open_Face\n to create a new face object from a given filepath or a custom input stream.\n\n\nUse \nFT_Done_Face\n to destroy it (along with its slot and sizes).\n\n\nAn \nFT_Face\n object can only be safely used from one thread at a time. Similarly, creation and destruction of \nFT_Face\n with the same \nFT_Library\n object can only be done from one thread at a time. On the other hand, functions like \nFT_Load_Glyph\n and its siblings are thread-safe and do not need the lock to be held as long as the same \nFT_Face\n object is not used from multiple threads at the same time.\n\n\nalso\n\n\n\nSee \nFT_FaceRec\n for the publicly accessible fields of a given face object.\n\n\n\n\n\nFT_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_SizeRec_*  \nFT_Size\n;\n\n\n\n\n\n\nA handle to an object that models a face scaled to a given character size.\n\n\nnote\n\n\n\nAn \nFT_Face\n has one \nactive\n \nFT_Size\n object that is used by functions like \nFT_Load_Glyph\n to determine the scaling transformation that in turn is used to load and hint glyphs and metrics.\n\n\nYou can use \nFT_Set_Char_Size\n, \nFT_Set_Pixel_Sizes\n, \nFT_Request_Size\n or even \nFT_Select_Size\n to change the content (i.e., the scaling values) of the active \nFT_Size\n.\n\n\nYou can use \nFT_New_Size\n to create additional size objects for a given \nFT_Face\n, but they won't be used by other functions until you activate it through \nFT_Activate_Size\n. Only one size can be activated at any given time per face.\n\n\nalso\n\n\n\nSee \nFT_SizeRec\n for the publicly accessible fields of a given size object.\n\n\n\n\n\nFT_GlyphSlot\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_GlyphSlotRec_*  \nFT_GlyphSlot\n;\n\n\n\n\n\n\nA handle to a given \u2018glyph slot\u2019. A slot is a container that can hold any of the glyphs contained in its parent face.\n\n\nIn other words, each time you call \nFT_Load_Glyph\n or \nFT_Load_Char\n, the slot's content is erased by the new glyph data, i.e., the glyph's metrics, its image (bitmap or outline), and other control information.\n\n\nalso\n\n\n\nSee \nFT_GlyphSlotRec\n for the publicly accessible glyph fields.\n\n\n\n\n\nFT_CharMap\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_CharMapRec_*  \nFT_CharMap\n;\n\n\n\n\n\n\nA handle to a character map (usually abbreviated to \u2018charmap\u2019). A charmap is used to translate character codes in a given encoding into glyph indexes for its parent's face. Some font formats may provide several charmaps per font.\n\n\nEach face object owns zero or more charmaps, but only one of them can be \u2018active\u2019, providing the data used by \nFT_Get_Char_Index\n or \nFT_Load_Char\n.\n\n\nThe list of available charmaps in a face is available through the \nface->num_charmaps\n and \nface->charmaps\n fields of \nFT_FaceRec\n.\n\n\nThe currently active charmap is available as \nface->charmap\n. You should call \nFT_Set_Charmap\n to change it.\n\n\nnote\n\n\n\nWhen a new face is created (either through \nFT_New_Face\n or \nFT_Open_Face\n), the library looks for a Unicode charmap within the list and automatically activates it. If there is no Unicode charmap, FreeType doesn't set an \u2018active\u2019 charmap.\n\n\nalso\n\n\n\nSee \nFT_CharMapRec\n for the publicly accessible fields of a given character map.\n\n\n\n\n\nFT_Encoding\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Encoding_\n  {\n    \nFT_ENC_TAG\n( \nFT_ENCODING_NONE\n, 0, 0, 0, 0 ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_MS_SYMBOL\n, 's', 'y', 'm', 'b' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_UNICODE\n,   'u', 'n', 'i', 'c' ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_SJIS\n,    's', 'j', 'i', 's' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_PRC\n,     'g', 'b', ' ', ' ' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_BIG5\n,    'b', 'i', 'g', '5' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_WANSUNG\n, 'w', 'a', 'n', 's' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_JOHAB\n,   'j', 'o', 'h', 'a' ),\n\n    /* for backward compatibility */\n    FT_ENCODING_GB2312     = \nFT_ENCODING_PRC\n,\n    \nFT_ENCODING_MS_SJIS\n    = \nFT_ENCODING_SJIS\n,\n    \nFT_ENCODING_MS_GB2312\n  = \nFT_ENCODING_PRC\n,\n    \nFT_ENCODING_MS_BIG5\n    = \nFT_ENCODING_BIG5\n,\n    \nFT_ENCODING_MS_WANSUNG\n = \nFT_ENCODING_WANSUNG\n,\n    \nFT_ENCODING_MS_JOHAB\n   = \nFT_ENCODING_JOHAB\n,\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_STANDARD\n, 'A', 'D', 'O', 'B' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_EXPERT\n,   'A', 'D', 'B', 'E' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_CUSTOM\n,   'A', 'D', 'B', 'C' ),\n    \nFT_ENC_TAG\n( \nFT_ENCODING_ADOBE_LATIN_1\n,  'l', 'a', 't', '1' ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_OLD_LATIN_2\n, 'l', 'a', 't', '2' ),\n\n    \nFT_ENC_TAG\n( \nFT_ENCODING_APPLE_ROMAN\n, 'a', 'r', 'm', 'n' )\n\n  } \nFT_Encoding\n;\n\n\n  /* these constants are deprecated; use the corresponding `\nFT_Encoding\n' */\n  /* values instead                                                      */\n#\ndefine\n ft_encoding_none            \nFT_ENCODING_NONE\n\n#\ndefine\n ft_encoding_unicode         \nFT_ENCODING_UNICODE\n\n#\ndefine\n ft_encoding_symbol          \nFT_ENCODING_MS_SYMBOL\n\n#\ndefine\n ft_encoding_latin_1         \nFT_ENCODING_ADOBE_LATIN_1\n\n#\ndefine\n ft_encoding_latin_2         \nFT_ENCODING_OLD_LATIN_2\n\n#\ndefine\n ft_encoding_sjis            \nFT_ENCODING_SJIS\n\n#\ndefine\n ft_encoding_gb2312          \nFT_ENCODING_PRC\n\n#\ndefine\n ft_encoding_big5            \nFT_ENCODING_BIG5\n\n#\ndefine\n ft_encoding_wansung         \nFT_ENCODING_WANSUNG\n\n#\ndefine\n ft_encoding_johab           \nFT_ENCODING_JOHAB\n\n\n#\ndefine\n ft_encoding_adobe_standard  \nFT_ENCODING_ADOBE_STANDARD\n\n#\ndefine\n ft_encoding_adobe_expert    \nFT_ENCODING_ADOBE_EXPERT\n\n#\ndefine\n ft_encoding_adobe_custom    \nFT_ENCODING_ADOBE_CUSTOM\n\n#\ndefine\n ft_encoding_apple_roman     \nFT_ENCODING_APPLE_ROMAN\n\n\n\n\n\n\n\nAn enumeration to specify character sets supported by charmaps. Used in the \nFT_Select_Charmap\n API function.\n\n\nnote\n\n\n\nDespite the name, this enumeration lists specific character repertories (i.e., charsets), and not text encoding methods (e.g., UTF-8, UTF-16, etc.).\n\n\nOther encodings might be defined in the future.\n\n\nvalues\n\n\n\n\n\nFT_ENCODING_NONE\n\n\nThe encoding value\u00a00 is reserved.\n\n\n\n\nFT_ENCODING_UNICODE\n\n\nThe Unicode character set. This value covers all versions of the Unicode repertoire, including ASCII and Latin-1. Most fonts include a Unicode charmap, but not all of them.\nFor example, if you want to access Unicode value U+1F028 (and the font contains it), use value 0x1F028 as the input value for \nFT_Get_Char_Index\n.\n\n\n\n\nFT_ENCODING_MS_SYMBOL\n\n\nMicrosoft Symbol encoding, used to encode mathematical symbols and wingdings. For more information, see \u2018\nhttps://www.microsoft.com/typography/otspec/recom.htm\n\u2019, \u2018\nhttp://www.kostis.net/charsets/symbol.htm\n\u2019, and \u2018\nhttp://www.kostis.net/charsets/wingding.htm\n\u2019.\nThis encoding uses character codes from the PUA (Private Unicode Area) in the range U+F020-U+F0FF.\n\n\n\n\nFT_ENCODING_SJIS\n\n\nShift JIS encoding for Japanese. More info at \u2018\nhttps://en.wikipedia.org/wiki/Shift_JIS\n\u2019. See note on multi-byte encodings below.\n\n\n\n\nFT_ENCODING_PRC\n\n\nCorresponds to encoding systems mainly for Simplified Chinese as used in People's Republic of China (PRC). The encoding layout is based on GB\u00a02312 and its supersets GBK and GB\u00a018030.\n\n\n\n\nFT_ENCODING_BIG5\n\n\nCorresponds to an encoding system for Traditional Chinese as used in Taiwan and Hong Kong.\n\n\n\n\nFT_ENCODING_WANSUNG\n\n\nCorresponds to the Korean encoding system known as Extended Wansung (MS Windows code page 949). For more information see \u2018\nhttps://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit949.txt\n\u2019.\n\n\n\n\nFT_ENCODING_JOHAB\n\n\nThe Korean standard character set (KS\u00a0C 5601-1992), which corresponds to MS Windows code page 1361. This character set includes all possible Hangul character combinations.\n\n\n\n\nFT_ENCODING_ADOBE_LATIN_1\n\n\nCorresponds to a Latin-1 encoding as defined in a Type\u00a01 PostScript font. It is limited to 256 character codes.\n\n\n\n\nFT_ENCODING_ADOBE_STANDARD\n\n\nAdobe Standard encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.\n\n\n\n\nFT_ENCODING_ADOBE_EXPERT\n\n\nAdobe Expert encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.\n\n\n\n\nFT_ENCODING_ADOBE_CUSTOM\n\n\nCorresponds to a custom encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.\n\n\n\n\nFT_ENCODING_APPLE_ROMAN\n\n\nApple roman encoding. Many TrueType and OpenType fonts contain a charmap for this 8-bit encoding, since older versions of Mac OS are able to use it.\n\n\n\n\nFT_ENCODING_OLD_LATIN_2\n\n\nThis value is deprecated and was neither used nor reported by FreeType. Don't use or test for it.\n\n\n\n\nFT_ENCODING_MS_SJIS\n\n\nSame as FT_ENCODING_SJIS. Deprecated.\n\n\n\n\nFT_ENCODING_MS_GB2312\n\n\nSame as FT_ENCODING_PRC. Deprecated.\n\n\n\n\nFT_ENCODING_MS_BIG5\n\n\nSame as FT_ENCODING_BIG5. Deprecated.\n\n\n\n\nFT_ENCODING_MS_WANSUNG\n\n\nSame as FT_ENCODING_WANSUNG. Deprecated.\n\n\n\n\nFT_ENCODING_MS_JOHAB\n\n\nSame as FT_ENCODING_JOHAB. Deprecated.\n\n\n\n\n\n\n\nnote\n\n\n\nBy default, FreeType enables a Unicode charmap and tags it with FT_ENCODING_UNICODE when it is either provided or can be generated from PostScript glyph name dictionaries in the font file. All other encodings are considered legacy and tagged only if explicitly defined in the font file. Otherwise, FT_ENCODING_NONE is used.\n\n\nFT_ENCODING_NONE is set by the BDF and PCF drivers if the charmap is neither Unicode nor ISO-8859-1 (otherwise it is set to FT_ENCODING_UNICODE). Use \nFT_Get_BDF_Charset_ID\n to find out which encoding is really present. If, for example, the \ncs_registry\n field is \u2018KOI8\u2019 and the \ncs_encoding\n field is \u2018R\u2019, the font is encoded in KOI8-R.\n\n\nFT_ENCODING_NONE is always set (with a single exception) by the winfonts driver. Use \nFT_Get_WinFNT_Header\n and examine the \u2018charset\u2019 field of the \nFT_WinFNT_HeaderRec\n structure to find out which encoding is really present. For example, \nFT_WinFNT_ID_CP1251\n (204) means Windows code page 1251 (for Russian).\n\n\nFT_ENCODING_NONE is set if \nplatform_id\n is \nTT_PLATFORM_MACINTOSH\n and \nencoding_id\n is not \nTT_MAC_ID_ROMAN\n (otherwise it is set to FT_ENCODING_APPLE_ROMAN).\n\n\nIf \nplatform_id\n is \nTT_PLATFORM_MACINTOSH\n, use the function \nFT_Get_CMap_Language_ID\n to query the Mac language ID that may be needed to be able to distinguish Apple encoding variants. See\n\n\nhttps://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\n\n\nto get an idea how to do that. Basically, if the language ID is\u00a00, don't use it, otherwise subtract 1 from the language ID. Then examine \nencoding_id\n. If, for example, \nencoding_id\n is \nTT_MAC_ID_ROMAN\n and the language ID (minus\u00a01) is \nTT_MAC_LANGID_GREEK\n, it is the Greek encoding, not Roman. \nTT_MAC_ID_ARABIC\n with \nTT_MAC_LANGID_FARSI\n means the Farsi variant the Arabic encoding.\n\n\n\n\n\nFT_ENC_TAG\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\nifndef\n \nFT_ENC_TAG\n\n#\ndefine\n \nFT_ENC_TAG\n( value, a, b, c, d )         \\\n          value = ( ( (\nFT_UInt32\n)(a) << 24 ) |  \\\n                    ( (\nFT_UInt32\n)(b) << 16 ) |  \\\n                    ( (\nFT_UInt32\n)(c) <<  8 ) |  \\\n                      (\nFT_UInt32\n)(d)         )\n\n#\nendif\n /* \nFT_ENC_TAG\n */\n\n\n\n\n\n\nThis macro converts four-letter tags into an unsigned long. It is used to define \u2018encoding\u2019 identifiers (see \nFT_Encoding\n).\n\n\nnote\n\n\n\nSince many 16-bit compilers don't like 32-bit enumerations, you should redefine this macro in case of problems to something like this:\n\n  #define FT_ENC_TAG( value, a, b, c, d )  value\n\n\n\nto get a simple enumeration without assigning special numbers.\n\n\n\n\n\nFT_FaceRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_FaceRec_\n  {\n    \nFT_Long\n           num_faces;\n    \nFT_Long\n           face_index;\n\n    \nFT_Long\n           face_flags;\n    \nFT_Long\n           style_flags;\n\n    \nFT_Long\n           num_glyphs;\n\n    \nFT_String\n*        family_name;\n    \nFT_String\n*        style_name;\n\n    \nFT_Int\n            num_fixed_sizes;\n    \nFT_Bitmap_Size\n*   available_sizes;\n\n    \nFT_Int\n            num_charmaps;\n    \nFT_CharMap\n*       charmaps;\n\n    \nFT_Generic\n        generic;\n\n    /*# The following member variables (down to `underline_thickness') */\n    /*# are only relevant to scalable outlines; cf. @\nFT_Bitmap_Size\n    */\n    /*# for bitmap fonts.                                              */\n    \nFT_BBox\n           bbox;\n\n    \nFT_UShort\n         units_per_EM;\n    \nFT_Short\n          ascender;\n    \nFT_Short\n          descender;\n    \nFT_Short\n          height;\n\n    \nFT_Short\n          max_advance_width;\n    \nFT_Short\n          max_advance_height;\n\n    \nFT_Short\n          underline_position;\n    \nFT_Short\n          underline_thickness;\n\n    \nFT_GlyphSlot\n      glyph;\n    \nFT_Size\n           size;\n    \nFT_CharMap\n        charmap;\n\n    /*@private begin */\n\n    \nFT_Driver\n         driver;\n    \nFT_Memory\n         memory;\n    \nFT_Stream\n         stream;\n\n    \nFT_ListRec\n        sizes_list;\n\n    \nFT_Generic\n        autohint;   /* face-specific auto-hinter data */\n    \nvoid\n*             extensions; /* unused                         */\n\n    \nFT_Face_Internal\n  internal;\n\n    /*@private end */\n\n  } \nFT_FaceRec\n;\n\n\n\n\n\n\nFreeType root face class structure. A face object models a typeface in a font file.\n\n\nfields\n\n\n\n\n\nnum_faces\n\n\nThe number of faces in the font file. Some font formats can have multiple faces in a single font file.\n\n\n\n\nface_index\n\n\nThis field holds two different values. Bits 0-15 are the index of the face in the font file (starting with value\u00a00). They are set to\u00a00 if there is only one face in the font file.\n[Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation fonts only, holding the named instance index for the current face index (starting with value\u00a01; value\u00a00 indicates font access without a named instance). For non-variation fonts, bits 16-30 are ignored. If we have the third named instance of face\u00a04, say, \nface_index\n is set to 0x00030004.\nBit 31 is always zero (this is, \nface_index\n is always a positive value).\n[Since 2.9] Changing the design coordinates with \nFT_Set_Var_Design_Coordinates\n or \nFT_Set_Var_Blend_Coordinates\n does not influence the named instance index value (only \nFT_Set_Named_Instance\n does that).\n\n\n\n\nface_flags\n\n\nA set of bit flags that give important information about the face; see \nFT_FACE_FLAG_XXX\n for the details.\n\n\n\n\nstyle_flags\n\n\nThe lower 16\u00a0bits contain a set of bit flags indicating the style of the face; see \nFT_STYLE_FLAG_XXX\n for the details.\n[Since 2.6.1] Bits 16-30 hold the number of named instances available for the current face if we have a GX or OpenType variation (sub)font. Bit 31 is always zero (this is, \nstyle_flags\n is always a positive value). Note that a variation font has always at least one named instance, namely the default instance.\n\n\n\n\nnum_glyphs\n\n\nThe number of glyphs in the face. If the face is scalable and has sbits (see \nnum_fixed_sizes\n), it is set to the number of outline glyphs.\nFor CID-keyed fonts (not in an SFNT wrapper) this value gives the highest CID used in the font.\n\n\n\n\nfamily_name\n\n\nThe face's family name. This is an ASCII string, usually in English, that describes the typeface's family (like \u2018Times New Roman\u2019, \u2018Bodoni\u2019, \u2018Garamond\u2019, etc). This is a least common denominator used to list fonts. Some formats (TrueType & OpenType) provide localized and Unicode versions of this string. Applications should use the format-specific interface to access them. Can be NULL (e.g., in fonts embedded in a PDF file).\nIn case the font doesn't provide a specific family name entry, FreeType tries to synthesize one, deriving it from other name entries.\n\n\n\n\nstyle_name\n\n\nThe face's style name. This is an ASCII string, usually in English, that describes the typeface's style (like \u2018Italic\u2019, \u2018Bold\u2019, \u2018Condensed\u2019, etc). Not all font formats provide a style name, so this field is optional, and can be set to NULL. As for \nfamily_name\n, some formats provide localized and Unicode versions of this string. Applications should use the format-specific interface to access them.\n\n\n\n\nnum_fixed_sizes\n\n\nThe number of bitmap strikes in the face. Even if the face is scalable, there might still be bitmap strikes, which are called \u2018sbits\u2019 in that case.\n\n\n\n\navailable_sizes\n\n\nAn array of \nFT_Bitmap_Size\n for all bitmap strikes in the face. It is set to NULL if there is no bitmap strike.\nNote that FreeType tries to sanitize the strike data since they are sometimes sloppy or incorrect, but this can easily fail.\n\n\n\n\nnum_charmaps\n\n\nThe number of charmaps in the face.\n\n\n\n\ncharmaps\n\n\nAn array of the charmaps of the face.\n\n\n\n\ngeneric\n\n\nA field reserved for client uses. See the \nFT_Generic\n type description.\n\n\n\n\nbbox\n\n\nThe font bounding box. Coordinates are expressed in font units (see \nunits_per_EM\n). The box is large enough to contain any glyph from the font. Thus, \nbbox.yMax\n can be seen as the \u2018maximum ascender\u2019, and \nbbox.yMin\n as the \u2018minimum descender\u2019. Only relevant for scalable formats.\nNote that the bounding box might be off by (at least) one pixel for hinted fonts. See \nFT_Size_Metrics\n for further discussion.\n\n\n\n\nunits_per_EM\n\n\nThe number of font units per EM square for this face. This is typically 2048 for TrueType fonts, and 1000 for Type\u00a01 fonts. Only relevant for scalable formats.\n\n\n\n\nascender\n\n\nThe typographic ascender of the face, expressed in font units. For font formats not having this information, it is set to \nbbox.yMax\n. Only relevant for scalable formats.\n\n\n\n\ndescender\n\n\nThe typographic descender of the face, expressed in font units. For font formats not having this information, it is set to \nbbox.yMin\n. Note that this field is negative for values below the baseline. Only relevant for scalable formats.\n\n\n\n\nheight\n\n\nThis value is the vertical distance between two consecutive baselines, expressed in font units. It is always positive. Only relevant for scalable formats.\nIf you want the global glyph height, use \u2018ascender - descender\u2019.\n\n\n\n\nmax_advance_width\n\n\nThe maximum advance width, in font units, for all glyphs in this face. This can be used to make word wrapping computations faster. Only relevant for scalable formats.\n\n\n\n\nmax_advance_height\n\n\nThe maximum advance height, in font units, for all glyphs in this face. This is only relevant for vertical layouts, and is set to \u2018height\u2019 for fonts that do not provide vertical metrics. Only relevant for scalable formats.\n\n\n\n\nunderline_position\n\n\nThe position, in font units, of the underline line for this face. It is the center of the underlining stem. Only relevant for scalable formats.\n\n\n\n\nunderline_thickness\n\n\nThe thickness, in font units, of the underline for this face. Only relevant for scalable formats.\n\n\n\n\nglyph\n\n\nThe face's associated glyph slot(s).\n\n\n\n\nsize\n\n\nThe current active size for this face.\n\n\n\n\ncharmap\n\n\nThe current active charmap for this face.\n\n\n\n\n\n\n\nnote\n\n\n\nFields may be changed after a call to \nFT_Attach_File\n or \nFT_Attach_Stream\n.\n\n\nFor an OpenType variation font, the values of the following fields can change after a call to \nFT_Set_Var_Design_Coordinates\n (and friends) if the font contains an \u2018MVAR\u2019 table: \u2018ascender\u2019, \u2018descender\u2019, \u2018height\u2019, \nunderline_position\n, and \nunderline_thickness\n.\n\n\nEspecially for TrueType fonts see also the documentation for \nFT_Size_Metrics\n.\n\n\n\n\n\nFT_HAS_HORIZONTAL\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_HORIZONTAL\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_HORIZONTAL\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains horizontal metrics (this is true for all font formats though).\n\n\nalso\n\n\n\nFT_HAS_VERTICAL\n can be used to check for vertical metrics.\n\n\n\n\n\nFT_HAS_VERTICAL\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_VERTICAL\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_VERTICAL\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains real vertical metrics (and not only synthesized ones).\n\n\n\n\n\nFT_HAS_KERNING\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_KERNING\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_KERNING\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains kerning data that can be accessed with \nFT_Get_Kerning\n.\n\n\n\n\n\nFT_HAS_FIXED_SIZES\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_FIXED_SIZES\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_FIXED_SIZES\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains some embedded bitmaps. See the \navailable_sizes\n field of the \nFT_FaceRec\n structure.\n\n\n\n\n\nFT_HAS_GLYPH_NAMES\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_GLYPH_NAMES\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_GLYPH_NAMES\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains some glyph names that can be accessed through \nFT_Get_Glyph_Name\n.\n\n\n\n\n\nFT_HAS_COLOR\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_COLOR\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_COLOR\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains tables for color glyphs.\n\n\nsince\n\n\n\n2.5.1\n\n\n\n\n\nFT_HAS_MULTIPLE_MASTERS\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_MULTIPLE_MASTERS\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_MULTIPLE_MASTERS\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains some multiple masters. The functions provided by \nFT_MULTIPLE_MASTERS_H\n are then available to choose the exact design you want.\n\n\n\n\n\nFT_IS_SFNT\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_SFNT\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_SFNT\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains a font whose format is based on the SFNT storage scheme. This usually means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded bitmap fonts.\n\n\nIf this macro is true, all functions defined in \nFT_SFNT_NAMES_H\n and \nFT_TRUETYPE_TABLES_H\n are available.\n\n\n\n\n\nFT_IS_SCALABLE\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_SCALABLE\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_SCALABLE\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains a scalable font face (true for TrueType, Type\u00a01, Type\u00a042, CID, OpenType/CFF, and PFR font formats).\n\n\n\n\n\nFT_IS_FIXED_WIDTH\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_FIXED_WIDTH\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_FIXED_WIDTH\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains a font face that contains fixed-width (or \u2018monospace\u2019, \u2018fixed-pitch\u2019, etc.) glyphs.\n\n\n\n\n\nFT_IS_CID_KEYED\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_CID_KEYED\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_CID_KEYED\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object contains a CID-keyed font. See the discussion of \nFT_FACE_FLAG_CID_KEYED\n for more details.\n\n\nIf this macro is true, all functions defined in \nFT_CID_H\n are available.\n\n\n\n\n\nFT_IS_TRICKY\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_TRICKY\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_TRICKY\n )\n\n\n\n\n\n\nA macro that returns true whenever a face represents a \u2018tricky\u2019 font. See the discussion of \nFT_FACE_FLAG_TRICKY\n for more details.\n\n\n\n\n\nFT_IS_NAMED_INSTANCE\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_NAMED_INSTANCE\n( face ) \\\n          ( (face)->face_index & 0x7FFF0000L )\n\n\n\n\n\n\nA macro that returns true whenever a face object is a named instance of a GX or OpenType variation font.\n\n\n[Since 2.9] Changing the design coordinates with \nFT_Set_Var_Design_Coordinates\n or \nFT_Set_Var_Blend_Coordinates\n does not influence the return value of this macro (only \nFT_Set_Named_Instance\n does that).\n\n\nsince\n\n\n\n2.7\n\n\n\n\n\nFT_IS_VARIATION\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_IS_VARIATION\n( face ) \\\n          ( (face)->face_flags & \nFT_FACE_FLAG_VARIATION\n )\n\n\n\n\n\n\nA macro that returns true whenever a face object has been altered by \nFT_Set_MM_Design_Coordinates\n, \nFT_Set_Var_Design_Coordinates\n, or \nFT_Set_Var_Blend_Coordinates\n.\n\n\nsince\n\n\n\n2.9\n\n\n\n\n\nFT_SizeRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_SizeRec_\n  {\n    \nFT_Face\n           face;      /* parent face object              */\n    \nFT_Generic\n        generic;   /* generic pointer for client uses */\n    \nFT_Size_Metrics\n   metrics;   /* size metrics                    */\n    \nFT_Size_Internal\n  internal;\n\n  } \nFT_SizeRec\n;\n\n\n\n\n\n\nFreeType root size class structure. A size object models a face object at a given size.\n\n\nfields\n\n\n\n\n\nface\n\n\nHandle to the parent face object.\n\n\n\n\ngeneric\n\n\nA typeless pointer, unused by the FreeType library or any of its drivers. It can be used by client applications to link their own data to each size object.\n\n\n\n\nmetrics\n\n\nMetrics for this size object. This field is read-only.\n\n\n\n\n\n\n\n\n\n\nFT_Size_Metrics\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Size_Metrics_\n  {\n    \nFT_UShort\n  x_ppem;      /* horizontal pixels per EM               */\n    \nFT_UShort\n  y_ppem;      /* vertical pixels per EM                 */\n\n    \nFT_Fixed\n   x_scale;     /* scaling values used to convert font    */\n    \nFT_Fixed\n   y_scale;     /* units to 26.6 fractional pixels        */\n\n    \nFT_Pos\n     ascender;    /* ascender in 26.6 frac. pixels          */\n    \nFT_Pos\n     descender;   /* descender in 26.6 frac. pixels         */\n    \nFT_Pos\n     height;      /* text height in 26.6 frac. pixels       */\n    \nFT_Pos\n     max_advance; /* max horizontal advance, in 26.6 pixels */\n\n  } \nFT_Size_Metrics\n;\n\n\n\n\n\n\nThe size metrics structure gives the metrics of a size object.\n\n\nfields\n\n\n\n\n\nx_ppem\n\n\nThe width of the scaled EM square in pixels, hence the term \u2018ppem\u2019 (pixels per EM). It is also referred to as \u2018nominal width\u2019.\n\n\n\n\ny_ppem\n\n\nThe height of the scaled EM square in pixels, hence the term \u2018ppem\u2019 (pixels per EM). It is also referred to as \u2018nominal height\u2019.\n\n\n\n\nx_scale\n\n\nA 16.16 fractional scaling value to convert horizontal metrics from font units to 26.6 fractional pixels. Only relevant for scalable font formats.\n\n\n\n\ny_scale\n\n\nA 16.16 fractional scaling value to convert vertical metrics from font units to 26.6 fractional pixels. Only relevant for scalable font formats.\n\n\n\n\nascender\n\n\nThe ascender in 26.6 fractional pixels, rounded up to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\n\ndescender\n\n\nThe descender in 26.6 fractional pixels, rounded down to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\n\nheight\n\n\nThe height in 26.6 fractional pixels, rounded to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\n\nmax_advance\n\n\nThe maximum advance width in 26.6 fractional pixels, rounded to an integer value. See \nFT_FaceRec\n for the details.\n\n\n\n\n\n\n\nnote\n\n\n\nThe scaling values, if relevant, are determined first during a size changing operation. The remaining fields are then set by the driver. For scalable formats, they are usually set to scaled values of the corresponding fields in \nFT_FaceRec\n. Some values like ascender or descender are rounded for historical reasons; more precise values (for outline fonts) can be derived by scaling the corresponding \nFT_FaceRec\n values manually, with code similar to the following.\n\n  scaled_ascender = FT_MulFix( face->ascender,\n                               size_metrics->y_scale );\n\n\n\nNote that due to glyph hinting and the selected rendering mode these values are usually not exact; consequently, they must be treated as unreliable with an error margin of at least one pixel!\n\n\nIndeed, the only way to get the exact metrics is to render \nall\n glyphs. As this would be a definite performance hit, it is up to client applications to perform such computations.\n\n\nThe \nFT_Size_Metrics\n structure is valid for bitmap fonts also.\n\n\nTrueType fonts with native bytecode hinting\n\n\nAll applications that handle TrueType fonts with native hinting must be aware that TTFs expect different rounding of vertical font dimensions. The application has to cater for this, especially if it wants to rely on a TTF's vertical data (for example, to properly align box characters vertically).\n\n\nOnly the application knows \nin advance\n that it is going to use native hinting for TTFs! FreeType, on the other hand, selects the hinting mode not at the time of creating an \nFT_Size\n object but much later, namely while calling \nFT_Load_Glyph\n.\n\n\nHere is some pseudo code that illustrates a possible solution.\n\n  font_format = FT_Get_Font_Format( face );\n\n  if ( !strcmp( font_format, \"TrueType\" ) &&\n       do_native_bytecode_hinting         )\n  {\n    ascender  = ROUND( FT_MulFix( face->ascender,\n                                  size_metrics->y_scale ) );\n    descender = ROUND( FT_MulFix( face->descender,\n                                  size_metrics->y_scale ) );\n  }\n  else\n  {\n    ascender  = size_metrics->ascender;\n    descender = size_metrics->descender;\n  }\n\n  height      = size_metrics->height;\n  max_advance = size_metrics->max_advance;\n\n\n\n\n\n\nFT_GlyphSlotRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_GlyphSlotRec_\n  {\n    \nFT_Library\n        library;\n    \nFT_Face\n           face;\n    \nFT_GlyphSlot\n      next;\n    \nFT_UInt\n           glyph_index; /* new in 2.10; was reserved previously */\n    \nFT_Generic\n        generic;\n\n    \nFT_Glyph_Metrics\n  metrics;\n    \nFT_Fixed\n          linearHoriAdvance;\n    \nFT_Fixed\n          linearVertAdvance;\n    \nFT_Vector\n         advance;\n\n    \nFT_Glyph_Format\n   format;\n\n    \nFT_Bitmap\n         bitmap;\n    \nFT_Int\n            bitmap_left;\n    \nFT_Int\n            bitmap_top;\n\n    \nFT_Outline\n        outline;\n\n    \nFT_UInt\n           num_subglyphs;\n    \nFT_SubGlyph\n       subglyphs;\n\n    \nvoid\n*             control_data;\n    \nlong\n              control_len;\n\n    \nFT_Pos\n            lsb_delta;\n    \nFT_Pos\n            rsb_delta;\n\n    \nvoid\n*             other;\n\n    \nFT_Slot_Internal\n  internal;\n\n  } \nFT_GlyphSlotRec\n;\n\n\n\n\n\n\nFreeType root glyph slot class structure. A glyph slot is a container where individual glyphs can be loaded, be they in outline or bitmap format.\n\n\nfields\n\n\n\n\n\nlibrary\n\n\nA handle to the FreeType library instance this slot belongs to.\n\n\n\n\nface\n\n\nA handle to the parent face object.\n\n\n\n\nnext\n\n\nIn some cases (like some font tools), several glyph slots per face object can be a good thing. As this is rare, the glyph slots are listed through a direct, single-linked list using its \u2018next\u2019 field.\n\n\n\n\nglyph_index\n\n\nThe glyph index passed as an argument to \nFT_Load_Glyph\n while initializeing the glyph slot (since FreeType version 2.10).\n\n\n\n\ngeneric\n\n\nA typeless pointer unused by the FreeType library or any of its drivers. It can be used by client applications to link their own data to each glyph slot object.\n\n\n\n\nmetrics\n\n\nThe metrics of the last loaded glyph in the slot. The returned values depend on the last load flags (see the \nFT_Load_Glyph\n API function) and can be expressed either in 26.6 fractional pixels or font units.\nNote that even when the glyph image is transformed, the metrics are not.\n\n\n\n\nlinearHoriAdvance\n\n\nThe advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless \nFT_LOAD_LINEAR_DESIGN\n is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.\n\n\n\n\nlinearVertAdvance\n\n\nThe advance height of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless \nFT_LOAD_LINEAR_DESIGN\n is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.\n\n\n\n\nadvance\n\n\nThis shorthand is, depending on \nFT_LOAD_IGNORE_TRANSFORM\n, the transformed (hinted) advance width for the glyph, in 26.6 fractional pixel format. As specified with \nFT_LOAD_VERTICAL_LAYOUT\n, it uses either the \nhoriAdvance\n or the \nvertAdvance\n value of \u2018metrics\u2019 field.\n\n\n\n\nformat\n\n\nThis field indicates the format of the image contained in the glyph slot. Typically \nFT_GLYPH_FORMAT_BITMAP\n, \nFT_GLYPH_FORMAT_OUTLINE\n, or \nFT_GLYPH_FORMAT_COMPOSITE\n, but other values are possible.\n\n\n\n\nbitmap\n\n\nThis field is used as a bitmap descriptor. Note that the address and content of the bitmap buffer can change between calls of \nFT_Load_Glyph\n and a few other functions.\n\n\n\n\nbitmap_left\n\n\nThe bitmap's left bearing expressed in integer pixels.\n\n\n\n\nbitmap_top\n\n\nThe bitmap's top bearing expressed in integer pixels. This is the distance from the baseline to the top-most glyph scanline, upwards y\u00a0coordinates being \npositive\n.\n\n\n\n\noutline\n\n\nThe outline descriptor for the current glyph image if its format is \nFT_GLYPH_FORMAT_OUTLINE\n. Once a glyph is loaded, \u2018outline\u2019 can be transformed, distorted, emboldened, etc. However, it must not be freed.\n\n\n\n\nnum_subglyphs\n\n\nThe number of subglyphs in a composite glyph. This field is only valid for the composite glyph format that should normally only be loaded with the \nFT_LOAD_NO_RECURSE\n flag.\n\n\n\n\nsubglyphs\n\n\nAn array of subglyph descriptors for composite glyphs. There are \nnum_subglyphs\n elements in there. Currently internal to FreeType.\n\n\n\n\ncontrol_data\n\n\nCertain font drivers can also return the control data for a given glyph image (e.g. TrueType bytecode, Type\u00a01 charstrings, etc.). This field is a pointer to such data; it is currently internal to FreeType.\n\n\n\n\ncontrol_len\n\n\nThis is the length in bytes of the control data. Currently internal to FreeType.\n\n\n\n\nother\n\n\nReserved.\n\n\n\n\nlsb_delta\n\n\nThe difference between hinted and unhinted left side bearing while auto-hinting is active. Zero otherwise.\n\n\n\n\nrsb_delta\n\n\nThe difference between hinted and unhinted right side bearing while auto-hinting is active. Zero otherwise.\n\n\n\n\n\n\n\nnote\n\n\n\nIf \nFT_Load_Glyph\n is called with default flags (see \nFT_LOAD_DEFAULT\n) the glyph image is loaded in the glyph slot in its native format (e.g., an outline glyph for TrueType and Type\u00a01 formats). [Since 2.9] The prospective bitmap metrics are calculated according to \nFT_LOAD_TARGET_XXX\n and other flags even for the outline glyph, even if \nFT_LOAD_RENDER\n is not set.\n\n\nThis image can later be converted into a bitmap by calling \nFT_Render_Glyph\n. This function searches the current renderer for the native image's format, then invokes it.\n\n\nThe renderer is in charge of transforming the native image through the slot's face transformation fields, then converting it into a bitmap that is returned in \nslot->bitmap\n.\n\n\nNote that \nslot->bitmap_left\n and \nslot->bitmap_top\n are also used to specify the position of the bitmap relative to the current pen position (e.g., coordinates (0,0) on the baseline). Of course, \nslot->format\n is also changed to \nFT_GLYPH_FORMAT_BITMAP\n.\n\n\nHere is a small pseudo code fragment that shows how to use \nlsb_delta\n and \nrsb_delta\n to do fractional positioning of glyphs:\n\n  FT_GlyphSlot  slot     = face->glyph;\n  FT_Pos        origin_x = 0;\n\n\n  for all glyphs do\n    <load glyph with `FT_Load_Glyph'>\n\n    FT_Outline_Translate( slot->outline, origin_x & 63, 0 );\n\n    <save glyph image, or render glyph, or ...>\n\n    <compute kern between current and next glyph\n     and add it to `origin_x'>\n\n    origin_x += slot->advance.x;\n    origin_x += slot->rsb_delta - slot->lsb_delta;\n  endfor\n\n\n\nHere is another small pseudo code fragment that shows how to use \nlsb_delta\n and \nrsb_delta\n to improve integer positioning of glyphs:\n\n  FT_GlyphSlot  slot           = face->glyph;\n  FT_Pos        origin_x       = 0;\n  FT_Pos        prev_rsb_delta = 0;\n\n\n  for all glyphs do\n    <compute kern between current and previous glyph\n     and add it to `origin_x'>\n\n    <load glyph with `FT_Load_Glyph'>\n\n    if ( prev_rsb_delta - slot->lsb_delta >  32 )\n      origin_x -= 64;\n    else if ( prev_rsb_delta - slot->lsb_delta < -31 )\n      origin_x += 64;\n\n    prev_rsb_delta = slot->rsb_delta;\n\n    <save glyph image, or render glyph, or ...>\n\n    origin_x += slot->advance.x;\n  endfor\n\n\n\nIf you use strong auto-hinting, you \nmust\n apply these delta values! Otherwise you will experience far too large inter-glyph spacing at small rendering sizes in most cases. Note that it doesn't harm to use the above code for other hinting modes also, since the delta values are zero then.\n\n\n\n\n\nFT_Glyph_Metrics\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Glyph_Metrics_\n  {\n    \nFT_Pos\n  width;\n    \nFT_Pos\n  height;\n\n    \nFT_Pos\n  horiBearingX;\n    \nFT_Pos\n  horiBearingY;\n    \nFT_Pos\n  horiAdvance;\n\n    \nFT_Pos\n  vertBearingX;\n    \nFT_Pos\n  vertBearingY;\n    \nFT_Pos\n  vertAdvance;\n\n  } \nFT_Glyph_Metrics\n;\n\n\n\n\n\n\nA structure to model the metrics of a single glyph. The values are expressed in 26.6 fractional pixel format; if the flag \nFT_LOAD_NO_SCALE\n has been used while loading the glyph, values are expressed in font units instead.\n\n\nfields\n\n\n\n\n\nwidth\n\n\nThe glyph's width.\n\n\n\n\nheight\n\n\nThe glyph's height.\n\n\n\n\nhoriBearingX\n\n\nLeft side bearing for horizontal layout.\n\n\n\n\nhoriBearingY\n\n\nTop side bearing for horizontal layout.\n\n\n\n\nhoriAdvance\n\n\nAdvance width for horizontal layout.\n\n\n\n\nvertBearingX\n\n\nLeft side bearing for vertical layout.\n\n\n\n\nvertBearingY\n\n\nTop side bearing for vertical layout. Larger positive values mean further below the vertical glyph origin.\n\n\n\n\nvertAdvance\n\n\nAdvance height for vertical layout. Positive values mean the glyph has a positive advance downward.\n\n\n\n\n\n\n\nnote\n\n\n\nIf not disabled with \nFT_LOAD_NO_HINTING\n, the values represent dimensions of the hinted glyph (in case hinting is applicable).\n\n\nStroking a glyph with an outside border does not increase \nhoriAdvance\n or \nvertAdvance\n; you have to manually adjust these values to account for the added width and height.\n\n\nFreeType doesn't use the \u2018VORG\u2019 table data for CFF fonts because it doesn't have an interface to quickly retrieve the glyph height. The y\u00a0coordinate of the vertical origin can be simply computed as \nvertBearingY + height\n after loading a glyph.\n\n\n\n\n\nFT_SubGlyph\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_SubGlyphRec_*  \nFT_SubGlyph\n;\n\n\n\n\n\n\nThe subglyph structure is an internal object used to describe subglyphs (for example, in the case of composites).\n\n\nnote\n\n\n\nThe subglyph implementation is not part of the high-level API, hence the forward structure declaration.\n\n\nYou can however retrieve subglyph information with \nFT_Get_SubGlyph_Info\n.\n\n\n\n\n\nFT_Bitmap_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Bitmap_Size_\n  {\n    \nFT_Short\n  height;\n    \nFT_Short\n  width;\n\n    \nFT_Pos\n    size;\n\n    \nFT_Pos\n    x_ppem;\n    \nFT_Pos\n    y_ppem;\n\n  } \nFT_Bitmap_Size\n;\n\n\n\n\n\n\nThis structure models the metrics of a bitmap strike (i.e., a set of glyphs for a given point size and resolution) in a bitmap font. It is used for the \navailable_sizes\n field of \nFT_Face\n.\n\n\nfields\n\n\n\n\n\nheight\n\n\nThe vertical distance, in pixels, between two consecutive baselines. It is always positive.\n\n\n\n\nwidth\n\n\nThe average width, in pixels, of all glyphs in the strike.\n\n\n\n\nsize\n\n\nThe nominal size of the strike in 26.6 fractional points. This field is not very useful.\n\n\n\n\nx_ppem\n\n\nThe horizontal ppem (nominal width) in 26.6 fractional pixels.\n\n\n\n\ny_ppem\n\n\nThe vertical ppem (nominal height) in 26.6 fractional pixels.\n\n\n\n\n\n\n\nnote\n\n\n\nWindows FNT: The nominal size given in a FNT font is not reliable. If the driver finds it incorrect, it sets \u2018size\u2019 to some calculated values, and \nx_ppem\n and \ny_ppem\n to the pixel width and height given in the font, respectively.\n\n\nTrueType embedded bitmaps: \u2018size\u2019, \u2018width\u2019, and \u2018height\u2019 values are not contained in the bitmap strike itself. They are computed from the global font parameters.\n\n\n\n\n\nFT_Init_FreeType\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Init_FreeType\n( \nFT_Library\n  *alibrary );\n\n\n\n\n\n\nInitialize a new FreeType library object. The set of modules that are registered by this function is determined at build time.\n\n\noutput\n\n\n\n\n\nalibrary\n\n\nA handle to a new library object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIn case you want to provide your own memory allocating routines, use \nFT_New_Library\n instead, followed by a call to \nFT_Add_Default_Modules\n (or a series of calls to \nFT_Add_Module\n) and \nFT_Set_Default_Properties\n.\n\n\nSee the documentation of \nFT_Library\n and \nFT_Face\n for multi-threading issues.\n\n\nIf you need reference-counting (cf. \nFT_Reference_Library\n), use \nFT_New_Library\n and \nFT_Done_Library\n.\n\n\nIf compilation option FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES is set, this function reads the \nFREETYPE_PROPERTIES\n environment variable to control driver properties. See section \u2018\nDriver properties\n\u2019 for more.\n\n\n\n\n\nFT_Done_FreeType\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_FreeType\n( \nFT_Library\n  library );\n\n\n\n\n\n\nDestroy a given FreeType library object and all of its children, including resources, drivers, faces, sizes, etc.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the target library object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_New_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face\n( \nFT_Library\n   library,\n               \nconst\n \nchar\n*  filepathname,\n               \nFT_Long\n      face_index,\n               \nFT_Face\n     *aface );\n\n\n\n\n\n\nCall \nFT_Open_Face\n to open a font by its pathname.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\npathname\n\n\nA path to the font file.\n\n\n\n\nface_index\n\n\nSee \nFT_Open_Face\n for a detailed description of this parameter.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object. If \nface_index\n is greater than or equal to zero, it must be non-NULL.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nUse \nFT_Done_Face\n to destroy the created \nFT_Face\n object (along with its slot and sizes).\n\n\n\n\n\nFT_Done_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_Face\n( \nFT_Face\n  face );\n\n\n\n\n\n\nDiscard a given face object, as well as all of its child slots and sizes.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nSee the discussion of reference counters in the description of \nFT_Reference_Face\n.\n\n\n\n\n\nFT_Reference_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Reference_Face\n( \nFT_Face\n  face );\n\n\n\n\n\n\nA counter gets initialized to\u00a01 at the time an \nFT_Face\n structure is created. This function increments the counter. \nFT_Done_Face\n then only destroys a face if the counter is\u00a01, otherwise it simply decrements the counter.\n\n\nThis function helps in managing life-cycles of structures that reference \nFT_Face\n objects.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.4.2\n\n\n\n\n\nFT_New_Memory_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Memory_Face\n( \nFT_Library\n      library,\n                      \nconst\n \nFT_Byte\n*  file_base,\n                      \nFT_Long\n         file_size,\n                      \nFT_Long\n         face_index,\n                      \nFT_Face\n        *aface );\n\n\n\n\n\n\nCall \nFT_Open_Face\n to open a font that has been loaded into memory.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nfile_base\n\n\nA pointer to the beginning of the font data.\n\n\n\n\nfile_size\n\n\nThe size of the memory chunk used by the font data.\n\n\n\n\nface_index\n\n\nSee \nFT_Open_Face\n for a detailed description of this parameter.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object. If \nface_index\n is greater than or equal to zero, it must be non-NULL.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou must not deallocate the memory before calling \nFT_Done_Face\n.\n\n\n\n\n\nFT_Face_Properties\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Face_Properties\n( \nFT_Face\n        face,\n                      \nFT_UInt\n        num_properties,\n                      \nFT_Parameter\n*  properties );\n\n\n\n\n\n\nSet or override certain (library or module-wide) properties on a face-by-face basis. Useful for finer-grained control and avoiding locks on shared structures (threads can modify their own faces as they see fit).\n\n\nContrary to \nFT_Property_Set\n, this function uses \nFT_Parameter\n so that you can pass multiple properties to the target face in one call. Note that only a subset of the available properties can be controlled.\n\n\n\n\n\n\nFT_PARAM_TAG_STEM_DARKENING\n (stem darkening, corresponding to the property \u2018no-stem-darkening\u2019 provided by the \u2018autofit\u2019, \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see \nno-stem-darkening\n).\n\n\n\n\n\n\nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\n (LCD filter weights, corresponding to function \nFT_Library_SetLcdFilterWeights\n).\n\n\n\n\n\n\nFT_PARAM_TAG_RANDOM_SEED\n (seed value for the CFF, Type\u00a01, and CID \u2018random\u2019 operator, corresponding to the \u2018random-seed\u2019 property provided by the \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see \nrandom-seed\n).\n\n\n\n\n\n\nPass NULL as \u2018data\u2019 in \nFT_Parameter\n for a given tag to reset the option and use the library or module default again.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\nnum_properties\n\n\nThe number of properties that follow.\n\n\n\n\nproperties\n\n\nA handle to an \nFT_Parameter\n array with \nnum_properties\n elements.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nexample\n\n\n\nHere an example that sets three properties. You must define FT_CONFIG_OPTION_SUBPIXEL_RENDERING to make the LCD filter examples work.\n\n  FT_Parameter         property1;\n  FT_Bool              darken_stems = 1;\n\n  FT_Parameter         property2;\n  FT_LcdFiveTapFilter  custom_weight =\n                         { 0x11, 0x44, 0x56, 0x44, 0x11 };\n\n  FT_Parameter         property3;\n  FT_Int32             random_seed = 314159265;\n\n  FT_Parameter         properties[3] = { property1,\n                                         property2,\n                                         property3 };\n\n\n  property1.tag  = FT_PARAM_TAG_STEM_DARKENING;\n  property1.data = &darken_stems;\n\n  property2.tag  = FT_PARAM_TAG_LCD_FILTER_WEIGHTS;\n  property2.data = custom_weight;\n\n  property3.tag  = FT_PARAM_TAG_RANDOM_SEED;\n  property3.data = &random_seed;\n\n  FT_Face_Properties( face, 3, properties );\n\n\n\nThe next example resets a single property to its default value.\n\n  FT_Parameter  property;\n\n\n  property.tag  = FT_PARAM_TAG_LCD_FILTER_WEIGHTS;\n  property.data = NULL;\n\n  FT_Face_Properties( face, 1, &property );\n\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_Open_Face\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Open_Face\n( \nFT_Library\n           library,\n                \nconst\n \nFT_Open_Args\n*  args,\n                \nFT_Long\n              face_index,\n                \nFT_Face\n             *aface );\n\n\n\n\n\n\nCreate a face object from a given resource described by \nFT_Open_Args\n.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nargs\n\n\nA pointer to an \nFT_Open_Args\n structure that must be filled by the caller.\n\n\n\n\nface_index\n\n\nThis field holds two different values. Bits 0-15 are the index of the face in the font file (starting with value\u00a00). Set it to\u00a00 if there is only one face in the font file.\n[Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation fonts only, specifying the named instance index for the current face index (starting with value\u00a01; value\u00a00 makes FreeType ignore named instances). For non-variation fonts, bits 16-30 are ignored. Assuming that you want to access the third named instance in face\u00a04, \nface_index\n should be set to 0x00030004. If you want to access face\u00a04 without variation handling, simply set \nface_index\n to value\u00a04.\n\nFT_Open_Face\n and its siblings can be used to quickly check whether the font format of a given font resource is supported by FreeType. In general, if the \nface_index\n argument is negative, the function's return value is\u00a00 if the font format is recognized, or non-zero otherwise. The function allocates a more or less empty face handle in \u2018*aface\u2019 (if \u2018aface\u2019 isn't NULL); the only two useful fields in this special case are \nface->num_faces\n and \nface->style_flags\n. For any negative value of \nface_index\n, \nface->num_faces\n gives the number of faces within the font file. For the negative value \u2018-(N+1)\u2019 (with \u2018N\u2019 a non-negative 16-bit value), bits 16-30 in \nface->style_flags\n give the number of named instances in face \u2018N\u2019 if we have a variation font (or zero otherwise). After examination, the returned \nFT_Face\n structure should be deallocated with a call to \nFT_Done_Face\n.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object. If \nface_index\n is greater than or equal to zero, it must be non-NULL.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nUnlike FreeType 1.x, this function automatically creates a glyph slot for the face object that can be accessed directly through \nface->glyph\n.\n\n\nEach new face object created with this function also owns a default \nFT_Size\n object, accessible as \nface->size\n.\n\n\nOne \nFT_Library\n instance can have multiple face objects, this is, \nFT_Open_Face\n and its siblings can be called multiple times using the same \u2018library\u2019 argument.\n\n\nSee the discussion of reference counters in the description of \nFT_Reference_Face\n.\n\n\nexample\n\n\n\nTo loop over all faces, use code similar to the following snippet (omitting the error handling).\n\n  ...\n  FT_Face  face;\n  FT_Long  i, num_faces;\n\n\n  error = FT_Open_Face( library, args, -1, &face );\n  if ( error ) { ... }\n\n  num_faces = face->num_faces;\n  FT_Done_Face( face );\n\n  for ( i = 0; i < num_faces; i++ )\n  {\n    ...\n    error = FT_Open_Face( library, args, i, &face );\n    ...\n    FT_Done_Face( face );\n    ...\n  }\n\n\n\nTo loop over all valid values for \nface_index\n, use something similar to the following snippet, again without error handling. The code accesses all faces immediately (thus only a single call of \nFT_Open_Face\n within the do-loop), with and without named instances.\n\n  ...\n  FT_Face  face;\n\n  FT_Long  num_faces     = 0;\n  FT_Long  num_instances = 0;\n\n  FT_Long  face_idx     = 0;\n  FT_Long  instance_idx = 0;\n\n\n  do\n  {\n    FT_Long  id = ( instance_idx << 16 ) + face_idx;\n\n\n    error = FT_Open_Face( library, args, id, &face );\n    if ( error ) { ... }\n\n    num_faces     = face->num_faces;\n    num_instances = face->style_flags >> 16;\n\n    ...\n\n    FT_Done_Face( face );\n\n    if ( instance_idx < num_instances )\n      instance_idx++;\n    else\n    {\n      face_idx++;\n      instance_idx = 0;\n    }\n\n  } while ( face_idx < num_faces )\n\n\n\n\n\n\nFT_Open_Args\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Open_Args_\n  {\n    \nFT_UInt\n         flags;\n    \nconst\n \nFT_Byte\n*  memory_base;\n    \nFT_Long\n         memory_size;\n    \nFT_String\n*      pathname;\n    \nFT_Stream\n       stream;\n    \nFT_Module\n       driver;\n    \nFT_Int\n          num_params;\n    \nFT_Parameter\n*   params;\n\n  } \nFT_Open_Args\n;\n\n\n\n\n\n\nA structure to indicate how to open a new font file or stream. A pointer to such a structure can be used as a parameter for the functions \nFT_Open_Face\n and \nFT_Attach_Stream\n.\n\n\nfields\n\n\n\n\n\nflags\n\n\nA set of bit flags indicating how to use the structure.\n\n\n\n\nmemory_base\n\n\nThe first byte of the file in memory.\n\n\n\n\nmemory_size\n\n\nThe size in bytes of the file in memory.\n\n\n\n\npathname\n\n\nA pointer to an 8-bit file pathname.\n\n\n\n\nstream\n\n\nA handle to a source stream object.\n\n\n\n\ndriver\n\n\nThis field is exclusively used by \nFT_Open_Face\n; it simply specifies the font driver to use for opening the face. If set to NULL, FreeType tries to load the face with each one of the drivers in its list.\n\n\n\n\nnum_params\n\n\nThe number of extra parameters.\n\n\n\n\nparams\n\n\nExtra parameters passed to the font driver when opening a new face.\n\n\n\n\n\n\n\nnote\n\n\n\nThe stream type is determined by the contents of \u2018flags\u2019 that are tested in the following order by \nFT_Open_Face\n:\n\n\nIf the \nFT_OPEN_MEMORY\n bit is set, assume that this is a memory file of \nmemory_size\n bytes, located at \nmemory_address\n. The data are not copied, and the client is responsible for releasing and destroying them \nafter\n the corresponding call to \nFT_Done_Face\n.\n\n\nOtherwise, if the \nFT_OPEN_STREAM\n bit is set, assume that a custom input stream \u2018stream\u2019 is used.\n\n\nOtherwise, if the \nFT_OPEN_PATHNAME\n bit is set, assume that this is a normal file and use \u2018pathname\u2019 to open it.\n\n\nIf the \nFT_OPEN_DRIVER\n bit is set, \nFT_Open_Face\n only tries to open the file with the driver whose handler is in \u2018driver\u2019.\n\n\nIf the \nFT_OPEN_PARAMS\n bit is set, the parameters given by \nnum_params\n and \u2018params\u2019 is used. They are ignored otherwise.\n\n\nIdeally, both the \u2018pathname\u2019 and \u2018params\u2019 fields should be tagged as \u2018const\u2019; this is missing for API backward compatibility. In other words, applications should treat them as read-only.\n\n\n\n\n\nFT_Parameter\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Parameter_\n  {\n    \nFT_ULong\n    tag;\n    \nFT_Pointer\n  data;\n\n  } \nFT_Parameter\n;\n\n\n\n\n\n\nA simple structure to pass more or less generic parameters to \nFT_Open_Face\n and \nFT_Face_Properties\n.\n\n\nfields\n\n\n\n\n\ntag\n\n\nA four-byte identification tag.\n\n\n\n\ndata\n\n\nA pointer to the parameter data.\n\n\n\n\n\n\n\nnote\n\n\n\nThe ID and function of parameters are driver-specific. See section \u2018\nParameter Tags\n\u2019 for more information.\n\n\n\n\n\nFT_Attach_File\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Attach_File\n( \nFT_Face\n      face,\n                  \nconst\n \nchar\n*  filepathname );\n\n\n\n\n\n\nCall \nFT_Attach_Stream\n to attach a file.\n\n\ninout\n\n\n\n\n\nface\n\n\nThe target face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nfilepathname\n\n\nThe pathname.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Attach_Stream\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Attach_Stream\n( \nFT_Face\n        face,\n                    \nFT_Open_Args\n*  parameters );\n\n\n\n\n\n\n\u2018Attach\u2019 data to a face object. Normally, this is used to read additional information for the face object. For example, you can attach an AFM file that comes with a Type\u00a01 font to get the kerning values and other metrics.\n\n\ninout\n\n\n\n\n\nface\n\n\nThe target face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nparameters\n\n\nA pointer to \nFT_Open_Args\n that must be filled by the caller.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe meaning of the \u2018attach\u2019 (i.e., what really happens when the new file is read) is not fixed by FreeType itself. It really depends on the font format (and thus the font driver).\n\n\nClient applications are expected to know what they are doing when invoking this function. Most drivers simply do not implement file or stream attachments.\n\n\n\n\n\nFT_Set_Char_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Char_Size\n( \nFT_Face\n     face,\n                    \nFT_F26Dot6\n  char_width,\n                    \nFT_F26Dot6\n  char_height,\n                    \nFT_UInt\n     horz_resolution,\n                    \nFT_UInt\n     vert_resolution );\n\n\n\n\n\n\nCall \nFT_Request_Size\n to request the nominal size (in points).\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nchar_width\n\n\nThe nominal width, in 26.6 fractional points.\n\n\n\n\nchar_height\n\n\nThe nominal height, in 26.6 fractional points.\n\n\n\n\nhorz_resolution\n\n\nThe horizontal resolution in dpi.\n\n\n\n\nvert_resolution\n\n\nThe vertical resolution in dpi.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nWhile this function allows fractional points as input values, the resulting ppem value for the given resolution is always rounded to the nearest integer.\n\n\nIf either the character width or height is zero, it is set equal to the other value.\n\n\nIf either the horizontal or vertical resolution is zero, it is set equal to the other value.\n\n\nA character width or height smaller than 1pt is set to 1pt; if both resolution values are zero, they are set to 72dpi.\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Set_Pixel_Sizes\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Pixel_Sizes\n( \nFT_Face\n  face,\n                      \nFT_UInt\n  pixel_width,\n                      \nFT_UInt\n  pixel_height );\n\n\n\n\n\n\nCall \nFT_Request_Size\n to request the nominal size (in pixels).\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the target face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\npixel_width\n\n\nThe nominal width, in pixels.\n\n\n\n\npixel_height\n\n\nThe nominal height, in pixels.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should not rely on the resulting glyphs matching or being constrained to this pixel size. Refer to \nFT_Request_Size\n to understand how requested sizes relate to actual sizes.\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Request_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Request_Size\n( \nFT_Face\n          face,\n                   \nFT_Size_Request\n  req );\n\n\n\n\n\n\nResize the scale of the active \nFT_Size\n object in a face.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nreq\n\n\nA pointer to a \nFT_Size_RequestRec\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAlthough drivers may select the bitmap strike matching the request, you should not rely on this if you intend to select a particular bitmap strike. Use \nFT_Select_Size\n instead in that case.\n\n\nThe relation between the requested size and the resulting glyph size is dependent entirely on how the size is defined in the source face. The font designer chooses the final size of each glyph relative to this size. For more information refer to \u2018\nhttps://www.freetype.org/freetype2/docs/glyphs/glyphs-2.html\n\u2019.\n\n\nContrary to \nFT_Set_Char_Size\n, this function doesn't have special code to normalize zero-valued widths, heights, or resolutions (which lead to errors in most cases).\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Select_Size\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Select_Size\n( \nFT_Face\n  face,\n                  \nFT_Int\n   strike_index );\n\n\n\n\n\n\nSelect a bitmap strike. To be more precise, this function sets the scaling factors of the active \nFT_Size\n object in a face so that bitmaps from this particular strike are taken by \nFT_Load_Glyph\n and friends.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nstrike_index\n\n\nThe index of the bitmap strike in the \navailable_sizes\n field of \nFT_FaceRec\n structure.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nFor bitmaps embedded in outline fonts it is common that only a subset of the available glyphs at a given ppem value is available. FreeType silently uses outlines if there is no bitmap for a given glyph index.\n\n\nFor GX and OpenType variation fonts, a bitmap strike makes sense only if the default instance is active (this is, no glyph variation takes place); otherwise, FreeType simply ignores bitmap strikes. The same is true for all named instances that are different from the default instance.\n\n\nDon't use this function if you are using the FreeType cache API.\n\n\n\n\n\nFT_Size_Request_Type\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Size_Request_Type_\n  {\n    \nFT_SIZE_REQUEST_TYPE_NOMINAL\n,\n    \nFT_SIZE_REQUEST_TYPE_REAL_DIM\n,\n    \nFT_SIZE_REQUEST_TYPE_BBOX\n,\n    \nFT_SIZE_REQUEST_TYPE_CELL\n,\n    \nFT_SIZE_REQUEST_TYPE_SCALES\n,\n\n    FT_SIZE_REQUEST_TYPE_MAX\n\n  } \nFT_Size_Request_Type\n;\n\n\n\n\n\n\nAn enumeration type that lists the supported size request types, i.e., what input size (in font units) maps to the requested output size (in pixels, as computed from the arguments of \nFT_Size_Request\n).\n\n\nvalues\n\n\n\n\n\nFT_SIZE_REQUEST_TYPE_NOMINAL\n\n\nThe nominal size. The \nunits_per_EM\n field of \nFT_FaceRec\n is used to determine both scaling values.\nThis is the standard scaling found in most applications. In particular, use this size request type for TrueType fonts if they provide optical scaling or something similar. Note, however, that \nunits_per_EM\n is a rather abstract value which bears no relation to the actual size of the glyphs in a font.\n\n\n\n\nFT_SIZE_REQUEST_TYPE_REAL_DIM\n\n\nThe real dimension. The sum of the \u2018ascender\u2019 and (minus of) the \u2018descender\u2019 fields of \nFT_FaceRec\n is used to determine both scaling values.\n\n\n\n\nFT_SIZE_REQUEST_TYPE_BBOX\n\n\nThe font bounding box. The width and height of the \u2018bbox\u2019 field of \nFT_FaceRec\n are used to determine the horizontal and vertical scaling value, respectively.\n\n\n\n\nFT_SIZE_REQUEST_TYPE_CELL\n\n\nThe \nmax_advance_width\n field of \nFT_FaceRec\n is used to determine the horizontal scaling value; the vertical scaling value is determined the same way as \nFT_SIZE_REQUEST_TYPE_REAL_DIM\n does. Finally, both scaling values are set to the smaller one. This type is useful if you want to specify the font size for, say, a window of a given dimension and 80x24 cells.\n\n\n\n\nFT_SIZE_REQUEST_TYPE_SCALES\n\n\nSpecify the scaling values directly.\n\n\n\n\n\n\n\nnote\n\n\n\nThe above descriptions only apply to scalable formats. For bitmap formats, the behaviour is up to the driver.\n\n\nSee the note section of \nFT_Size_Metrics\n if you wonder how size requesting relates to scaling values.\n\n\n\n\n\nFT_Size_RequestRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Size_RequestRec_\n  {\n    \nFT_Size_Request_Type\n  type;\n    \nFT_Long\n               width;\n    \nFT_Long\n               height;\n    \nFT_UInt\n               horiResolution;\n    \nFT_UInt\n               vertResolution;\n\n  } \nFT_Size_RequestRec\n;\n\n\n\n\n\n\nA structure to model a size request.\n\n\nfields\n\n\n\n\n\ntype\n\n\nSee \nFT_Size_Request_Type\n.\n\n\n\n\nwidth\n\n\nThe desired width, given as a 26.6 fractional point value (with 72pt = 1in).\n\n\n\n\nheight\n\n\nThe desired height, given as a 26.6 fractional point value (with 72pt = 1in).\n\n\n\n\nhoriResolution\n\n\nThe horizontal resolution (dpi, i.e., pixels per inch). If set to zero, \u2018width\u2019 is treated as a 26.6 fractional \npixel\n value, which gets internally rounded to an integer.\n\n\n\n\nvertResolution\n\n\nThe vertical resolution (dpi, i.e., pixels per inch). If set to zero, \u2018height\u2019 is treated as a 26.6 fractional \npixel\n value, which gets internally rounded to an integer.\n\n\n\n\n\n\n\nnote\n\n\n\nIf \u2018width\u2019 is zero, the horizontal scaling value is set equal to the vertical scaling value, and vice versa.\n\n\nIf \u2018type\u2019 is FT_SIZE_REQUEST_TYPE_SCALES, \u2018width\u2019 and \u2018height\u2019 are interpreted directly as 16.16 fractional scaling values, without any further modification, and both \nhoriResolution\n and \nvertResolution\n are ignored.\n\n\n\n\n\nFT_Size_Request\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_Size_RequestRec_  *\nFT_Size_Request\n;\n\n\n\n\n\n\nA handle to a size request structure.\n\n\n\n\n\nFT_Set_Transform\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Set_Transform\n( \nFT_Face\n     face,\n                    \nFT_Matrix\n*  matrix,\n                    \nFT_Vector\n*  delta );\n\n\n\n\n\n\nSet the transformation that is applied to glyph images when they are loaded into a glyph slot through \nFT_Load_Glyph\n.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nmatrix\n\n\nA pointer to the transformation's 2x2 matrix. Use NULL for the identity matrix.\n\n\n\n\ndelta\n\n\nA pointer to the translation vector. Use NULL for the null vector.\n\n\n\n\n\n\n\nnote\n\n\n\nThe transformation is only applied to scalable image formats after the glyph has been loaded. It means that hinting is unaltered by the transformation and is performed on the character size given in the last call to \nFT_Set_Char_Size\n or \nFT_Set_Pixel_Sizes\n.\n\n\nNote that this also transforms the \nface.glyph.advance\n field, but \nnot\n the values in \nface.glyph.metrics\n.\n\n\n\n\n\nFT_Load_Glyph\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Load_Glyph\n( \nFT_Face\n   face,\n                 \nFT_UInt\n   glyph_index,\n                 \nFT_Int32\n  load_flags );\n\n\n\n\n\n\nLoad a glyph into the glyph slot of a face object.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the target face object where the glyph is loaded.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nglyph_index\n\n\nThe index of the glyph in the font file. For CID-keyed fonts (either in PS or in CFF format) this argument specifies the CID value.\n\n\n\n\nload_flags\n\n\nA flag indicating what to load for this glyph. The \nFT_LOAD_XXX\n constants can be used to control the glyph loading process (e.g., whether the outline should be scaled, whether to load bitmaps or not, whether to hint the outline, etc).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe loaded glyph may be transformed. See \nFT_Set_Transform\n for the details.\n\n\nFor subsetted CID-keyed fonts, \nFT_Err_Invalid_Argument\n is returned for invalid CID values (this is, for CID values that don't have a corresponding glyph in the font). See the discussion of the \nFT_FACE_FLAG_CID_KEYED\n flag for more details.\n\n\nIf you receive \nFT_Err_Glyph_Too_Big\n, try getting the glyph outline at EM size, then scale it manually and fill it as a graphics operation.\n\n\n\n\n\nFT_Get_Char_Index\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Get_Char_Index\n( \nFT_Face\n   face,\n                     \nFT_ULong\n  charcode );\n\n\n\n\n\n\nReturn the glyph index of a given character code. This function uses the currently selected charmap to do the mapping.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\ncharcode\n\n\nThe character code.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe glyph index. 0\u00a0means \u2018undefined character code\u2019.\n\n\nnote\n\n\n\nIf you use FreeType to manipulate the contents of font files directly, be aware that the glyph index returned by this function doesn't always correspond to the internal indices used within the file. This is done to ensure that value\u00a00 always corresponds to the \u2018missing glyph\u2019. If the first glyph is not named \u2018.notdef\u2019, then for Type\u00a01 and Type\u00a042 fonts, \u2018.notdef\u2019 will be moved into the glyph ID\u00a00 position, and whatever was there will be moved to the position \u2018.notdef\u2019 had. For Type\u00a01 fonts, if there is no \u2018.notdef\u2019 glyph at all, then one will be created at index\u00a00 and whatever was there will be moved to the last index -- Type\u00a042 fonts are considered invalid under this condition.\n\n\n\n\n\nFT_Get_First_Char\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_ULong\n )\n  \nFT_Get_First_Char\n( \nFT_Face\n   face,\n                     \nFT_UInt\n  *agindex );\n\n\n\n\n\n\nReturn the first character code in the current charmap of a given face, together with its corresponding glyph index.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nagindex\n\n\nGlyph index of first character code. 0\u00a0if charmap is empty.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe charmap's first character code.\n\n\nnote\n\n\n\nYou should use this function together with \nFT_Get_Next_Char\n to parse all character codes available in a given charmap. The code should look like this:\n\n  FT_ULong  charcode;\n  FT_UInt   gindex;\n\n\n  charcode = FT_Get_First_Char( face, &gindex );\n  while ( gindex != 0 )\n  {\n    ... do something with (charcode,gindex) pair ...\n\n    charcode = FT_Get_Next_Char( face, charcode, &gindex );\n  }\n\n\n\nBe aware that character codes can have values up to 0xFFFFFFFF; this might happen for non-Unicode or malformed cmaps. However, even with regular Unicode encoding, so-called \u2018last resort fonts\u2019 (using SFNT cmap format 13, see function \nFT_Get_CMap_Format\n) normally have entries for all Unicode characters up to 0x1FFFFF, which can cause \na lot\n of iterations.\n\n\nNote that \u2018*agindex\u2019 is set to\u00a00 if the charmap is empty. The result itself can be\u00a00 in two cases: if the charmap is empty or if the value\u00a00 is the first valid character code.\n\n\n\n\n\nFT_Get_Next_Char\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_ULong\n )\n  \nFT_Get_Next_Char\n( \nFT_Face\n    face,\n                    \nFT_ULong\n   char_code,\n                    \nFT_UInt\n   *agindex );\n\n\n\n\n\n\nReturn the next character code in the current charmap of a given face following the value \nchar_code\n, as well as the corresponding glyph index.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\nchar_code\n\n\nThe starting character code.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nagindex\n\n\nGlyph index of next character code. 0\u00a0if charmap is empty.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe charmap's next character code.\n\n\nnote\n\n\n\nYou should use this function with \nFT_Get_First_Char\n to walk over all character codes available in a given charmap. See the note for that function for a simple code example.\n\n\nNote that \u2018*agindex\u2019 is set to\u00a00 when there are no more codes in the charmap.\n\n\n\n\n\nFT_Get_Name_Index\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Get_Name_Index\n( \nFT_Face\n     face,\n                     \nFT_String\n*  glyph_name );\n\n\n\n\n\n\nReturn the glyph index of a given glyph name.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\nglyph_name\n\n\nThe glyph name.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe glyph index. 0\u00a0means \u2018undefined character code\u2019.\n\n\n\n\n\nFT_Load_Char\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Load_Char\n( \nFT_Face\n   face,\n                \nFT_ULong\n  char_code,\n                \nFT_Int32\n  load_flags );\n\n\n\n\n\n\nLoad a glyph into the glyph slot of a face object, accessed by its character code.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to a target face object where the glyph is loaded.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nchar_code\n\n\nThe glyph's character code, according to the current charmap used in the face.\n\n\n\n\nload_flags\n\n\nA flag indicating what to load for this glyph. The \nFT_LOAD_XXX\n constants can be used to control the glyph loading process (e.g., whether the outline should be scaled, whether to load bitmaps or not, whether to hint the outline, etc).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function simply calls \nFT_Get_Char_Index\n and \nFT_Load_Glyph\n.\n\n\nMany fonts contain glyphs that can't be loaded by this function since its glyph indices are not listed in any of the font's charmaps.\n\n\nIf no active cmap is set up (i.e., \nface->charmap\n is zero), the call to \nFT_Get_Char_Index\n is omitted, and the function behaves identically to \nFT_Load_Glyph\n.\n\n\n\n\n\nFT_LOAD_TARGET_MODE\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_LOAD_TARGET_MODE\n( x )  ( (\nFT_Render_Mode\n)( ( (x) >> 16 ) & 15 ) )\n\n\n\n\n\n\nReturn the \nFT_Render_Mode\n corresponding to a given \nFT_LOAD_TARGET_XXX\n value.\n\n\n\n\n\nFT_Render_Glyph\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Render_Glyph\n( \nFT_GlyphSlot\n    slot,\n                   \nFT_Render_Mode\n  render_mode );\n\n\n\n\n\n\nConvert a given glyph image to a bitmap. It does so by inspecting the glyph image format, finding the relevant renderer, and invoking it.\n\n\ninout\n\n\n\n\n\nslot\n\n\nA handle to the glyph slot containing the image to convert.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nrender_mode\n\n\nThe render mode used to render the glyph image into a bitmap. See \nFT_Render_Mode\n for a list of possible values.\nIf \nFT_RENDER_MODE_NORMAL\n is used, the flag \nFT_LOAD_COLOR\n can be additionally set to make the function provide a default blending of colored glyph layers associated with the current glyph slot (provided the font contains such layers) instead of rendering the glyph slot's outline. See \nFT_LOAD_COLOR\n for more information.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nTo get meaningful results, font scaling values must be set with functions like \nFT_Set_Char_Size\n before calling \nFT_Render_Glyph\n.\n\n\nWhen FreeType outputs a bitmap of a glyph, it really outputs an alpha coverage map. If a pixel is completely covered by a filled-in outline, the bitmap contains 0xFF at that pixel, meaning that 0xFF/0xFF fraction of that pixel is covered, meaning the pixel is 100% black (or 0% bright). If a pixel is only 50% covered (value 0x80), the pixel is made 50% black (50% bright or a middle shade of grey). 0% covered means 0% black (100% bright or white).\n\n\nOn high-DPI screens like on smartphones and tablets, the pixels are so small that their chance of being completely covered and therefore completely black are fairly good. On the low-DPI screens, however, the situation is different. The pixels are too large for most of the details of a glyph and shades of gray are the norm rather than the exception.\n\n\nThis is relevant because all our screens have a second problem: they are not linear. 1\u00a0+\u00a01 is not\u00a02. Twice the value does not result in twice the brightness. When a pixel is only 50% covered, the coverage map says 50% black, and this translates to a pixel value of 128 when you use 8\u00a0bits per channel (0-255). However, this does not translate to 50% brightness for that pixel on our sRGB and gamma\u00a02.2 screens. Due to their non-linearity, they dwell longer in the darks and only a pixel value of about 186 results in 50% brightness -- 128 ends up too dark on both bright and dark backgrounds. The net result is that dark text looks burnt-out, pixely and blotchy on bright background, bright text too frail on dark backgrounds, and colored text on colored background (for example, red on green) seems to have dark halos or \u2018dirt\u2019 around it. The situation is especially ugly for diagonal stems like in \u2018w\u2019 glyph shapes where the quality of FreeType's anti-aliasing depends on the correct display of grays. On high-DPI screens where smaller, fully black pixels reign supreme, this doesn't matter, but on our low-DPI screens with all the gray shades, it does. 0% and 100% brightness are the same things in linear and non-linear space, just all the shades in-between aren't.\n\n\nThe blending function for placing text over a background is\n\n  dst = alpha * src + (1 - alpha) * dst    ,\n\n\n\nwhich is known as the OVER operator.\n\n\nTo correctly composite an antialiased pixel of a glyph onto a surface,\n\n\n\n\n\n\ntake the foreground and background colors (e.g., in sRGB space) and apply gamma to get them in a linear space,\n\n\n\n\n\n\nuse OVER to blend the two linear colors using the glyph pixel as the alpha value (remember, the glyph bitmap is an alpha coverage bitmap), and\n\n\n\n\n\n\napply inverse gamma to the blended pixel and write it back to the image.\n\n\n\n\n\n\nInternal testing at Adobe found that a target inverse gamma of\u00a01.8 for step\u00a03 gives good results across a wide range of displays with an sRGB gamma curve or a similar one.\n\n\nThis process can cost performance. There is an approximation that does not need to know about the background color; see \nhttps://bel.fi/alankila/lcd/\n and \nhttps://bel.fi/alankila/lcd/alpcor.html\n for details.\n\n\nATTENTION\n: Linear blending is even more important when dealing with subpixel-rendered glyphs to prevent color-fringing! A subpixel-rendered glyph must first be filtered with a filter that gives equal weight to the three color primaries and does not exceed a sum of 0x100, see section \u2018\nSubpixel Rendering\n\u2019. Then the only difference to gray linear blending is that subpixel-rendered linear blending is done 3\u00a0times per pixel: red foreground subpixel to red background subpixel and so on for green and blue.\n\n\n\n\n\nFT_Render_Mode\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Render_Mode_\n  {\n    \nFT_RENDER_MODE_NORMAL\n = 0,\n    \nFT_RENDER_MODE_LIGHT\n,\n    \nFT_RENDER_MODE_MONO\n,\n    \nFT_RENDER_MODE_LCD\n,\n    \nFT_RENDER_MODE_LCD_V\n,\n\n    FT_RENDER_MODE_MAX\n\n  } \nFT_Render_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Render_Mode\n' values instead                       */\n#\ndefine\n ft_render_mode_normal  \nFT_RENDER_MODE_NORMAL\n\n#\ndefine\n ft_render_mode_mono    \nFT_RENDER_MODE_MONO\n\n\n\n\n\n\n\nRender modes supported by FreeType\u00a02. Each mode corresponds to a specific type of scanline conversion performed on the outline.\n\n\nFor bitmap fonts and embedded bitmaps the \nbitmap->pixel_mode\n field in the \nFT_GlyphSlotRec\n structure gives the format of the returned bitmap.\n\n\nAll modes except \nFT_RENDER_MODE_MONO\n use 256 levels of opacity, indicating pixel coverage. Use linear alpha blending and gamma correction to correctly render non-monochrome glyph bitmaps onto a surface; see \nFT_Render_Glyph\n.\n\n\nvalues\n\n\n\n\n\nFT_RENDER_MODE_NORMAL\n\n\nDefault render mode; it corresponds to 8-bit anti-aliased bitmaps.\n\n\n\n\nFT_RENDER_MODE_LIGHT\n\n\nThis is equivalent to \nFT_RENDER_MODE_NORMAL\n. It is only defined as a separate value because render modes are also used indirectly to define hinting algorithm selectors. See \nFT_LOAD_TARGET_XXX\n for details.\n\n\n\n\nFT_RENDER_MODE_MONO\n\n\nThis mode corresponds to 1-bit bitmaps (with 2\u00a0levels of opacity).\n\n\n\n\nFT_RENDER_MODE_LCD\n\n\nThis mode corresponds to horizontal RGB and BGR subpixel displays like LCD screens. It produces 8-bit bitmaps that are 3\u00a0times the width of the original glyph outline in pixels, and which use the \nFT_PIXEL_MODE_LCD\n mode.\n\n\n\n\nFT_RENDER_MODE_LCD_V\n\n\nThis mode corresponds to vertical RGB and BGR subpixel displays (like PDA screens, rotated LCD displays, etc.). It produces 8-bit bitmaps that are 3\u00a0times the height of the original glyph outline in pixels and use the \nFT_PIXEL_MODE_LCD_V\n mode.\n\n\n\n\n\n\n\nnote\n\n\n\nShould you define FT_CONFIG_OPTION_SUBPIXEL_RENDERING in your \nftoption.h\n, which enables patented ClearType-style rendering, the LCD-optimized glyph bitmaps should be filtered to reduce color fringes inherent to this technology. You can either set up LCD filtering with \nFT_Library_SetLcdFilter\n or \nFT_Face_Properties\n, or do the filtering yourself. The default FreeType LCD rendering technology does not require filtering.\n\n\nThe selected render mode only affects vector glyphs of a font. Embedded bitmaps often have a different pixel mode like \nFT_PIXEL_MODE_MONO\n. You can use \nFT_Bitmap_Convert\n to transform them into 8-bit pixmaps.\n\n\n\n\n\nFT_Get_Kerning\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Kerning\n( \nFT_Face\n     face,\n                  \nFT_UInt\n     left_glyph,\n                  \nFT_UInt\n     right_glyph,\n                  \nFT_UInt\n     kern_mode,\n                  \nFT_Vector\n  *akerning );\n\n\n\n\n\n\nReturn the kerning vector between two glyphs of the same face.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a source face object.\n\n\n\n\nleft_glyph\n\n\nThe index of the left glyph in the kern pair.\n\n\n\n\nright_glyph\n\n\nThe index of the right glyph in the kern pair.\n\n\n\n\nkern_mode\n\n\nSee \nFT_Kerning_Mode\n for more information. Determines the scale and dimension of the returned kerning vector.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nakerning\n\n\nThe kerning vector. This is either in font units, fractional pixels (26.6 format), or pixels for scalable formats, and in pixels for fixed-sizes formats.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nOnly horizontal layouts (left-to-right & right-to-left) are supported by this method. Other layouts, or more sophisticated kernings, are out of the scope of this API function -- they can be implemented through format-specific interfaces.\n\n\nKerning for OpenType fonts implemented in a \u2018GPOS\u2019 table is not supported; use \nFT_HAS_KERNING\n to find out whether a font has data that can be extracted with \nFT_Get_Kerning\n.\n\n\n\n\n\nFT_Kerning_Mode\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Kerning_Mode_\n  {\n    \nFT_KERNING_DEFAULT\n = 0,\n    \nFT_KERNING_UNFITTED\n,\n    \nFT_KERNING_UNSCALED\n\n\n  } \nFT_Kerning_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Kerning_Mode\n' values instead                      */\n#\ndefine\n ft_kerning_default   \nFT_KERNING_DEFAULT\n\n#\ndefine\n ft_kerning_unfitted  \nFT_KERNING_UNFITTED\n\n#\ndefine\n ft_kerning_unscaled  \nFT_KERNING_UNSCALED\n\n\n\n\n\n\n\nAn enumeration to specify the format of kerning values returned by \nFT_Get_Kerning\n.\n\n\nvalues\n\n\n\n\n\nFT_KERNING_DEFAULT\n\n\nReturn grid-fitted kerning distances in 26.6 fractional pixels.\n\n\n\n\nFT_KERNING_UNFITTED\n\n\nReturn un-grid-fitted kerning distances in 26.6 fractional pixels.\n\n\n\n\nFT_KERNING_UNSCALED\n\n\nReturn the kerning vector in original font units.\n\n\n\n\n\n\n\nnote\n\n\n\nFT_KERNING_DEFAULT returns full pixel values; it also makes FreeType heuristically scale down kerning distances at small ppem values so that they don't become too big.\n\n\nBoth FT_KERNING_DEFAULT and FT_KERNING_UNFITTED use the current horizontal scaling factor (as set e.g. with \nFT_Set_Char_Size\n) to convert font units to pixels.\n\n\n\n\n\nFT_Get_Track_Kerning\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Track_Kerning\n( \nFT_Face\n    face,\n                        \nFT_Fixed\n   point_size,\n                        \nFT_Int\n     degree,\n                        \nFT_Fixed\n*  akerning );\n\n\n\n\n\n\nReturn the track kerning for a given face object at a given size.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a source face object.\n\n\n\n\npoint_size\n\n\nThe point size in 16.16 fractional points.\n\n\n\n\ndegree\n\n\nThe degree of tightness. Increasingly negative values represent tighter track kerning, while increasingly positive values represent looser track kerning. Value zero means no track kerning.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nakerning\n\n\nThe kerning in 16.16 fractional points, to be uniformly applied between all glyphs.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nCurrently, only the Type\u00a01 font driver supports track kerning, using data from AFM files (if attached with \nFT_Attach_File\n or \nFT_Attach_Stream\n).\n\n\nOnly very few AFM files come with track kerning data; please refer to Adobe's AFM specification for more details.\n\n\n\n\n\nFT_Get_Glyph_Name\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Glyph_Name\n( \nFT_Face\n     face,\n                     \nFT_UInt\n     glyph_index,\n                     \nFT_Pointer\n  buffer,\n                     \nFT_UInt\n     buffer_max );\n\n\n\n\n\n\nRetrieve the ASCII name of a given glyph in a face. This only works for those faces where \nFT_HAS_GLYPH_NAMES\n(face) returns\u00a01.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a source face object.\n\n\n\n\nglyph_index\n\n\nThe glyph index.\n\n\n\n\nbuffer_max\n\n\nThe maximum number of bytes available in the buffer.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nbuffer\n\n\nA pointer to a target buffer where the name is copied to.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAn error is returned if the face doesn't provide glyph names or if the glyph index is invalid. In all cases of failure, the first byte of \u2018buffer\u2019 is set to\u00a00 to indicate an empty name.\n\n\nThe glyph name is truncated to fit within the buffer if it is too long. The returned string is always zero-terminated.\n\n\nBe aware that FreeType reorders glyph indices internally so that glyph index\u00a00 always corresponds to the \u2018missing glyph\u2019 (called \u2018.notdef\u2019).\n\n\nThis function always returns an error if the config macro \nFT_CONFIG_OPTION_NO_GLYPH_NAMES\n is not defined in \nftoption.h\n.\n\n\n\n\n\nFT_Get_Postscript_Name\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nconst\n \nchar\n* )\n  \nFT_Get_Postscript_Name\n( \nFT_Face\n  face );\n\n\n\n\n\n\nRetrieve the ASCII PostScript name of a given face, if available. This only works with PostScript, TrueType, and OpenType fonts.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nA pointer to the face's PostScript name. NULL if unavailable.\n\n\nnote\n\n\n\nThe returned pointer is owned by the face and is destroyed with it.\n\n\nFor variation fonts, this string changes if you select a different instance, and you have to call \nFT_Get_PostScript_Name\n again to retrieve it. FreeType follows Adobe TechNote #5902, \u2018Generating PostScript Names for Fonts Using OpenType Font Variations\u2019.\n\n\nhttps://download.macromedia.com/pub/developer/opentype/tech-notes/5902.AdobePSNameGeneration.html\n\n\n[Since 2.9] Special PostScript names for named instances are only returned if the named instance is set with \nFT_Set_Named_Instance\n (and the font has corresponding entries in its \u2018fvar\u2019 table). If \nFT_IS_VARIATION\n returns true, the algorithmically derived PostScript name is provided, not looking up special entries for named instances.\n\n\n\n\n\nFT_CharMapRec\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_CharMapRec_\n  {\n    \nFT_Face\n      face;\n    \nFT_Encoding\n  encoding;\n    \nFT_UShort\n    platform_id;\n    \nFT_UShort\n    encoding_id;\n\n  } \nFT_CharMapRec\n;\n\n\n\n\n\n\nThe base charmap structure.\n\n\nfields\n\n\n\n\n\nface\n\n\nA handle to the parent face object.\n\n\n\n\nencoding\n\n\nAn \nFT_Encoding\n tag identifying the charmap. Use this with \nFT_Select_Charmap\n.\n\n\n\n\nplatform_id\n\n\nAn ID number describing the platform for the following encoding ID. This comes directly from the TrueType specification and gets emulated for other formats.\n\n\n\n\nencoding_id\n\n\nA platform-specific encoding number. This also comes from the TrueType specification and gets emulated similarly.\n\n\n\n\n\n\n\n\n\n\nFT_Select_Charmap\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Select_Charmap\n( \nFT_Face\n      face,\n                     \nFT_Encoding\n  encoding );\n\n\n\n\n\n\nSelect a given charmap by its encoding tag (as listed in \nfreetype.h\n).\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nencoding\n\n\nA handle to the selected encoding.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function returns an error if no charmap in the face corresponds to the encoding queried here.\n\n\nBecause many fonts contain more than a single cmap for Unicode encoding, this function has some special code to select the one that covers Unicode best (\u2018best\u2019 in the sense that a UCS-4 cmap is preferred to a UCS-2 cmap). It is thus preferable to \nFT_Set_Charmap\n in this case.\n\n\n\n\n\nFT_Set_Charmap\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Charmap\n( \nFT_Face\n     face,\n                  \nFT_CharMap\n  charmap );\n\n\n\n\n\n\nSelect a given charmap for character code to glyph index mapping.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\ncharmap\n\n\nA handle to the selected charmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function returns an error if the charmap is not part of the face (i.e., if it is not listed in the \nface->charmaps\n table).\n\n\nIt also fails if an OpenType type\u00a014 charmap is selected (which doesn't map character codes to glyph indices at all).\n\n\n\n\n\nFT_Get_Charmap_Index\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Int\n )\n  \nFT_Get_Charmap_Index\n( \nFT_CharMap\n  charmap );\n\n\n\n\n\n\nRetrieve index of a given charmap.\n\n\ninput\n\n\n\n\n\ncharmap\n\n\nA handle to a charmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe index into the array of character maps within the face to which \u2018charmap\u2019 belongs. If an error occurs, -1 is returned.\n\n\n\n\n\nFT_Get_FSType_Flags\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UShort\n )\n  \nFT_Get_FSType_Flags\n( \nFT_Face\n  face );\n\n\n\n\n\n\nReturn the \nfsType\n flags for a font.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe \nfsType\n flags, see \nFT_FSTYPE_XXX\n.\n\n\nnote\n\n\n\nUse this function rather than directly reading the \nfs_type\n field in the \nPS_FontInfoRec\n structure, which is only guaranteed to return the correct results for Type\u00a01 fonts.\n\n\nsince\n\n\n\n2.3.8\n\n\n\n\n\nFT_Get_SubGlyph_Info\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_SubGlyph_Info\n( \nFT_GlyphSlot\n  glyph,\n                        \nFT_UInt\n       sub_index,\n                        \nFT_Int\n       *p_index,\n                        \nFT_UInt\n      *p_flags,\n                        \nFT_Int\n       *p_arg1,\n                        \nFT_Int\n       *p_arg2,\n                        \nFT_Matrix\n    *p_transform );\n\n\n\n\n\n\nRetrieve a description of a given subglyph. Only use it if \nglyph->format\n is \nFT_GLYPH_FORMAT_COMPOSITE\n; an error is returned otherwise.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nThe source glyph slot.\n\n\n\n\nsub_index\n\n\nThe index of the subglyph. Must be less than \nglyph->num_subglyphs\n.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\np_index\n\n\nThe glyph index of the subglyph.\n\n\n\n\np_flags\n\n\nThe subglyph flags, see \nFT_SUBGLYPH_FLAG_XXX\n.\n\n\n\n\np_arg1\n\n\nThe subglyph's first argument (if any).\n\n\n\n\np_arg2\n\n\nThe subglyph's second argument (if any).\n\n\n\n\np_transform\n\n\nThe subglyph transformation (if any).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe values of \n*p_arg1\n, \n*p_arg2\n, and \n*p_transform\n must be interpreted depending on the flags returned in \n*p_flags\n. See the OpenType specification for details.\n\n\n\n\n\nFT_Face_Internal\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_Face_InternalRec_*  \nFT_Face_Internal\n;\n\n\n\n\n\n\nAn opaque handle to an \nFT_Face_InternalRec\n structure that models the private data of a given \nFT_Face\n object.\n\n\nThis structure might change between releases of FreeType\u00a02 and is not generally available to client applications.\n\n\n\n\n\nFT_Size_Internal\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_Size_InternalRec_*  \nFT_Size_Internal\n;\n\n\n\n\n\n\nAn opaque handle to an \nFT_Size_InternalRec\n structure, used to model private data of a given \nFT_Size\n object.\n\n\n\n\n\nFT_Slot_Internal\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_Slot_InternalRec_*  \nFT_Slot_Internal\n;\n\n\n\n\n\n\nAn opaque handle to an \nFT_Slot_InternalRec\n structure, used to model private data of a given \nFT_GlyphSlot\n object.\n\n\n\n\n\nFT_FACE_FLAG_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_FACE_FLAG_SCALABLE\n          ( 1L <<  0 )\n#\ndefine\n \nFT_FACE_FLAG_FIXED_SIZES\n       ( 1L <<  1 )\n#\ndefine\n \nFT_FACE_FLAG_FIXED_WIDTH\n       ( 1L <<  2 )\n#\ndefine\n \nFT_FACE_FLAG_SFNT\n              ( 1L <<  3 )\n#\ndefine\n \nFT_FACE_FLAG_HORIZONTAL\n        ( 1L <<  4 )\n#\ndefine\n \nFT_FACE_FLAG_VERTICAL\n          ( 1L <<  5 )\n#\ndefine\n \nFT_FACE_FLAG_KERNING\n           ( 1L <<  6 )\n#\ndefine\n \nFT_FACE_FLAG_FAST_GLYPHS\n       ( 1L <<  7 )\n#\ndefine\n \nFT_FACE_FLAG_MULTIPLE_MASTERS\n  ( 1L <<  8 )\n#\ndefine\n \nFT_FACE_FLAG_GLYPH_NAMES\n       ( 1L <<  9 )\n#\ndefine\n \nFT_FACE_FLAG_EXTERNAL_STREAM\n   ( 1L << 10 )\n#\ndefine\n \nFT_FACE_FLAG_HINTER\n            ( 1L << 11 )\n#\ndefine\n \nFT_FACE_FLAG_CID_KEYED\n         ( 1L << 12 )\n#\ndefine\n \nFT_FACE_FLAG_TRICKY\n            ( 1L << 13 )\n#\ndefine\n \nFT_FACE_FLAG_COLOR\n             ( 1L << 14 )\n#\ndefine\n \nFT_FACE_FLAG_VARIATION\n         ( 1L << 15 )\n\n\n\n\n\n\nA list of bit flags used in the \nface_flags\n field of the \nFT_FaceRec\n structure. They inform client applications of properties of the corresponding face.\n\n\nvalues\n\n\n\n\n\nFT_FACE_FLAG_SCALABLE\n\n\nThe face contains outline glyphs. Note that a face can contain bitmap strikes also, i.e., a face can have both this flag and \nFT_FACE_FLAG_FIXED_SIZES\n set.\n\n\n\n\nFT_FACE_FLAG_FIXED_SIZES\n\n\nThe face contains bitmap strikes. See also the \nnum_fixed_sizes\n and \navailable_sizes\n fields of \nFT_FaceRec\n.\n\n\n\n\nFT_FACE_FLAG_FIXED_WIDTH\n\n\nThe face contains fixed-width characters (like Courier, Lucida, MonoType, etc.).\n\n\n\n\nFT_FACE_FLAG_SFNT\n\n\nThe face uses the SFNT storage scheme. For now, this means TrueType and OpenType.\n\n\n\n\nFT_FACE_FLAG_HORIZONTAL\n\n\nThe face contains horizontal glyph metrics. This should be set for all common formats.\n\n\n\n\nFT_FACE_FLAG_VERTICAL\n\n\nThe face contains vertical glyph metrics. This is only available in some formats, not all of them.\n\n\n\n\nFT_FACE_FLAG_KERNING\n\n\nThe face contains kerning information. If set, the kerning distance can be retrieved using the function \nFT_Get_Kerning\n. Otherwise the function always return the vector (0,0). Note that FreeType doesn't handle kerning data from the SFNT \u2018GPOS\u2019 table (as present in many OpenType fonts).\n\n\n\n\nFT_FACE_FLAG_FAST_GLYPHS\n\n\nTHIS FLAG IS DEPRECATED. DO NOT USE OR TEST IT.\n\n\n\n\nFT_FACE_FLAG_MULTIPLE_MASTERS\n\n\nThe face contains multiple masters and is capable of interpolating between them. Supported formats are Adobe MM, TrueType GX, and OpenType variation fonts.\nSee section \u2018\nMultiple Masters\n\u2019 for API details.\n\n\n\n\nFT_FACE_FLAG_GLYPH_NAMES\n\n\nThe face contains glyph names, which can be retrieved using \nFT_Get_Glyph_Name\n. Note that some TrueType fonts contain broken glyph name tables. Use the function \nFT_Has_PS_Glyph_Names\n when needed.\n\n\n\n\nFT_FACE_FLAG_EXTERNAL_STREAM\n\n\nUsed internally by FreeType to indicate that a face's stream was provided by the client application and should not be destroyed when \nFT_Done_Face\n is called. Don't read or test this flag.\n\n\n\n\nFT_FACE_FLAG_HINTER\n\n\nThe font driver has a hinting machine of its own. For example, with TrueType fonts, it makes sense to use data from the SFNT \u2018gasp\u2019 table only if the native TrueType hinting engine (with the bytecode interpreter) is available and active.\n\n\n\n\nFT_FACE_FLAG_CID_KEYED\n\n\nThe face is CID-keyed. In that case, the face is not accessed by glyph indices but by CID values. For subsetted CID-keyed fonts this has the consequence that not all index values are a valid argument to \nFT_Load_Glyph\n. Only the CID values for which corresponding glyphs in the subsetted font exist make \nFT_Load_Glyph\n return successfully; in all other cases you get an \nFT_Err_Invalid_Argument\n error.\nNote that CID-keyed fonts that are in an SFNT wrapper (this is, all OpenType/CFF fonts) don't have this flag set since the glyphs are accessed in the normal way (using contiguous indices); the \u2018CID-ness\u2019 isn't visible to the application.\n\n\n\n\nFT_FACE_FLAG_TRICKY\n\n\nThe face is \u2018tricky\u2019, this is, it always needs the font format's native hinting engine to get a reasonable result. A typical example is the old Chinese font \nmingli.ttf\n (but not \nmingliu.ttc\n) that uses TrueType bytecode instructions to move and scale all of its subglyphs.\nIt is not possible to auto-hint such fonts using \nFT_LOAD_FORCE_AUTOHINT\n; it will also ignore \nFT_LOAD_NO_HINTING\n. You have to set both \nFT_LOAD_NO_HINTING\n and \nFT_LOAD_NO_AUTOHINT\n to really disable hinting; however, you probably never want this except for demonstration purposes.\nCurrently, there are about a dozen TrueType fonts in the list of tricky fonts; they are hard-coded in file \nttobjs.c\n.\n\n\n\n\nFT_FACE_FLAG_COLOR\n\n\n[Since 2.5.1] The face has color glyph tables. See \nFT_LOAD_COLOR\n for more information.\n\n\n\n\nFT_FACE_FLAG_VARIATION\n\n\n[Since 2.9] Set if the current face (or named instance) has been altered with \nFT_Set_MM_Design_Coordinates\n, \nFT_Set_Var_Design_Coordinates\n, or \nFT_Set_Var_Blend_Coordinates\n. This flag is unset by a call to \nFT_Set_Named_Instance\n.\n\n\n\n\n\n\n\n\n\n\nFT_STYLE_FLAG_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_STYLE_FLAG_ITALIC\n  ( 1 << 0 )\n#\ndefine\n \nFT_STYLE_FLAG_BOLD\n    ( 1 << 1 )\n\n\n\n\n\n\nA list of bit flags to indicate the style of a given face. These are used in the \nstyle_flags\n field of \nFT_FaceRec\n.\n\n\nvalues\n\n\n\n\n\nFT_STYLE_FLAG_ITALIC\n\n\nThe face style is italic or oblique.\n\n\n\n\nFT_STYLE_FLAG_BOLD\n\n\nThe face is bold.\n\n\n\n\n\n\n\nnote\n\n\n\nThe style information as provided by FreeType is very basic. More details are beyond the scope and should be done on a higher level (for example, by analyzing various fields of the \u2018OS/2\u2019 table in SFNT based fonts).\n\n\n\n\n\nFT_OPEN_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_OPEN_MEMORY\n    0x1\n#\ndefine\n \nFT_OPEN_STREAM\n    0x2\n#\ndefine\n \nFT_OPEN_PATHNAME\n  0x4\n#\ndefine\n \nFT_OPEN_DRIVER\n    0x8\n#\ndefine\n \nFT_OPEN_PARAMS\n    0x10\n\n  /* these constants are deprecated; use the corresponding `\nFT_OPEN_XXX\n' */\n  /* values instead                                                      */\n#\ndefine\n ft_open_memory    \nFT_OPEN_MEMORY\n\n#\ndefine\n ft_open_stream    \nFT_OPEN_STREAM\n\n#\ndefine\n ft_open_pathname  \nFT_OPEN_PATHNAME\n\n#\ndefine\n ft_open_driver    \nFT_OPEN_DRIVER\n\n#\ndefine\n ft_open_params    \nFT_OPEN_PARAMS\n\n\n\n\n\n\n\nA list of bit field constants used within the \u2018flags\u2019 field of the \nFT_Open_Args\n structure.\n\n\nvalues\n\n\n\n\n\nFT_OPEN_MEMORY\n\n\nThis is a memory-based stream.\n\n\n\n\nFT_OPEN_STREAM\n\n\nCopy the stream from the \u2018stream\u2019 field.\n\n\n\n\nFT_OPEN_PATHNAME\n\n\nCreate a new input stream from a C\u00a0path name.\n\n\n\n\nFT_OPEN_DRIVER\n\n\nUse the \u2018driver\u2019 field.\n\n\n\n\nFT_OPEN_PARAMS\n\n\nUse the \nnum_params\n and \u2018params\u2019 fields.\n\n\n\n\n\n\n\nnote\n\n\n\nThe \nFT_OPEN_MEMORY\n, \nFT_OPEN_STREAM\n, and \nFT_OPEN_PATHNAME\n flags are mutually exclusive.\n\n\n\n\n\nFT_LOAD_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_LOAD_DEFAULT\n                      0x0\n#\ndefine\n \nFT_LOAD_NO_SCALE\n                     ( 1L << 0 )\n#\ndefine\n \nFT_LOAD_NO_HINTING\n                   ( 1L << 1 )\n#\ndefine\n \nFT_LOAD_RENDER\n                       ( 1L << 2 )\n#\ndefine\n \nFT_LOAD_NO_BITMAP\n                    ( 1L << 3 )\n#\ndefine\n \nFT_LOAD_VERTICAL_LAYOUT\n              ( 1L << 4 )\n#\ndefine\n \nFT_LOAD_FORCE_AUTOHINT\n               ( 1L << 5 )\n#\ndefine\n \nFT_LOAD_CROP_BITMAP\n                  ( 1L << 6 )\n#\ndefine\n \nFT_LOAD_PEDANTIC\n                     ( 1L << 7 )\n#\ndefine\n \nFT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH\n  ( 1L << 9 )\n#\ndefine\n \nFT_LOAD_NO_RECURSE\n                   ( 1L << 10 )\n#\ndefine\n \nFT_LOAD_IGNORE_TRANSFORM\n             ( 1L << 11 )\n#\ndefine\n \nFT_LOAD_MONOCHROME\n                   ( 1L << 12 )\n#\ndefine\n \nFT_LOAD_LINEAR_DESIGN\n                ( 1L << 13 )\n#\ndefine\n \nFT_LOAD_NO_AUTOHINT\n                  ( 1L << 15 )\n  /* Bits 16-19 are used by `FT_LOAD_TARGET_' */\n#\ndefine\n \nFT_LOAD_COLOR\n                        ( 1L << 20 )\n#\ndefine\n \nFT_LOAD_COMPUTE_METRICS\n              ( 1L << 21 )\n#\ndefine\n \nFT_LOAD_BITMAP_METRICS_ONLY\n          ( 1L << 22 )\n\n\n\n\n\n\nA list of bit field constants for \nFT_Load_Glyph\n to indicate what kind of operations to perform during glyph loading.\n\n\nvalues\n\n\n\n\n\nFT_LOAD_DEFAULT\n\n\nCorresponding to\u00a00, this value is used as the default glyph load operation. In this case, the following happens:\n\n\n\n\nFreeType looks for a bitmap for the glyph corresponding to the face's current size. If one is found, the function returns. The bitmap data can be accessed from the glyph slot (see note below).\n\n\nIf no embedded bitmap is searched for or found, FreeType looks for a scalable outline. If one is found, it is loaded from the font file, scaled to device pixels, then \u2018hinted\u2019 to the pixel grid in order to optimize it. The outline data can be accessed from the glyph slot (see note below).\nNote that by default the glyph loader doesn't render outlines into bitmaps. The following flags are used to modify this default behaviour to more specific and useful cases.\n\n\n\n\n\n\nFT_LOAD_NO_SCALE\n\n\nDon't scale the loaded outline glyph but keep it in font units.\nThis flag implies \nFT_LOAD_NO_HINTING\n and \nFT_LOAD_NO_BITMAP\n, and unsets \nFT_LOAD_RENDER\n.\nIf the font is \u2018tricky\u2019 (see \nFT_FACE_FLAG_TRICKY\n for more), using FT_LOAD_NO_SCALE usually yields meaningless outlines because the subglyphs must be scaled and positioned with hinting instructions. This can be solved by loading the font without FT_LOAD_NO_SCALE and setting the character size to \nfont->units_per_EM\n.\n\n\n\n\nFT_LOAD_NO_HINTING\n\n\nDisable hinting. This generally generates \u2018blurrier\u2019 bitmap glyphs when the glyph are rendered in any of the anti-aliased modes. See also the note below.\nThis flag is implied by \nFT_LOAD_NO_SCALE\n.\n\n\n\n\nFT_LOAD_RENDER\n\n\nCall \nFT_Render_Glyph\n after the glyph is loaded. By default, the glyph is rendered in \nFT_RENDER_MODE_NORMAL\n mode. This can be overridden by \nFT_LOAD_TARGET_XXX\n or \nFT_LOAD_MONOCHROME\n.\nThis flag is unset by \nFT_LOAD_NO_SCALE\n.\n\n\n\n\nFT_LOAD_NO_BITMAP\n\n\nIgnore bitmap strikes when loading. Bitmap-only fonts ignore this flag.\n\nFT_LOAD_NO_SCALE\n always sets this flag.\n\n\n\n\nFT_LOAD_VERTICAL_LAYOUT\n\n\nLoad the glyph for vertical text layout. In particular, the \u2018advance\u2019 value in the \nFT_GlyphSlotRec\n structure is set to the \nvertAdvance\n value of the \u2018metrics\u2019 field.\nIn case \nFT_HAS_VERTICAL\n doesn't return true, you shouldn't use this flag currently. Reason is that in this case vertical metrics get synthesized, and those values are not always consistent across various font formats.\n\n\n\n\nFT_LOAD_FORCE_AUTOHINT\n\n\nPrefer the auto-hinter over the font's native hinter. See also the note below.\n\n\n\n\nFT_LOAD_PEDANTIC\n\n\nMake the font driver perform pedantic verifications during glyph loading. This is mostly used to detect broken glyphs in fonts. By default, FreeType tries to handle broken fonts also.\nIn particular, errors from the TrueType bytecode engine are not passed to the application if this flag is not set; this might result in partially hinted or distorted glyphs in case a glyph's bytecode is buggy.\n\n\n\n\nFT_LOAD_NO_RECURSE\n\n\nDon't load composite glyphs recursively. Instead, the font driver should set the \nnum_subglyph\n and \u2018subglyphs\u2019 values of the glyph slot accordingly, and set \nglyph->format\n to \nFT_GLYPH_FORMAT_COMPOSITE\n. The description of subglyphs can then be accessed with \nFT_Get_SubGlyph_Info\n.\nThis flag implies \nFT_LOAD_NO_SCALE\n and \nFT_LOAD_IGNORE_TRANSFORM\n.\n\n\n\n\nFT_LOAD_IGNORE_TRANSFORM\n\n\nIgnore the transform matrix set by \nFT_Set_Transform\n.\n\n\n\n\nFT_LOAD_MONOCHROME\n\n\nThis flag is used with \nFT_LOAD_RENDER\n to indicate that you want to render an outline glyph to a 1-bit monochrome bitmap glyph, with 8\u00a0pixels packed into each byte of the bitmap data.\nNote that this has no effect on the hinting algorithm used. You should rather use \nFT_LOAD_TARGET_MONO\n so that the monochrome-optimized hinting algorithm is used.\n\n\n\n\nFT_LOAD_LINEAR_DESIGN\n\n\nKeep \nlinearHoriAdvance\n and \nlinearVertAdvance\n fields of \nFT_GlyphSlotRec\n in font units. See \nFT_GlyphSlotRec\n for details.\n\n\n\n\nFT_LOAD_NO_AUTOHINT\n\n\nDisable the auto-hinter. See also the note below.\n\n\n\n\nFT_LOAD_COLOR\n\n\nLoad colored glyphs. There are slight differences depending on the font format.\n[Since 2.5] Load embedded color bitmap images. The resulting color bitmaps, if available, will have the \nFT_PIXEL_MODE_BGRA\n format, with pre-multiplied color channels. If the flag is not set and color bitmaps are found, they are converted to 256-level gray bitmaps, using the \nFT_PIXEL_MODE_GRAY\n format.\n[Since 2.10] If the glyph index contains an entry in the face's \u2018COLR\u2019 table with a \u2018CPAL\u2019 palette table (as defined in the OpenType specification), make \nFT_Render_Glyph\n provide a default blending of the color glyph layers associated with the glyph index, using the same bitmap format as embedded color bitmap images. This is mainly for convenience; for full control of color layers use \nFT_Get_Color_Glyph_Layer\n and FreeType's color functions like \nFT_Palette_Select\n instead of setting FT_LOAD_COLOR for rendering so that the client application can handle blending by itself.\n\n\n\n\nFT_LOAD_COMPUTE_METRICS\n\n\n[Since 2.6.1] Compute glyph metrics from the glyph data, without the use of bundled metrics tables (for example, the \u2018hdmx\u2019 table in TrueType fonts). This flag is mainly used by font validating or font editing applications, which need to ignore, verify, or edit those tables.\nCurrently, this flag is only implemented for TrueType fonts.\n\n\n\n\nFT_LOAD_BITMAP_METRICS_ONLY\n\n\n[Since 2.7.1] Request loading of the metrics and bitmap image information of a (possibly embedded) bitmap glyph without allocating or copying the bitmap image data itself. No effect if the target glyph is not a bitmap image.\nThis flag unsets \nFT_LOAD_RENDER\n.\n\n\n\n\nFT_LOAD_CROP_BITMAP\n\n\nIgnored. Deprecated.\n\n\n\n\nFT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH\n\n\nIgnored. Deprecated.\n\n\n\n\n\n\n\nnote\n\n\n\nBy default, hinting is enabled and the font's native hinter (see \nFT_FACE_FLAG_HINTER\n) is preferred over the auto-hinter. You can disable hinting by setting \nFT_LOAD_NO_HINTING\n or change the precedence by setting \nFT_LOAD_FORCE_AUTOHINT\n. You can also set \nFT_LOAD_NO_AUTOHINT\n in case you don't want the auto-hinter to be used at all.\n\n\nSee the description of \nFT_FACE_FLAG_TRICKY\n for a special exception (affecting only a handful of Asian fonts).\n\n\nBesides deciding which hinter to use, you can also decide which hinting algorithm to use. See \nFT_LOAD_TARGET_XXX\n for details.\n\n\nNote that the auto-hinter needs a valid Unicode cmap (either a native one or synthesized by FreeType) for producing correct results. If a font provides an incorrect mapping (for example, assigning the character code U+005A, LATIN CAPITAL LETTER Z, to a glyph depicting a mathematical integral sign), the auto-hinter might produce useless results.\n\n\n\n\n\nFT_LOAD_TARGET_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n FT_LOAD_TARGET_( x )   ( (\nFT_Int32\n)( (x) & 15 ) << 16 )\n\n#\ndefine\n \nFT_LOAD_TARGET_NORMAL\n  FT_LOAD_TARGET_( \nFT_RENDER_MODE_NORMAL\n )\n#\ndefine\n \nFT_LOAD_TARGET_LIGHT\n   FT_LOAD_TARGET_( \nFT_RENDER_MODE_LIGHT\n  )\n#\ndefine\n \nFT_LOAD_TARGET_MONO\n    FT_LOAD_TARGET_( \nFT_RENDER_MODE_MONO\n   )\n#\ndefine\n \nFT_LOAD_TARGET_LCD\n     FT_LOAD_TARGET_( \nFT_RENDER_MODE_LCD\n    )\n#\ndefine\n \nFT_LOAD_TARGET_LCD_V\n   FT_LOAD_TARGET_( \nFT_RENDER_MODE_LCD_V\n  )\n\n\n\n\n\n\nA list of values to select a specific hinting algorithm for the hinter. You should OR one of these values to your \nload_flags\n when calling \nFT_Load_Glyph\n.\n\n\nNote that a font's native hinters may ignore the hinting algorithm you have specified (e.g., the TrueType bytecode interpreter). You can set \nFT_LOAD_FORCE_AUTOHINT\n to ensure that the auto-hinter is used.\n\n\nvalues\n\n\n\n\n\nFT_LOAD_TARGET_NORMAL\n\n\nThe default hinting algorithm, optimized for standard gray-level rendering. For monochrome output, use \nFT_LOAD_TARGET_MONO\n instead.\n\n\n\n\nFT_LOAD_TARGET_LIGHT\n\n\nA lighter hinting algorithm for gray-level modes. Many generated glyphs are fuzzier but better resemble their original shape. This is achieved by snapping glyphs to the pixel grid only vertically (Y-axis), as is done by FreeType's new CFF engine or Microsoft's ClearType font renderer. This preserves inter-glyph spacing in horizontal text. The snapping is done either by the native font driver, if the driver itself and the font support it, or by the auto-hinter.\nAdvance widths are rounded to integer values; however, using the \nlsb_delta\n and \nrsb_delta\n fields of \nFT_GlyphSlotRec\n, it is possible to get fractional advance widths for subpixel positioning (which is recommended to use).\nIf configuration option AF_CONFIG_OPTION_TT_SIZE_METRICS is active, TrueType-like metrics are used to make this mode behave similarly as in unpatched FreeType versions between 2.4.6 and 2.7.1 (inclusive).\n\n\n\n\nFT_LOAD_TARGET_MONO\n\n\nStrong hinting algorithm that should only be used for monochrome output. The result is probably unpleasant if the glyph is rendered in non-monochrome modes.\n\n\n\n\nFT_LOAD_TARGET_LCD\n\n\nA variant of \nFT_LOAD_TARGET_LIGHT\n optimized for horizontally decimated LCD displays.\n\n\n\n\nFT_LOAD_TARGET_LCD_V\n\n\nA variant of \nFT_LOAD_TARGET_NORMAL\n optimized for vertically decimated LCD displays.\n\n\n\n\n\n\n\nnote\n\n\n\nYou should use only \none\n of the FT_LOAD_TARGET_XXX values in your \nload_flags\n. They can't be ORed.\n\n\nIf \nFT_LOAD_RENDER\n is also set, the glyph is rendered in the corresponding mode (i.e., the mode that matches the used algorithm best). An exception is FT_LOAD_TARGET_MONO since it implies \nFT_LOAD_MONOCHROME\n.\n\n\nYou can use a hinting algorithm that doesn't correspond to the same rendering mode. As an example, it is possible to use the \u2018light\u2019 hinting algorithm and have the results rendered in horizontal LCD pixel mode, with code like\n\n  FT_Load_Glyph( face, glyph_index,\n                 load_flags | FT_LOAD_TARGET_LIGHT );\n\n  FT_Render_Glyph( face->glyph, FT_RENDER_MODE_LCD );\n\n\n\nIn general, you should stick with one rendering mode. For example, switching between \nFT_LOAD_TARGET_NORMAL\n and \nFT_LOAD_TARGET_MONO\n enforces a lot of recomputation for TrueType fonts, which is slow. Another reason is caching: Selecting a different mode usually causes changes in both the outlines and the rasterized bitmaps; it is thus necessary to empty the cache after a mode switch to avoid false hits.\n\n\n\n\n\nFT_SUBGLYPH_FLAG_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_SUBGLYPH_FLAG_ARGS_ARE_WORDS\n          1\n#\ndefine\n \nFT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES\n      2\n#\ndefine\n \nFT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID\n        4\n#\ndefine\n \nFT_SUBGLYPH_FLAG_SCALE\n                   8\n#\ndefine\n \nFT_SUBGLYPH_FLAG_XY_SCALE\n             0x40\n#\ndefine\n \nFT_SUBGLYPH_FLAG_2X2\n                  0x80\n#\ndefine\n \nFT_SUBGLYPH_FLAG_USE_MY_METRICS\n      0x200\n\n\n\n\n\n\nA list of constants describing subglyphs. Please refer to the \u2018glyf\u2019 table description in the OpenType specification for the meaning of the various flags (which get synthesized for non-OpenType subglyphs).\n\n\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/glyf#composite-glyph-description\n\n\nvalues\n\n\n\n\n\nFT_SUBGLYPH_FLAG_ARGS_ARE_WORDS\n\n\n\n\n\nFT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES\n\n\n\n\n\nFT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID\n\n\n\n\n\nFT_SUBGLYPH_FLAG_SCALE\n\n\n\n\n\nFT_SUBGLYPH_FLAG_XY_SCALE\n\n\n\n\n\nFT_SUBGLYPH_FLAG_2X2\n\n\n\n\n\nFT_SUBGLYPH_FLAG_USE_MY_METRICS\n\n\n\n\n\n\n\n\n\n\n\nFT_FSTYPE_XXX\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_FSTYPE_INSTALLABLE_EMBEDDING\n         0x0000\n#\ndefine\n \nFT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING\n  0x0002\n#\ndefine\n \nFT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING\n   0x0004\n#\ndefine\n \nFT_FSTYPE_EDITABLE_EMBEDDING\n            0x0008\n#\ndefine\n \nFT_FSTYPE_NO_SUBSETTING\n                 0x0100\n#\ndefine\n \nFT_FSTYPE_BITMAP_EMBEDDING_ONLY\n         0x0200\n\n\n\n\n\n\nA list of bit flags used in the \nfsType\n field of the OS/2 table in a TrueType or OpenType font and the \u2018FSType\u2019 entry in a PostScript font. These bit flags are returned by \nFT_Get_FSType_Flags\n; they inform client applications of embedding and subsetting restrictions associated with a font.\n\n\nSee \nhttps://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf\n for more details.\n\n\nvalues\n\n\n\n\n\nFT_FSTYPE_INSTALLABLE_EMBEDDING\n\n\nFonts with no fsType bit set may be embedded and permanently installed on the remote system by an application.\n\n\n\n\nFT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING\n\n\nFonts that have only this bit set must not be modified, embedded or exchanged in any manner without first obtaining permission of the font software copyright owner.\n\n\n\n\nFT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING\n\n\nThe font may be embedded and temporarily loaded on the remote system. Documents containing Preview & Print fonts must be opened \u2018read-only\u2019; no edits can be applied to the document.\n\n\n\n\nFT_FSTYPE_EDITABLE_EMBEDDING\n\n\nThe font may be embedded but must only be installed temporarily on other systems. In contrast to Preview & Print fonts, documents containing editable fonts may be opened for reading, editing is permitted, and changes may be saved.\n\n\n\n\nFT_FSTYPE_NO_SUBSETTING\n\n\nThe font may not be subsetted prior to embedding.\n\n\n\n\nFT_FSTYPE_BITMAP_EMBEDDING_ONLY\n\n\nOnly bitmaps contained in the font may be embedded; no outline data may be embedded. If there are no bitmaps available in the font, then the font is unembeddable.\n\n\n\n\n\n\n\nnote\n\n\n\nThe flags are ORed together, thus more than a single value can be returned.\n\n\nWhile the \nfsType\n flags can indicate that a font may be embedded, a license with the font vendor may be separately required to use the font in this way.\n\n\n\n\n\nFT_HAS_FAST_GLYPHS\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n#\ndefine\n \nFT_HAS_FAST_GLYPHS\n( face )  0\n\n\n\n\n\n\nDeprecated.",
            "title": "Base Interface"
        },
        {
            "location": "/ft2-base_interface/index.html#base-interface",
            "text": "",
            "title": "Base Interface"
        },
        {
            "location": "/ft2-base_interface/index.html#synopsis",
            "text": "This section describes the most important public high-level API functions of FreeType\u00a02.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_library",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_LibraryRec_  * FT_Library ;   A handle to a FreeType library instance. Each \u2018library\u2019 is completely independent from the others; it is the \u2018root\u2019 of a set of objects like fonts, faces, sizes, etc.  It also embeds a memory manager (see  FT_Memory ), as well as a scan-line converter object (see  FT_Raster ).  In multi-threaded applications it is easiest to use one  FT_Library  object per thread. In case this is too cumbersome, a single  FT_Library  object across threads is possible also (since FreeType version 2.5.6), as long as a mutex lock is used around  FT_New_Face  and  FT_Done_Face .",
            "title": "FT_Library"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_FaceRec_*   FT_Face ;   A handle to a typographic face object. A face object models a given typeface, in a given style.",
            "title": "FT_Face"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_SizeRec_*   FT_Size ;   A handle to an object that models a face scaled to a given character size.",
            "title": "FT_Size"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_glyphslot",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_GlyphSlotRec_*   FT_GlyphSlot ;   A handle to a given \u2018glyph slot\u2019. A slot is a container that can hold any of the glyphs contained in its parent face.  In other words, each time you call  FT_Load_Glyph  or  FT_Load_Char , the slot's content is erased by the new glyph data, i.e., the glyph's metrics, its image (bitmap or outline), and other control information.",
            "title": "FT_GlyphSlot"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_charmap",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_CharMapRec_*   FT_CharMap ;   A handle to a character map (usually abbreviated to \u2018charmap\u2019). A charmap is used to translate character codes in a given encoding into glyph indexes for its parent's face. Some font formats may provide several charmaps per font.  Each face object owns zero or more charmaps, but only one of them can be \u2018active\u2019, providing the data used by  FT_Get_Char_Index  or  FT_Load_Char .  The list of available charmaps in a face is available through the  face->num_charmaps  and  face->charmaps  fields of  FT_FaceRec .  The currently active charmap is available as  face->charmap . You should call  FT_Set_Charmap  to change it.",
            "title": "FT_CharMap"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_encoding",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   enum   FT_Encoding_\n  {\n     FT_ENC_TAG (  FT_ENCODING_NONE , 0, 0, 0, 0 ),\n\n     FT_ENC_TAG (  FT_ENCODING_MS_SYMBOL , 's', 'y', 'm', 'b' ),\n     FT_ENC_TAG (  FT_ENCODING_UNICODE ,   'u', 'n', 'i', 'c' ),\n\n     FT_ENC_TAG (  FT_ENCODING_SJIS ,    's', 'j', 'i', 's' ),\n     FT_ENC_TAG (  FT_ENCODING_PRC ,     'g', 'b', ' ', ' ' ),\n     FT_ENC_TAG (  FT_ENCODING_BIG5 ,    'b', 'i', 'g', '5' ),\n     FT_ENC_TAG (  FT_ENCODING_WANSUNG , 'w', 'a', 'n', 's' ),\n     FT_ENC_TAG (  FT_ENCODING_JOHAB ,   'j', 'o', 'h', 'a' ),\n\n    /* for backward compatibility */\n    FT_ENCODING_GB2312     =  FT_ENCODING_PRC ,\n     FT_ENCODING_MS_SJIS     =  FT_ENCODING_SJIS ,\n     FT_ENCODING_MS_GB2312   =  FT_ENCODING_PRC ,\n     FT_ENCODING_MS_BIG5     =  FT_ENCODING_BIG5 ,\n     FT_ENCODING_MS_WANSUNG  =  FT_ENCODING_WANSUNG ,\n     FT_ENCODING_MS_JOHAB    =  FT_ENCODING_JOHAB ,\n\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_STANDARD , 'A', 'D', 'O', 'B' ),\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_EXPERT ,   'A', 'D', 'B', 'E' ),\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_CUSTOM ,   'A', 'D', 'B', 'C' ),\n     FT_ENC_TAG (  FT_ENCODING_ADOBE_LATIN_1 ,  'l', 'a', 't', '1' ),\n\n     FT_ENC_TAG (  FT_ENCODING_OLD_LATIN_2 , 'l', 'a', 't', '2' ),\n\n     FT_ENC_TAG (  FT_ENCODING_APPLE_ROMAN , 'a', 'r', 'm', 'n' )\n\n  }  FT_Encoding ;\n\n\n  /* these constants are deprecated; use the corresponding ` FT_Encoding ' */\n  /* values instead                                                      */\n# define  ft_encoding_none             FT_ENCODING_NONE \n# define  ft_encoding_unicode          FT_ENCODING_UNICODE \n# define  ft_encoding_symbol           FT_ENCODING_MS_SYMBOL \n# define  ft_encoding_latin_1          FT_ENCODING_ADOBE_LATIN_1 \n# define  ft_encoding_latin_2          FT_ENCODING_OLD_LATIN_2 \n# define  ft_encoding_sjis             FT_ENCODING_SJIS \n# define  ft_encoding_gb2312           FT_ENCODING_PRC \n# define  ft_encoding_big5             FT_ENCODING_BIG5 \n# define  ft_encoding_wansung          FT_ENCODING_WANSUNG \n# define  ft_encoding_johab            FT_ENCODING_JOHAB \n\n# define  ft_encoding_adobe_standard   FT_ENCODING_ADOBE_STANDARD \n# define  ft_encoding_adobe_expert     FT_ENCODING_ADOBE_EXPERT \n# define  ft_encoding_adobe_custom     FT_ENCODING_ADOBE_CUSTOM \n# define  ft_encoding_apple_roman      FT_ENCODING_APPLE_ROMAN    An enumeration to specify character sets supported by charmaps. Used in the  FT_Select_Charmap  API function.",
            "title": "FT_Encoding"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_enc_tag",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# ifndef   FT_ENC_TAG \n# define   FT_ENC_TAG ( value, a, b, c, d )         \\\n          value = ( ( ( FT_UInt32 )(a) << 24 ) |  \\\n                    ( ( FT_UInt32 )(b) << 16 ) |  \\\n                    ( ( FT_UInt32 )(c) <<  8 ) |  \\\n                      ( FT_UInt32 )(d)         )\n\n# endif  /*  FT_ENC_TAG  */   This macro converts four-letter tags into an unsigned long. It is used to define \u2018encoding\u2019 identifiers (see  FT_Encoding ).",
            "title": "FT_ENC_TAG"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_facerec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_FaceRec_\n  {\n     FT_Long            num_faces;\n     FT_Long            face_index;\n\n     FT_Long            face_flags;\n     FT_Long            style_flags;\n\n     FT_Long            num_glyphs;\n\n     FT_String *        family_name;\n     FT_String *        style_name;\n\n     FT_Int             num_fixed_sizes;\n     FT_Bitmap_Size *   available_sizes;\n\n     FT_Int             num_charmaps;\n     FT_CharMap *       charmaps;\n\n     FT_Generic         generic;\n\n    /*# The following member variables (down to `underline_thickness') */\n    /*# are only relevant to scalable outlines; cf. @ FT_Bitmap_Size     */\n    /*# for bitmap fonts.                                              */\n     FT_BBox            bbox;\n\n     FT_UShort          units_per_EM;\n     FT_Short           ascender;\n     FT_Short           descender;\n     FT_Short           height;\n\n     FT_Short           max_advance_width;\n     FT_Short           max_advance_height;\n\n     FT_Short           underline_position;\n     FT_Short           underline_thickness;\n\n     FT_GlyphSlot       glyph;\n     FT_Size            size;\n     FT_CharMap         charmap;\n\n    /*@private begin */\n\n     FT_Driver          driver;\n     FT_Memory          memory;\n     FT_Stream          stream;\n\n     FT_ListRec         sizes_list;\n\n     FT_Generic         autohint;   /* face-specific auto-hinter data */\n     void *             extensions; /* unused                         */\n\n     FT_Face_Internal   internal;\n\n    /*@private end */\n\n  }  FT_FaceRec ;   FreeType root face class structure. A face object models a typeface in a font file.",
            "title": "FT_FaceRec"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_horizontal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_HORIZONTAL ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_HORIZONTAL  )   A macro that returns true whenever a face object contains horizontal metrics (this is true for all font formats though).",
            "title": "FT_HAS_HORIZONTAL"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_vertical",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_VERTICAL ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_VERTICAL  )   A macro that returns true whenever a face object contains real vertical metrics (and not only synthesized ones).",
            "title": "FT_HAS_VERTICAL"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_kerning",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_KERNING ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_KERNING  )   A macro that returns true whenever a face object contains kerning data that can be accessed with  FT_Get_Kerning .",
            "title": "FT_HAS_KERNING"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_fixed_sizes",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_FIXED_SIZES ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_FIXED_SIZES  )   A macro that returns true whenever a face object contains some embedded bitmaps. See the  available_sizes  field of the  FT_FaceRec  structure.",
            "title": "FT_HAS_FIXED_SIZES"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_glyph_names",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_GLYPH_NAMES ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_GLYPH_NAMES  )   A macro that returns true whenever a face object contains some glyph names that can be accessed through  FT_Get_Glyph_Name .",
            "title": "FT_HAS_GLYPH_NAMES"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_color",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_COLOR ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_COLOR  )   A macro that returns true whenever a face object contains tables for color glyphs.",
            "title": "FT_HAS_COLOR"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_multiple_masters",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_MULTIPLE_MASTERS ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_MULTIPLE_MASTERS  )   A macro that returns true whenever a face object contains some multiple masters. The functions provided by  FT_MULTIPLE_MASTERS_H  are then available to choose the exact design you want.",
            "title": "FT_HAS_MULTIPLE_MASTERS"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_sfnt",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_SFNT ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_SFNT  )   A macro that returns true whenever a face object contains a font whose format is based on the SFNT storage scheme. This usually means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded bitmap fonts.  If this macro is true, all functions defined in  FT_SFNT_NAMES_H  and  FT_TRUETYPE_TABLES_H  are available.",
            "title": "FT_IS_SFNT"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_scalable",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_SCALABLE ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_SCALABLE  )   A macro that returns true whenever a face object contains a scalable font face (true for TrueType, Type\u00a01, Type\u00a042, CID, OpenType/CFF, and PFR font formats).",
            "title": "FT_IS_SCALABLE"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_fixed_width",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_FIXED_WIDTH ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_FIXED_WIDTH  )   A macro that returns true whenever a face object contains a font face that contains fixed-width (or \u2018monospace\u2019, \u2018fixed-pitch\u2019, etc.) glyphs.",
            "title": "FT_IS_FIXED_WIDTH"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_cid_keyed",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_CID_KEYED ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_CID_KEYED  )   A macro that returns true whenever a face object contains a CID-keyed font. See the discussion of  FT_FACE_FLAG_CID_KEYED  for more details.  If this macro is true, all functions defined in  FT_CID_H  are available.",
            "title": "FT_IS_CID_KEYED"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_tricky",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_TRICKY ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_TRICKY  )   A macro that returns true whenever a face represents a \u2018tricky\u2019 font. See the discussion of  FT_FACE_FLAG_TRICKY  for more details.",
            "title": "FT_IS_TRICKY"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_named_instance",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_NAMED_INSTANCE ( face ) \\\n          ( (face)->face_index & 0x7FFF0000L )   A macro that returns true whenever a face object is a named instance of a GX or OpenType variation font.  [Since 2.9] Changing the design coordinates with  FT_Set_Var_Design_Coordinates  or  FT_Set_Var_Blend_Coordinates  does not influence the return value of this macro (only  FT_Set_Named_Instance  does that).",
            "title": "FT_IS_NAMED_INSTANCE"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_is_variation",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_IS_VARIATION ( face ) \\\n          ( (face)->face_flags &  FT_FACE_FLAG_VARIATION  )   A macro that returns true whenever a face object has been altered by  FT_Set_MM_Design_Coordinates ,  FT_Set_Var_Design_Coordinates , or  FT_Set_Var_Blend_Coordinates .",
            "title": "FT_IS_VARIATION"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_sizerec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_SizeRec_\n  {\n     FT_Face            face;      /* parent face object              */\n     FT_Generic         generic;   /* generic pointer for client uses */\n     FT_Size_Metrics    metrics;   /* size metrics                    */\n     FT_Size_Internal   internal;\n\n  }  FT_SizeRec ;   FreeType root size class structure. A size object models a face object at a given size.",
            "title": "FT_SizeRec"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_size_metrics",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_Size_Metrics_\n  {\n     FT_UShort   x_ppem;      /* horizontal pixels per EM               */\n     FT_UShort   y_ppem;      /* vertical pixels per EM                 */\n\n     FT_Fixed    x_scale;     /* scaling values used to convert font    */\n     FT_Fixed    y_scale;     /* units to 26.6 fractional pixels        */\n\n     FT_Pos      ascender;    /* ascender in 26.6 frac. pixels          */\n     FT_Pos      descender;   /* descender in 26.6 frac. pixels         */\n     FT_Pos      height;      /* text height in 26.6 frac. pixels       */\n     FT_Pos      max_advance; /* max horizontal advance, in 26.6 pixels */\n\n  }  FT_Size_Metrics ;   The size metrics structure gives the metrics of a size object.",
            "title": "FT_Size_Metrics"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_glyphslotrec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_GlyphSlotRec_\n  {\n     FT_Library         library;\n     FT_Face            face;\n     FT_GlyphSlot       next;\n     FT_UInt            glyph_index; /* new in 2.10; was reserved previously */\n     FT_Generic         generic;\n\n     FT_Glyph_Metrics   metrics;\n     FT_Fixed           linearHoriAdvance;\n     FT_Fixed           linearVertAdvance;\n     FT_Vector          advance;\n\n     FT_Glyph_Format    format;\n\n     FT_Bitmap          bitmap;\n     FT_Int             bitmap_left;\n     FT_Int             bitmap_top;\n\n     FT_Outline         outline;\n\n     FT_UInt            num_subglyphs;\n     FT_SubGlyph        subglyphs;\n\n     void *             control_data;\n     long               control_len;\n\n     FT_Pos             lsb_delta;\n     FT_Pos             rsb_delta;\n\n     void *             other;\n\n     FT_Slot_Internal   internal;\n\n  }  FT_GlyphSlotRec ;   FreeType root glyph slot class structure. A glyph slot is a container where individual glyphs can be loaded, be they in outline or bitmap format.",
            "title": "FT_GlyphSlotRec"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_glyph_metrics",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_Glyph_Metrics_\n  {\n     FT_Pos   width;\n     FT_Pos   height;\n\n     FT_Pos   horiBearingX;\n     FT_Pos   horiBearingY;\n     FT_Pos   horiAdvance;\n\n     FT_Pos   vertBearingX;\n     FT_Pos   vertBearingY;\n     FT_Pos   vertAdvance;\n\n  }  FT_Glyph_Metrics ;   A structure to model the metrics of a single glyph. The values are expressed in 26.6 fractional pixel format; if the flag  FT_LOAD_NO_SCALE  has been used while loading the glyph, values are expressed in font units instead.",
            "title": "FT_Glyph_Metrics"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_subglyph",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_SubGlyphRec_*   FT_SubGlyph ;   The subglyph structure is an internal object used to describe subglyphs (for example, in the case of composites).",
            "title": "FT_SubGlyph"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_bitmap_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_Bitmap_Size_\n  {\n     FT_Short   height;\n     FT_Short   width;\n\n     FT_Pos     size;\n\n     FT_Pos     x_ppem;\n     FT_Pos     y_ppem;\n\n  }  FT_Bitmap_Size ;   This structure models the metrics of a bitmap strike (i.e., a set of glyphs for a given point size and resolution) in a bitmap font. It is used for the  available_sizes  field of  FT_Face .",
            "title": "FT_Bitmap_Size"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_init_freetype",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Init_FreeType (  FT_Library   *alibrary );   Initialize a new FreeType library object. The set of modules that are registered by this function is determined at build time.",
            "title": "FT_Init_FreeType"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_done_freetype",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Done_FreeType (  FT_Library   library );   Destroy a given FreeType library object and all of its children, including resources, drivers, faces, sizes, etc.",
            "title": "FT_Done_FreeType"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_new_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face (  FT_Library    library,\n                const   char *  filepathname,\n                FT_Long       face_index,\n                FT_Face      *aface );   Call  FT_Open_Face  to open a font by its pathname.",
            "title": "FT_New_Face"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_done_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Done_Face (  FT_Face   face );   Discard a given face object, as well as all of its child slots and sizes.",
            "title": "FT_Done_Face"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_reference_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Reference_Face (  FT_Face   face );   A counter gets initialized to\u00a01 at the time an  FT_Face  structure is created. This function increments the counter.  FT_Done_Face  then only destroys a face if the counter is\u00a01, otherwise it simply decrements the counter.  This function helps in managing life-cycles of structures that reference  FT_Face  objects.",
            "title": "FT_Reference_Face"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_new_memory_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Memory_Face (  FT_Library       library,\n                       const   FT_Byte *  file_base,\n                       FT_Long          file_size,\n                       FT_Long          face_index,\n                       FT_Face         *aface );   Call  FT_Open_Face  to open a font that has been loaded into memory.",
            "title": "FT_New_Memory_Face"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_face_properties",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Face_Properties (  FT_Face         face,\n                       FT_UInt         num_properties,\n                       FT_Parameter *  properties );   Set or override certain (library or module-wide) properties on a face-by-face basis. Useful for finer-grained control and avoiding locks on shared structures (threads can modify their own faces as they see fit).  Contrary to  FT_Property_Set , this function uses  FT_Parameter  so that you can pass multiple properties to the target face in one call. Note that only a subset of the available properties can be controlled.    FT_PARAM_TAG_STEM_DARKENING  (stem darkening, corresponding to the property \u2018no-stem-darkening\u2019 provided by the \u2018autofit\u2019, \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see  no-stem-darkening ).    FT_PARAM_TAG_LCD_FILTER_WEIGHTS  (LCD filter weights, corresponding to function  FT_Library_SetLcdFilterWeights ).    FT_PARAM_TAG_RANDOM_SEED  (seed value for the CFF, Type\u00a01, and CID \u2018random\u2019 operator, corresponding to the \u2018random-seed\u2019 property provided by the \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see  random-seed ).    Pass NULL as \u2018data\u2019 in  FT_Parameter  for a given tag to reset the option and use the library or module default again.",
            "title": "FT_Face_Properties"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_open_face",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Open_Face (  FT_Library            library,\n                 const   FT_Open_Args *  args,\n                 FT_Long               face_index,\n                 FT_Face              *aface );   Create a face object from a given resource described by  FT_Open_Args .",
            "title": "FT_Open_Face"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_open_args",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_Open_Args_\n  {\n     FT_UInt          flags;\n     const   FT_Byte *  memory_base;\n     FT_Long          memory_size;\n     FT_String *      pathname;\n     FT_Stream        stream;\n     FT_Module        driver;\n     FT_Int           num_params;\n     FT_Parameter *   params;\n\n  }  FT_Open_Args ;   A structure to indicate how to open a new font file or stream. A pointer to such a structure can be used as a parameter for the functions  FT_Open_Face  and  FT_Attach_Stream .",
            "title": "FT_Open_Args"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_parameter",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_Parameter_\n  {\n     FT_ULong     tag;\n     FT_Pointer   data;\n\n  }  FT_Parameter ;   A simple structure to pass more or less generic parameters to  FT_Open_Face  and  FT_Face_Properties .",
            "title": "FT_Parameter"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_attach_file",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Attach_File (  FT_Face       face,\n                   const   char *  filepathname );   Call  FT_Attach_Stream  to attach a file.",
            "title": "FT_Attach_File"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_attach_stream",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Attach_Stream (  FT_Face         face,\n                     FT_Open_Args *  parameters );   \u2018Attach\u2019 data to a face object. Normally, this is used to read additional information for the face object. For example, you can attach an AFM file that comes with a Type\u00a01 font to get the kerning values and other metrics.",
            "title": "FT_Attach_Stream"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_set_char_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Char_Size (  FT_Face      face,\n                     FT_F26Dot6   char_width,\n                     FT_F26Dot6   char_height,\n                     FT_UInt      horz_resolution,\n                     FT_UInt      vert_resolution );   Call  FT_Request_Size  to request the nominal size (in points).",
            "title": "FT_Set_Char_Size"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_set_pixel_sizes",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Pixel_Sizes (  FT_Face   face,\n                       FT_UInt   pixel_width,\n                       FT_UInt   pixel_height );   Call  FT_Request_Size  to request the nominal size (in pixels).",
            "title": "FT_Set_Pixel_Sizes"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_request_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Request_Size (  FT_Face           face,\n                    FT_Size_Request   req );   Resize the scale of the active  FT_Size  object in a face.",
            "title": "FT_Request_Size"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_select_size",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Select_Size (  FT_Face   face,\n                   FT_Int    strike_index );   Select a bitmap strike. To be more precise, this function sets the scaling factors of the active  FT_Size  object in a face so that bitmaps from this particular strike are taken by  FT_Load_Glyph  and friends.",
            "title": "FT_Select_Size"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_size_request_type",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   enum   FT_Size_Request_Type_\n  {\n     FT_SIZE_REQUEST_TYPE_NOMINAL ,\n     FT_SIZE_REQUEST_TYPE_REAL_DIM ,\n     FT_SIZE_REQUEST_TYPE_BBOX ,\n     FT_SIZE_REQUEST_TYPE_CELL ,\n     FT_SIZE_REQUEST_TYPE_SCALES ,\n\n    FT_SIZE_REQUEST_TYPE_MAX\n\n  }  FT_Size_Request_Type ;   An enumeration type that lists the supported size request types, i.e., what input size (in font units) maps to the requested output size (in pixels, as computed from the arguments of  FT_Size_Request ).",
            "title": "FT_Size_Request_Type"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_size_requestrec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_Size_RequestRec_\n  {\n     FT_Size_Request_Type   type;\n     FT_Long                width;\n     FT_Long                height;\n     FT_UInt                horiResolution;\n     FT_UInt                vertResolution;\n\n  }  FT_Size_RequestRec ;   A structure to model a size request.",
            "title": "FT_Size_RequestRec"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_size_request",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_Size_RequestRec_  * FT_Size_Request ;   A handle to a size request structure.",
            "title": "FT_Size_Request"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_set_transform",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  void  )\n   FT_Set_Transform (  FT_Face      face,\n                     FT_Matrix *  matrix,\n                     FT_Vector *  delta );   Set the transformation that is applied to glyph images when they are loaded into a glyph slot through  FT_Load_Glyph .",
            "title": "FT_Set_Transform"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_load_glyph",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Load_Glyph (  FT_Face    face,\n                  FT_UInt    glyph_index,\n                  FT_Int32   load_flags );   Load a glyph into the glyph slot of a face object.",
            "title": "FT_Load_Glyph"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_char_index",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UInt  )\n   FT_Get_Char_Index (  FT_Face    face,\n                      FT_ULong   charcode );   Return the glyph index of a given character code. This function uses the currently selected charmap to do the mapping.",
            "title": "FT_Get_Char_Index"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_first_char",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_ULong  )\n   FT_Get_First_Char (  FT_Face    face,\n                      FT_UInt   *agindex );   Return the first character code in the current charmap of a given face, together with its corresponding glyph index.",
            "title": "FT_Get_First_Char"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_next_char",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_ULong  )\n   FT_Get_Next_Char (  FT_Face     face,\n                     FT_ULong    char_code,\n                     FT_UInt    *agindex );   Return the next character code in the current charmap of a given face following the value  char_code , as well as the corresponding glyph index.",
            "title": "FT_Get_Next_Char"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_name_index",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UInt  )\n   FT_Get_Name_Index (  FT_Face      face,\n                      FT_String *  glyph_name );   Return the glyph index of a given glyph name.",
            "title": "FT_Get_Name_Index"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_load_char",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Load_Char (  FT_Face    face,\n                 FT_ULong   char_code,\n                 FT_Int32   load_flags );   Load a glyph into the glyph slot of a face object, accessed by its character code.",
            "title": "FT_Load_Char"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_load_target_mode",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_LOAD_TARGET_MODE ( x )  ( ( FT_Render_Mode )( ( (x) >> 16 ) & 15 ) )   Return the  FT_Render_Mode  corresponding to a given  FT_LOAD_TARGET_XXX  value.",
            "title": "FT_LOAD_TARGET_MODE"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_render_glyph",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Render_Glyph (  FT_GlyphSlot     slot,\n                    FT_Render_Mode   render_mode );   Convert a given glyph image to a bitmap. It does so by inspecting the glyph image format, finding the relevant renderer, and invoking it.",
            "title": "FT_Render_Glyph"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_render_mode",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   enum   FT_Render_Mode_\n  {\n     FT_RENDER_MODE_NORMAL  = 0,\n     FT_RENDER_MODE_LIGHT ,\n     FT_RENDER_MODE_MONO ,\n     FT_RENDER_MODE_LCD ,\n     FT_RENDER_MODE_LCD_V ,\n\n    FT_RENDER_MODE_MAX\n\n  }  FT_Render_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Render_Mode ' values instead                       */\n# define  ft_render_mode_normal   FT_RENDER_MODE_NORMAL \n# define  ft_render_mode_mono     FT_RENDER_MODE_MONO    Render modes supported by FreeType\u00a02. Each mode corresponds to a specific type of scanline conversion performed on the outline.  For bitmap fonts and embedded bitmaps the  bitmap->pixel_mode  field in the  FT_GlyphSlotRec  structure gives the format of the returned bitmap.  All modes except  FT_RENDER_MODE_MONO  use 256 levels of opacity, indicating pixel coverage. Use linear alpha blending and gamma correction to correctly render non-monochrome glyph bitmaps onto a surface; see  FT_Render_Glyph .",
            "title": "FT_Render_Mode"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_kerning",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Kerning (  FT_Face      face,\n                   FT_UInt      left_glyph,\n                   FT_UInt      right_glyph,\n                   FT_UInt      kern_mode,\n                   FT_Vector   *akerning );   Return the kerning vector between two glyphs of the same face.",
            "title": "FT_Get_Kerning"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_kerning_mode",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   enum   FT_Kerning_Mode_\n  {\n     FT_KERNING_DEFAULT  = 0,\n     FT_KERNING_UNFITTED ,\n     FT_KERNING_UNSCALED \n\n  }  FT_Kerning_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Kerning_Mode ' values instead                      */\n# define  ft_kerning_default    FT_KERNING_DEFAULT \n# define  ft_kerning_unfitted   FT_KERNING_UNFITTED \n# define  ft_kerning_unscaled   FT_KERNING_UNSCALED    An enumeration to specify the format of kerning values returned by  FT_Get_Kerning .",
            "title": "FT_Kerning_Mode"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_track_kerning",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Track_Kerning (  FT_Face     face,\n                         FT_Fixed    point_size,\n                         FT_Int      degree,\n                         FT_Fixed *  akerning );   Return the track kerning for a given face object at a given size.",
            "title": "FT_Get_Track_Kerning"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_glyph_name",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Glyph_Name (  FT_Face      face,\n                      FT_UInt      glyph_index,\n                      FT_Pointer   buffer,\n                      FT_UInt      buffer_max );   Retrieve the ASCII name of a given glyph in a face. This only works for those faces where  FT_HAS_GLYPH_NAMES (face) returns\u00a01.",
            "title": "FT_Get_Glyph_Name"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_postscript_name",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  const   char * )\n   FT_Get_Postscript_Name (  FT_Face   face );   Retrieve the ASCII PostScript name of a given face, if available. This only works with PostScript, TrueType, and OpenType fonts.",
            "title": "FT_Get_Postscript_Name"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_charmaprec",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_CharMapRec_\n  {\n     FT_Face       face;\n     FT_Encoding   encoding;\n     FT_UShort     platform_id;\n     FT_UShort     encoding_id;\n\n  }  FT_CharMapRec ;   The base charmap structure.",
            "title": "FT_CharMapRec"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_select_charmap",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Select_Charmap (  FT_Face       face,\n                      FT_Encoding   encoding );   Select a given charmap by its encoding tag (as listed in  freetype.h ).",
            "title": "FT_Select_Charmap"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_set_charmap",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Charmap (  FT_Face      face,\n                   FT_CharMap   charmap );   Select a given charmap for character code to glyph index mapping.",
            "title": "FT_Set_Charmap"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_charmap_index",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Int  )\n   FT_Get_Charmap_Index (  FT_CharMap   charmap );   Retrieve index of a given charmap.",
            "title": "FT_Get_Charmap_Index"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_fstype_flags",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UShort  )\n   FT_Get_FSType_Flags (  FT_Face   face );   Return the  fsType  flags for a font.",
            "title": "FT_Get_FSType_Flags"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_get_subglyph_info",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_SubGlyph_Info (  FT_GlyphSlot   glyph,\n                         FT_UInt        sub_index,\n                         FT_Int        *p_index,\n                         FT_UInt       *p_flags,\n                         FT_Int        *p_arg1,\n                         FT_Int        *p_arg2,\n                         FT_Matrix     *p_transform );   Retrieve a description of a given subglyph. Only use it if  glyph->format  is  FT_GLYPH_FORMAT_COMPOSITE ; an error is returned otherwise.",
            "title": "FT_Get_SubGlyph_Info"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_face_internal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_Face_InternalRec_*   FT_Face_Internal ;   An opaque handle to an  FT_Face_InternalRec  structure that models the private data of a given  FT_Face  object.  This structure might change between releases of FreeType\u00a02 and is not generally available to client applications.",
            "title": "FT_Face_Internal"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_size_internal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_Size_InternalRec_*   FT_Size_Internal ;   An opaque handle to an  FT_Size_InternalRec  structure, used to model private data of a given  FT_Size  object.",
            "title": "FT_Size_Internal"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_slot_internal",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_Slot_InternalRec_*   FT_Slot_Internal ;   An opaque handle to an  FT_Slot_InternalRec  structure, used to model private data of a given  FT_GlyphSlot  object.",
            "title": "FT_Slot_Internal"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_face_flag_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_FACE_FLAG_SCALABLE           ( 1L <<  0 )\n# define   FT_FACE_FLAG_FIXED_SIZES        ( 1L <<  1 )\n# define   FT_FACE_FLAG_FIXED_WIDTH        ( 1L <<  2 )\n# define   FT_FACE_FLAG_SFNT               ( 1L <<  3 )\n# define   FT_FACE_FLAG_HORIZONTAL         ( 1L <<  4 )\n# define   FT_FACE_FLAG_VERTICAL           ( 1L <<  5 )\n# define   FT_FACE_FLAG_KERNING            ( 1L <<  6 )\n# define   FT_FACE_FLAG_FAST_GLYPHS        ( 1L <<  7 )\n# define   FT_FACE_FLAG_MULTIPLE_MASTERS   ( 1L <<  8 )\n# define   FT_FACE_FLAG_GLYPH_NAMES        ( 1L <<  9 )\n# define   FT_FACE_FLAG_EXTERNAL_STREAM    ( 1L << 10 )\n# define   FT_FACE_FLAG_HINTER             ( 1L << 11 )\n# define   FT_FACE_FLAG_CID_KEYED          ( 1L << 12 )\n# define   FT_FACE_FLAG_TRICKY             ( 1L << 13 )\n# define   FT_FACE_FLAG_COLOR              ( 1L << 14 )\n# define   FT_FACE_FLAG_VARIATION          ( 1L << 15 )   A list of bit flags used in the  face_flags  field of the  FT_FaceRec  structure. They inform client applications of properties of the corresponding face.",
            "title": "FT_FACE_FLAG_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_style_flag_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_STYLE_FLAG_ITALIC   ( 1 << 0 )\n# define   FT_STYLE_FLAG_BOLD     ( 1 << 1 )   A list of bit flags to indicate the style of a given face. These are used in the  style_flags  field of  FT_FaceRec .",
            "title": "FT_STYLE_FLAG_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_open_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_OPEN_MEMORY     0x1\n# define   FT_OPEN_STREAM     0x2\n# define   FT_OPEN_PATHNAME   0x4\n# define   FT_OPEN_DRIVER     0x8\n# define   FT_OPEN_PARAMS     0x10\n\n  /* these constants are deprecated; use the corresponding ` FT_OPEN_XXX ' */\n  /* values instead                                                      */\n# define  ft_open_memory     FT_OPEN_MEMORY \n# define  ft_open_stream     FT_OPEN_STREAM \n# define  ft_open_pathname   FT_OPEN_PATHNAME \n# define  ft_open_driver     FT_OPEN_DRIVER \n# define  ft_open_params     FT_OPEN_PARAMS    A list of bit field constants used within the \u2018flags\u2019 field of the  FT_Open_Args  structure.",
            "title": "FT_OPEN_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_load_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_LOAD_DEFAULT                       0x0\n# define   FT_LOAD_NO_SCALE                      ( 1L << 0 )\n# define   FT_LOAD_NO_HINTING                    ( 1L << 1 )\n# define   FT_LOAD_RENDER                        ( 1L << 2 )\n# define   FT_LOAD_NO_BITMAP                     ( 1L << 3 )\n# define   FT_LOAD_VERTICAL_LAYOUT               ( 1L << 4 )\n# define   FT_LOAD_FORCE_AUTOHINT                ( 1L << 5 )\n# define   FT_LOAD_CROP_BITMAP                   ( 1L << 6 )\n# define   FT_LOAD_PEDANTIC                      ( 1L << 7 )\n# define   FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH   ( 1L << 9 )\n# define   FT_LOAD_NO_RECURSE                    ( 1L << 10 )\n# define   FT_LOAD_IGNORE_TRANSFORM              ( 1L << 11 )\n# define   FT_LOAD_MONOCHROME                    ( 1L << 12 )\n# define   FT_LOAD_LINEAR_DESIGN                 ( 1L << 13 )\n# define   FT_LOAD_NO_AUTOHINT                   ( 1L << 15 )\n  /* Bits 16-19 are used by `FT_LOAD_TARGET_' */\n# define   FT_LOAD_COLOR                         ( 1L << 20 )\n# define   FT_LOAD_COMPUTE_METRICS               ( 1L << 21 )\n# define   FT_LOAD_BITMAP_METRICS_ONLY           ( 1L << 22 )   A list of bit field constants for  FT_Load_Glyph  to indicate what kind of operations to perform during glyph loading.",
            "title": "FT_LOAD_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_load_target_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define  FT_LOAD_TARGET_( x )   ( ( FT_Int32 )( (x) & 15 ) << 16 )\n\n# define   FT_LOAD_TARGET_NORMAL   FT_LOAD_TARGET_(  FT_RENDER_MODE_NORMAL  )\n# define   FT_LOAD_TARGET_LIGHT    FT_LOAD_TARGET_(  FT_RENDER_MODE_LIGHT   )\n# define   FT_LOAD_TARGET_MONO     FT_LOAD_TARGET_(  FT_RENDER_MODE_MONO    )\n# define   FT_LOAD_TARGET_LCD      FT_LOAD_TARGET_(  FT_RENDER_MODE_LCD     )\n# define   FT_LOAD_TARGET_LCD_V    FT_LOAD_TARGET_(  FT_RENDER_MODE_LCD_V   )   A list of values to select a specific hinting algorithm for the hinter. You should OR one of these values to your  load_flags  when calling  FT_Load_Glyph .  Note that a font's native hinters may ignore the hinting algorithm you have specified (e.g., the TrueType bytecode interpreter). You can set  FT_LOAD_FORCE_AUTOHINT  to ensure that the auto-hinter is used.",
            "title": "FT_LOAD_TARGET_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_subglyph_flag_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS           1\n# define   FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES       2\n# define   FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID         4\n# define   FT_SUBGLYPH_FLAG_SCALE                    8\n# define   FT_SUBGLYPH_FLAG_XY_SCALE              0x40\n# define   FT_SUBGLYPH_FLAG_2X2                   0x80\n# define   FT_SUBGLYPH_FLAG_USE_MY_METRICS       0x200   A list of constants describing subglyphs. Please refer to the \u2018glyf\u2019 table description in the OpenType specification for the meaning of the various flags (which get synthesized for non-OpenType subglyphs).  https://docs.microsoft.com/en-us/typography/opentype/spec/glyf#composite-glyph-description",
            "title": "FT_SUBGLYPH_FLAG_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_fstype_xxx",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_FSTYPE_INSTALLABLE_EMBEDDING          0x0000\n# define   FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING   0x0002\n# define   FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING    0x0004\n# define   FT_FSTYPE_EDITABLE_EMBEDDING             0x0008\n# define   FT_FSTYPE_NO_SUBSETTING                  0x0100\n# define   FT_FSTYPE_BITMAP_EMBEDDING_ONLY          0x0200   A list of bit flags used in the  fsType  field of the OS/2 table in a TrueType or OpenType font and the \u2018FSType\u2019 entry in a PostScript font. These bit flags are returned by  FT_Get_FSType_Flags ; they inform client applications of embedding and subsetting restrictions associated with a font.  See  https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf  for more details.",
            "title": "FT_FSTYPE_XXX"
        },
        {
            "location": "/ft2-base_interface/index.html#ft_has_fast_glyphs",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n# define   FT_HAS_FAST_GLYPHS ( face )  0   Deprecated.",
            "title": "FT_HAS_FAST_GLYPHS"
        },
        {
            "location": "/ft2-glyph_variants/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Unicode Variation Sequences\n\n\n\n\nUnicode Variation Sequences\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nMany characters, especially for CJK scripts, have variant forms. They are a sort of grey area somewhere between being totally irrelevant and semantically distinct; for this reason, the Unicode consortium decided to introduce Variation Sequences (VS), consisting of a Unicode base character and a variation selector instead of further extending the already huge number of characters.\n\n\nUnicode maintains two different sets, namely \u2018Standardized Variation Sequences\u2019 and registered \u2018Ideographic Variation Sequences\u2019 (IVS), collected in the \u2018Ideographic Variation Database\u2019 (IVD).\n\n\nhttps://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt\n \nhttps://unicode.org/reports/tr37/\n \nhttps://unicode.org/ivd/\n\n\nTo date (January 2017), the character with the most ideographic variations is U+9089, having 32 such IVS.\n\n\nThree Mongolian Variation Selectors have the values U+180B-U+180D; 256 generic Variation Selectors are encoded in the ranges U+FE00-U+FE0F and U+E0100-U+E01EF. IVS currently use Variation Selectors from the range U+E0100-U+E01EF only.\n\n\nA VS consists of the base character value followed by a single Variation Selector. For example, to get the first variation of U+9089, you have to write the character sequence \nU+9089 U+E0100\n.\n\n\nAdobe and MS decided to support both standardized and ideographic VS with a new cmap subtable (format\u00a014). It is an odd subtable because it is not a mapping of input code points to glyphs, but contains lists of all variations supported by the font.\n\n\nA variation may be either \u2018default\u2019 or \u2018non-default\u2019 for a given font. A default variation is the one you will get for that code point if you look it up in the standard Unicode cmap. A non-default variation is a different glyph.\n\n\nFT_Face_GetCharVariantIndex\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Face_GetCharVariantIndex\n( \nFT_Face\n   face,\n                               \nFT_ULong\n  charcode,\n                               \nFT_ULong\n  variantSelector );\n\n\n\n\n\n\nReturn the glyph index of a given character code as modified by the variation selector.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\ncharcode\n\n\nThe character code point in Unicode.\n\n\n\n\nvariantSelector\n\n\nThe Unicode code point of the variation selector.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe glyph index. 0\u00a0means either \u2018undefined character code\u2019, or \u2018undefined selector code\u2019, or \u2018no variation selector cmap subtable\u2019, or \u2018current CharMap is not Unicode\u2019.\n\n\nnote\n\n\n\nIf you use FreeType to manipulate the contents of font files directly, be aware that the glyph index returned by this function doesn't always correspond to the internal indices used within the file. This is done to ensure that value\u00a00 always corresponds to the \u2018missing glyph\u2019.\n\n\nThis function is only meaningful if a) the font has a variation selector cmap sub table, and b) the current charmap has a Unicode encoding.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetCharVariantIsDefault\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Int\n )\n  \nFT_Face_GetCharVariantIsDefault\n( \nFT_Face\n   face,\n                                   \nFT_ULong\n  charcode,\n                                   \nFT_ULong\n  variantSelector );\n\n\n\n\n\n\nCheck whether this variation of this Unicode character is the one to be found in the \u2018cmap\u2019.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\ncharcode\n\n\nThe character codepoint in Unicode.\n\n\n\n\nvariantSelector\n\n\nThe Unicode codepoint of the variation selector.\n\n\n\n\n\n\n\nreturn\n\n\n\n1\u00a0if found in the standard (Unicode) cmap, 0\u00a0if found in the variation selector cmap, or -1 if it is not a variation.\n\n\nnote\n\n\n\nThis function is only meaningful if the font has a variation selector cmap subtable.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetVariantSelectors\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt32\n* )\n  \nFT_Face_GetVariantSelectors\n( \nFT_Face\n  face );\n\n\n\n\n\n\nReturn a zero-terminated list of Unicode variation selectors found in the font.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nA pointer to an array of selector code points, or NULL if there is no valid variation selector cmap subtable.\n\n\nnote\n\n\n\nThe last item in the array is\u00a00; the array is owned by the \nFT_Face\n object but can be overwritten or released on the next call to a FreeType function.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetVariantsOfChar\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt32\n* )\n  \nFT_Face_GetVariantsOfChar\n( \nFT_Face\n   face,\n                             \nFT_ULong\n  charcode );\n\n\n\n\n\n\nReturn a zero-terminated list of Unicode variation selectors found for the specified character code.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\ncharcode\n\n\nThe character codepoint in Unicode.\n\n\n\n\n\n\n\nreturn\n\n\n\nA pointer to an array of variation selector code points that are active for the given character, or NULL if the corresponding list is empty.\n\n\nnote\n\n\n\nThe last item in the array is\u00a00; the array is owned by the \nFT_Face\n object but can be overwritten or released on the next call to a FreeType function.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Face_GetCharsOfVariant\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt32\n* )\n  \nFT_Face_GetCharsOfVariant\n( \nFT_Face\n   face,\n                             \nFT_ULong\n  variantSelector );\n\n\n\n\n\n\nReturn a zero-terminated list of Unicode character codes found for the specified variation selector.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face object.\n\n\n\n\nvariantSelector\n\n\nThe variation selector code point in Unicode.\n\n\n\n\n\n\n\nreturn\n\n\n\nA list of all the code points that are specified by this selector (both default and non-default codes are returned) or NULL if there is no valid cmap or the variation selector is invalid.\n\n\nnote\n\n\n\nThe last item in the array is\u00a00; the array is owned by the \nFT_Face\n object but can be overwritten or released on the next call to a FreeType function.\n\n\nsince\n\n\n\n2.3.6",
            "title": "Unicode Variation Sequences"
        },
        {
            "location": "/ft2-glyph_variants/index.html#unicode-variation-sequences",
            "text": "",
            "title": "Unicode Variation Sequences"
        },
        {
            "location": "/ft2-glyph_variants/index.html#synopsis",
            "text": "Many characters, especially for CJK scripts, have variant forms. They are a sort of grey area somewhere between being totally irrelevant and semantically distinct; for this reason, the Unicode consortium decided to introduce Variation Sequences (VS), consisting of a Unicode base character and a variation selector instead of further extending the already huge number of characters.  Unicode maintains two different sets, namely \u2018Standardized Variation Sequences\u2019 and registered \u2018Ideographic Variation Sequences\u2019 (IVS), collected in the \u2018Ideographic Variation Database\u2019 (IVD).  https://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt   https://unicode.org/reports/tr37/   https://unicode.org/ivd/  To date (January 2017), the character with the most ideographic variations is U+9089, having 32 such IVS.  Three Mongolian Variation Selectors have the values U+180B-U+180D; 256 generic Variation Selectors are encoded in the ranges U+FE00-U+FE0F and U+E0100-U+E01EF. IVS currently use Variation Selectors from the range U+E0100-U+E01EF only.  A VS consists of the base character value followed by a single Variation Selector. For example, to get the first variation of U+9089, you have to write the character sequence  U+9089 U+E0100 .  Adobe and MS decided to support both standardized and ideographic VS with a new cmap subtable (format\u00a014). It is an odd subtable because it is not a mapping of input code points to glyphs, but contains lists of all variations supported by the font.  A variation may be either \u2018default\u2019 or \u2018non-default\u2019 for a given font. A default variation is the one you will get for that code point if you look it up in the standard Unicode cmap. A non-default variation is a different glyph.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-glyph_variants/index.html#ft_face_getcharvariantindex",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UInt  )\n   FT_Face_GetCharVariantIndex (  FT_Face    face,\n                                FT_ULong   charcode,\n                                FT_ULong   variantSelector );   Return the glyph index of a given character code as modified by the variation selector.",
            "title": "FT_Face_GetCharVariantIndex"
        },
        {
            "location": "/ft2-glyph_variants/index.html#ft_face_getcharvariantisdefault",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Int  )\n   FT_Face_GetCharVariantIsDefault (  FT_Face    face,\n                                    FT_ULong   charcode,\n                                    FT_ULong   variantSelector );   Check whether this variation of this Unicode character is the one to be found in the \u2018cmap\u2019.",
            "title": "FT_Face_GetCharVariantIsDefault"
        },
        {
            "location": "/ft2-glyph_variants/index.html#ft_face_getvariantselectors",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UInt32 * )\n   FT_Face_GetVariantSelectors (  FT_Face   face );   Return a zero-terminated list of Unicode variation selectors found in the font.",
            "title": "FT_Face_GetVariantSelectors"
        },
        {
            "location": "/ft2-glyph_variants/index.html#ft_face_getvariantsofchar",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UInt32 * )\n   FT_Face_GetVariantsOfChar (  FT_Face    face,\n                              FT_ULong   charcode );   Return a zero-terminated list of Unicode variation selectors found for the specified character code.",
            "title": "FT_Face_GetVariantsOfChar"
        },
        {
            "location": "/ft2-glyph_variants/index.html#ft_face_getcharsofvariant",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_UInt32 * )\n   FT_Face_GetCharsOfVariant (  FT_Face    face,\n                              FT_ULong   variantSelector );   Return a zero-terminated list of Unicode character codes found for the specified variation selector.",
            "title": "FT_Face_GetCharsOfVariant"
        },
        {
            "location": "/ft2-color_management/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Glyph Color Management\n\n\n\n\nGlyph Color Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe functions described here allow access and manipulation of color palette entries in OpenType's \u2018CPAL\u2019 tables.\n\n\nFT_Color\n\u00b6\n\n\nDefined in FT_COLOR_H (freetype/ftcolor.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Color_\n  {\n    \nFT_Byte\n  blue;\n    \nFT_Byte\n  green;\n    \nFT_Byte\n  red;\n    \nFT_Byte\n  alpha;\n\n  } \nFT_Color\n;\n\n\n\n\n\n\nThis structure models a BGRA color value of a \u2018CPAL\u2019 palette entry.\n\n\nThe used color space is sRGB; the colors are not pre-multiplied, and alpha values must be explicitly set.\n\n\nfields\n\n\n\n\n\nblue\n\n\nBlue value.\n\n\n\n\ngreen\n\n\nGreen value.\n\n\n\n\nred\n\n\nRed value.\n\n\n\n\nalpha\n\n\nAlpha value, giving the red, green, and blue color's opacity.\n\n\n\n\n\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_PALETTE_XXX\n\u00b6\n\n\nDefined in FT_COLOR_H (freetype/ftcolor.h).\n\n\n\n\n\n#\ndefine\n \nFT_PALETTE_FOR_LIGHT_BACKGROUND\n  0x01\n#\ndefine\n \nFT_PALETTE_FOR_DARK_BACKGROUND\n   0x02\n\n\n\n\n\n\nA list of bit field constants used in the \npalette_flags\n array of the \nFT_Palette_Data\n structure to indicate for which background a palette with a given index is usable.\n\n\nvalues\n\n\n\n\n\nFT_PALETTE_FOR_LIGHT_BACKGROUND\n\n\nThe palette is appropriate to use when displaying the font on a light background such as white.\n\n\n\n\nFT_PALETTE_FOR_DARK_BACKGROUND\n\n\nThe palette is appropriate to use when displaying the font on a dark background such as black.\n\n\n\n\n\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_Palette_Data\n\u00b6\n\n\nDefined in FT_COLOR_H (freetype/ftcolor.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Palette_Data_ {\n    \nFT_UShort\n         num_palettes;\n    \nconst\n \nFT_UShort\n*  palette_name_ids;\n    \nconst\n \nFT_UShort\n*  palette_flags;\n\n    \nFT_UShort\n         num_palette_entries;\n    \nconst\n \nFT_UShort\n*  palette_entry_name_ids;\n\n  } \nFT_Palette_Data\n;\n\n\n\n\n\n\nThis structure holds the data of the \u2018CPAL\u2019 table.\n\n\nfields\n\n\n\n\n\nnum_palettes\n\n\nThe number of palettes.\n\n\n\n\npalette_name_ids\n\n\nA read-only array of palette name IDs with \nnum_palettes\n elements, corresponding to entries like \u2018dark\u2019 or \u2018light\u2019 in the font's \u2018name\u2019 table.\nAn empty name ID in the \u2018CPAL\u2019 table gets represented as value 0xFFFF.\nNULL if the font's \u2018CPAL\u2019 table doesn't contain appropriate data.\n\n\n\n\npalette_flags\n\n\nA read-only array of palette flags with \nnum_palettes\n elements. Possible values are an ORed combination of \nFT_PALETTE_FOR_LIGHT_BACKGROUND\n and \nFT_PALETTE_FOR_DARK_BACKGROUND\n.\nNULL if the font's \u2018CPAL\u2019 table doesn't contain appropriate data.\n\n\n\n\nnum_palette_entries\n\n\nThe number of entries in a single palette. All palettes have the same size.\n\n\n\n\npalette_entry_name_ids\n\n\nA read-only array of palette entry name IDs with \nnum_palette_entries\n. In each palette, entries with the same index have the same function. For example, index\u00a00 might correspond to string \u2018outline\u2019 in the font's \u2018name\u2019 table to indicate that this palette entry is used for outlines, index\u00a01 might correspond to \u2018fill\u2019 to indicate the filling color palette entry, etc.\nAn empty entry name ID in the \u2018CPAL\u2019 table gets represented as value 0xFFFF.\nNULL if the font's \u2018CPAL\u2019 table doesn't contain appropriate data.\n\n\n\n\n\n\n\nnote\n\n\n\nUse function \nFT_Get_Sfnt_Name\n to map name IDs and entry name IDs to name strings.\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_Palette_Data_Get\n\u00b6\n\n\nDefined in FT_COLOR_H (freetype/ftcolor.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Palette_Data_Get\n( \nFT_Face\n           face,\n                       \nFT_Palette_Data\n  *apalette );\n\n\n\n\n\n\nRetrieve the face's color palette data.\n\n\ninput\n\n\n\n\n\nface\n\n\nThe source face handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\napalette\n\n\nA pointer to an \nFT_Palette_Data\n structure.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAll arrays in the returned \nFT_Palette_Data\n structure are read-only.\n\n\nThis function always returns an error if the config macro \nTT_CONFIG_OPTION_COLOR_LAYERS\n is not defined in \nftoption.h\n.\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_Palette_Select\n\u00b6\n\n\nDefined in FT_COLOR_H (freetype/ftcolor.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Palette_Select\n( \nFT_Face\n     face,\n                     \nFT_UShort\n   palette_index,\n                     \nFT_Color\n*  *apalette );\n\n\n\n\n\n\nThis function has two purposes.\n\n\n(1) It activates a palette for rendering color glyphs, and\n\n\n(2) it retrieves all (unmodified) color entries of this palette. This function returns a read-write array, which means that a calling application can modify the palette entries on demand.\n\n\nA corollary of (2) is that calling the function, then modifying some values, then calling the function again with the same arguments resets all color entries to the original \u2018CPAL\u2019 values; all user modifications are lost.\n\n\ninput\n\n\n\n\n\nface\n\n\nThe source face handle.\n\n\n\n\npalette_index\n\n\nThe palette index.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\napalette\n\n\nAn array of color entries for a palette with index \npalette_index\n. If \u2018apalette\u2019 is set to NULL, no array gets returned (and no color entries can be modified).\nIn case the font doesn't support color palettes, NULL is returned.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe number of color entries is given by the \nnum_palette_entries\n field in the \nFT_Palette_Data\n structure.\n\n\nThe array pointed to by \napalette_entries\n is owned and managed by FreeType.\n\n\nThis function always returns an error if the config macro \nTT_CONFIG_OPTION_COLOR_LAYERS\n is not defined in \nftoption.h\n.\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_Palette_Set_Foreground_Color\n\u00b6\n\n\nDefined in FT_COLOR_H (freetype/ftcolor.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Palette_Set_Foreground_Color\n( \nFT_Face\n   face,\n                                   \nFT_Color\n  foreground_color );\n\n\n\n\n\n\n\u2018COLR\u2019 uses palette index 0xFFFF to indicate a \u2018text foreground color\u2019. This function sets this value.\n\n\ninput\n\n\n\n\n\nface\n\n\nThe source face handle.\n\n\n\n\nforeground_color\n\n\nAn \nFT_Color\n structure to define the text foreground color.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf this function isn't called, the text foreground color is set to white opaque (BGRA value 0xFFFFFFFF) if \nFT_PALETTE_FOR_DARK_BACKGROUND\n is present for the current palette, and black opaque (BGRA value 0x000000FF) otherwise, including the case that no palette types are available in the \u2018CPAL\u2019 table.\n\n\nThis function always returns an error if the config macro \nTT_CONFIG_OPTION_COLOR_LAYERS\n is not defined in \nftoption.h\n.\n\n\nsince\n\n\n\n2.10",
            "title": "Glyph Color Management"
        },
        {
            "location": "/ft2-color_management/index.html#glyph-color-management",
            "text": "",
            "title": "Glyph Color Management"
        },
        {
            "location": "/ft2-color_management/index.html#synopsis",
            "text": "The functions described here allow access and manipulation of color palette entries in OpenType's \u2018CPAL\u2019 tables.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-color_management/index.html#ft_color",
            "text": "Defined in FT_COLOR_H (freetype/ftcolor.h).   \n   typedef   struct   FT_Color_\n  {\n     FT_Byte   blue;\n     FT_Byte   green;\n     FT_Byte   red;\n     FT_Byte   alpha;\n\n  }  FT_Color ;   This structure models a BGRA color value of a \u2018CPAL\u2019 palette entry.  The used color space is sRGB; the colors are not pre-multiplied, and alpha values must be explicitly set.",
            "title": "FT_Color"
        },
        {
            "location": "/ft2-color_management/index.html#ft_palette_xxx",
            "text": "Defined in FT_COLOR_H (freetype/ftcolor.h).   \n# define   FT_PALETTE_FOR_LIGHT_BACKGROUND   0x01\n# define   FT_PALETTE_FOR_DARK_BACKGROUND    0x02   A list of bit field constants used in the  palette_flags  array of the  FT_Palette_Data  structure to indicate for which background a palette with a given index is usable.",
            "title": "FT_PALETTE_XXX"
        },
        {
            "location": "/ft2-color_management/index.html#ft_palette_data",
            "text": "Defined in FT_COLOR_H (freetype/ftcolor.h).   \n   typedef   struct   FT_Palette_Data_ {\n     FT_UShort          num_palettes;\n     const   FT_UShort *  palette_name_ids;\n     const   FT_UShort *  palette_flags;\n\n     FT_UShort          num_palette_entries;\n     const   FT_UShort *  palette_entry_name_ids;\n\n  }  FT_Palette_Data ;   This structure holds the data of the \u2018CPAL\u2019 table.",
            "title": "FT_Palette_Data"
        },
        {
            "location": "/ft2-color_management/index.html#ft_palette_data_get",
            "text": "Defined in FT_COLOR_H (freetype/ftcolor.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Palette_Data_Get (  FT_Face            face,\n                        FT_Palette_Data   *apalette );   Retrieve the face's color palette data.",
            "title": "FT_Palette_Data_Get"
        },
        {
            "location": "/ft2-color_management/index.html#ft_palette_select",
            "text": "Defined in FT_COLOR_H (freetype/ftcolor.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Palette_Select (  FT_Face      face,\n                      FT_UShort    palette_index,\n                      FT_Color *  *apalette );   This function has two purposes.  (1) It activates a palette for rendering color glyphs, and  (2) it retrieves all (unmodified) color entries of this palette. This function returns a read-write array, which means that a calling application can modify the palette entries on demand.  A corollary of (2) is that calling the function, then modifying some values, then calling the function again with the same arguments resets all color entries to the original \u2018CPAL\u2019 values; all user modifications are lost.",
            "title": "FT_Palette_Select"
        },
        {
            "location": "/ft2-color_management/index.html#ft_palette_set_foreground_color",
            "text": "Defined in FT_COLOR_H (freetype/ftcolor.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Palette_Set_Foreground_Color (  FT_Face    face,\n                                    FT_Color   foreground_color );   \u2018COLR\u2019 uses palette index 0xFFFF to indicate a \u2018text foreground color\u2019. This function sets this value.",
            "title": "FT_Palette_Set_Foreground_Color"
        },
        {
            "location": "/ft2-layer_management/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Glyph Layer Management\n\n\n\n\nGlyph Layer Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe functions described here allow access of colored glyph layer data in OpenType's \u2018COLR\u2019 tables.\n\n\nFT_LayerIterator\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_LayerIterator_\n  {\n    \nFT_UInt\n   num_layers;\n    \nFT_UInt\n   layer;\n    \nFT_Byte\n*  p;\n\n  } \nFT_LayerIterator\n;\n\n\n\n\n\n\nThis iterator object is needed for \nFT_Get_Color_Glyph_Layer\n.\n\n\nfields\n\n\n\n\n\nnum_layers\n\n\nThe number of glyph layers for the requested glyph index. Will be set by \nFT_Get_Color_Glyph_Layer\n.\n\n\n\n\nlayer\n\n\nThe current layer. Will be set by \nFT_Get_Color_Glyph_Layer\n.\n\n\n\n\np\n\n\nAn opaque pointer into \u2018COLR\u2019 table data. The caller must set this to NULL before the first call of \nFT_Get_Color_Glyph_Layer\n.\n\n\n\n\n\n\n\n\n\n\nFT_Get_Color_Glyph_Layer\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Bool\n )\n  \nFT_Get_Color_Glyph_Layer\n( \nFT_Face\n            face,\n                            \nFT_UInt\n            base_glyph,\n                            \nFT_UInt\n           *aglyph_index,\n                            \nFT_UInt\n           *acolor_index,\n                            \nFT_LayerIterator\n*  iterator );\n\n\n\n\n\n\nThis is an interface to the \u2018COLR\u2019 table in OpenType fonts to iteratively retrieve the colored glyph layers associated with the current glyph slot.\n\n\nhttps://docs.microsoft.com/en-us/typography/opentype/spec/colr\n\n\nThe glyph layer data for a given glyph index, if present, provides an alternative, multi-colour glyph representation: Instead of rendering the outline or bitmap with the given glyph index, glyphs with the indices and colors returned by this function are rendered layer by layer.\n\n\nThe returned elements are ordered in the z\u00a0direction from bottom to top; the 'n'th element should be rendered with the associated palette color and blended on top of the already rendered layers (elements 0, 1, ..., n-1).\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the parent face object.\n\n\n\n\nbase_glyph\n\n\nThe glyph index the colored glyph layers are associated with.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\niterator\n\n\nAn \nFT_LayerIterator\n object. For the first call you should set \niterator->p\n to NULL. For all following calls, simply use the same object again.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naglyph_index\n\n\nThe glyph index of the current layer.\n\n\n\n\nacolor_index\n\n\nThe color index into the font face's color palette of the current layer. The value 0xFFFF is special; it doesn't reference a palette entry but indicates that the text foreground color should be used instead (to be set up by the application outside of FreeType).\nThe color palette can be retrieved with \nFT_Palette_Select\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nValue\u00a01 if everything is OK. If there are no more layers (or if there are no layers at all), value\u00a00 gets returned. In case of an error, value\u00a00 is returned also.\n\n\nnote\n\n\n\nThis function is necessary if you want to handle glyph layers by yourself. In particular, functions that operate with \nFT_GlyphRec\n objects (like \nFT_Get_Glyph\n or \nFT_Glyph_To_Bitmap\n) don't have access to this information.\n\n\nFT_Render_Glyph\n, however, handles colored glyph layers automatically if the \nFT_LOAD_COLOR\n flag is passed to it.\n\n\nexample\n\n\n\n  FT_Color*         palette;\n  FT_LayerIterator  iterator;\n\n  FT_Bool  have_layers;\n  FT_UInt  layer_glyph_index;\n  FT_UInt  layer_color_index;\n\n\n  error = FT_Palette_Select( face, palette_index, &palette );\n  if ( error )\n    palette = NULL;\n\n  iterator.p  = NULL;\n  have_layers = FT_Get_Color_Glyph_Layer( face,\n                                          glyph_index,\n                                          &layer_glyph_index,\n                                          &layer_color_index,\n                                          &iterator );\n\n  if ( palette && have_layers )\n  {\n    do\n    {\n      FT_Color  layer_color;\n\n\n      if ( layer_color_index == 0xFFFF )\n        layer_color = text_foreground_color;\n      else\n        layer_color = palette[layer_color_index];\n\n      // Load and render glyph `layer_glyph_index', then\n      // blend resulting pixmap (using color `layer_color')\n      // with previously created pixmaps.\n\n    } while ( FT_Get_Color_Glyph_Layer( face,\n                                        glyph_index,\n                                        &layer_glyph_index,\n                                        &layer_color_index,\n                                        &iterator ) );\n  }",
            "title": "Glyph Layer Management"
        },
        {
            "location": "/ft2-layer_management/index.html#glyph-layer-management",
            "text": "",
            "title": "Glyph Layer Management"
        },
        {
            "location": "/ft2-layer_management/index.html#synopsis",
            "text": "The functions described here allow access of colored glyph layer data in OpenType's \u2018COLR\u2019 tables.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-layer_management/index.html#ft_layeriterator",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct   FT_LayerIterator_\n  {\n     FT_UInt    num_layers;\n     FT_UInt    layer;\n     FT_Byte *  p;\n\n  }  FT_LayerIterator ;   This iterator object is needed for  FT_Get_Color_Glyph_Layer .",
            "title": "FT_LayerIterator"
        },
        {
            "location": "/ft2-layer_management/index.html#ft_get_color_glyph_layer",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Bool  )\n   FT_Get_Color_Glyph_Layer (  FT_Face             face,\n                             FT_UInt             base_glyph,\n                             FT_UInt            *aglyph_index,\n                             FT_UInt            *acolor_index,\n                             FT_LayerIterator *  iterator );   This is an interface to the \u2018COLR\u2019 table in OpenType fonts to iteratively retrieve the colored glyph layers associated with the current glyph slot.  https://docs.microsoft.com/en-us/typography/opentype/spec/colr  The glyph layer data for a given glyph index, if present, provides an alternative, multi-colour glyph representation: Instead of rendering the outline or bitmap with the given glyph index, glyphs with the indices and colors returned by this function are rendered layer by layer.  The returned elements are ordered in the z\u00a0direction from bottom to top; the 'n'th element should be rendered with the associated palette color and blended on top of the already rendered layers (elements 0, 1, ..., n-1).",
            "title": "FT_Get_Color_Glyph_Layer"
        },
        {
            "location": "/ft2-glyph_management/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Glyph Management\n\n\n\n\nGlyph Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains definitions used to manage glyph data through generic FT_Glyph objects. Each of them can contain a bitmap, a vector outline, or even images in other formats.\n\n\nFT_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_GlyphRec_*  \nFT_Glyph\n;\n\n\n\n\n\n\nHandle to an object used to model generic glyph images. It is a pointer to the \nFT_GlyphRec\n structure and can contain a glyph bitmap or pointer.\n\n\nnote\n\n\n\nGlyph objects are not owned by the library. You must thus release them manually (through \nFT_Done_Glyph\n) \nbefore\n calling \nFT_Done_FreeType\n.\n\n\n\n\n\nFT_GlyphRec\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_GlyphRec_\n  {\n    \nFT_Library\n             library;\n    \nconst\n FT_Glyph_Class*  clazz;\n    \nFT_Glyph_Format\n        format;\n    \nFT_Vector\n              advance;\n\n  } \nFT_GlyphRec\n;\n\n\n\n\n\n\nThe root glyph structure contains a given glyph image plus its advance width in 16.16 fixed-point format.\n\n\nfields\n\n\n\n\n\nlibrary\n\n\nA handle to the FreeType library object.\n\n\n\n\nclazz\n\n\nA pointer to the glyph's class. Private.\n\n\n\n\nformat\n\n\nThe format of the glyph's image.\n\n\n\n\nadvance\n\n\nA 16.16 vector that gives the glyph's advance width.\n\n\n\n\n\n\n\n\n\n\nFT_BitmapGlyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_BitmapGlyphRec_*  \nFT_BitmapGlyph\n;\n\n\n\n\n\n\nA handle to an object used to model a bitmap glyph image. This is a sub-class of \nFT_Glyph\n, and a pointer to \nFT_BitmapGlyphRec\n.\n\n\n\n\n\nFT_BitmapGlyphRec\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_BitmapGlyphRec_\n  {\n    \nFT_GlyphRec\n  root;\n    \nFT_Int\n       left;\n    \nFT_Int\n       top;\n    \nFT_Bitmap\n    bitmap;\n\n  } \nFT_BitmapGlyphRec\n;\n\n\n\n\n\n\nA structure used for bitmap glyph images. This really is a \u2018sub-class\u2019 of \nFT_GlyphRec\n.\n\n\nfields\n\n\n\n\n\nroot\n\n\nThe root \nFT_Glyph\n fields.\n\n\n\n\nleft\n\n\nThe left-side bearing, i.e., the horizontal distance from the current pen position to the left border of the glyph bitmap.\n\n\n\n\ntop\n\n\nThe top-side bearing, i.e., the vertical distance from the current pen position to the top border of the glyph bitmap. This distance is positive for upwards\u00a0y!\n\n\n\n\nbitmap\n\n\nA descriptor for the bitmap.\n\n\n\n\n\n\n\nnote\n\n\n\nYou can typecast an \nFT_Glyph\n to \nFT_BitmapGlyph\n if you have \nglyph->format == FT_GLYPH_FORMAT_BITMAP\n. This lets you access the bitmap's contents easily.\n\n\nThe corresponding pixel buffer is always owned by \nFT_BitmapGlyph\n and is thus created and destroyed with it.\n\n\n\n\n\nFT_OutlineGlyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_OutlineGlyphRec_*  \nFT_OutlineGlyph\n;\n\n\n\n\n\n\nA handle to an object used to model an outline glyph image. This is a sub-class of \nFT_Glyph\n, and a pointer to \nFT_OutlineGlyphRec\n.\n\n\n\n\n\nFT_OutlineGlyphRec\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_OutlineGlyphRec_\n  {\n    \nFT_GlyphRec\n  root;\n    \nFT_Outline\n   outline;\n\n  } \nFT_OutlineGlyphRec\n;\n\n\n\n\n\n\nA structure used for outline (vectorial) glyph images. This really is a \u2018sub-class\u2019 of \nFT_GlyphRec\n.\n\n\nfields\n\n\n\n\n\nroot\n\n\nThe root \nFT_Glyph\n fields.\n\n\n\n\noutline\n\n\nA descriptor for the outline.\n\n\n\n\n\n\n\nnote\n\n\n\nYou can typecast an \nFT_Glyph\n to \nFT_OutlineGlyph\n if you have \nglyph->format == FT_GLYPH_FORMAT_OUTLINE\n. This lets you access the outline's content easily.\n\n\nAs the outline is extracted from a glyph slot, its coordinates are expressed normally in 26.6 pixels, unless the flag \nFT_LOAD_NO_SCALE\n was used in \nFT_Load_Glyph\n() or \nFT_Load_Char\n().\n\n\nThe outline's tables are always owned by the object and are destroyed with it.\n\n\n\n\n\nFT_New_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Glyph\n( \nFT_Library\n       library,\n                \nFT_Glyph_Format\n  format,\n                \nFT_Glyph\n         *aglyph );\n\n\n\n\n\n\nA function used to create a new empty glyph image. Note that the created \nFT_Glyph\n object must be released with \nFT_Done_Glyph\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the FreeType library object.\n\n\n\n\nformat\n\n\nThe format of the glyph's image.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naglyph\n\n\nA handle to the glyph object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_Get_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Glyph\n( \nFT_GlyphSlot\n  slot,\n                \nFT_Glyph\n     *aglyph );\n\n\n\n\n\n\nA function used to extract a glyph image from a slot. Note that the created \nFT_Glyph\n object must be released with \nFT_Done_Glyph\n.\n\n\ninput\n\n\n\n\n\nslot\n\n\nA handle to the source glyph slot.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naglyph\n\n\nA handle to the glyph object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nBecause \n*aglyph->advance.x\n and \n*aglyph->advance.y\n are 16.16 fixed-point numbers, \nslot->advance.x\n and \nslot->advance.y\n (which are in 26.6 fixed-point format) must be in the range ]-32768;32768[.\n\n\n\n\n\nFT_Glyph_Copy\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_Copy\n( \nFT_Glyph\n   source,\n                 \nFT_Glyph\n  *target );\n\n\n\n\n\n\nA function used to copy a glyph image. Note that the created \nFT_Glyph\n object must be released with \nFT_Done_Glyph\n.\n\n\ninput\n\n\n\n\n\nsource\n\n\nA handle to the source glyph object.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ntarget\n\n\nA handle to the target glyph object. 0\u00a0in case of error.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Glyph_Transform\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_Transform\n( \nFT_Glyph\n    glyph,\n                      \nFT_Matrix\n*  matrix,\n                      \nFT_Vector\n*  delta );\n\n\n\n\n\n\nTransform a glyph image if its format is scalable.\n\n\ninout\n\n\n\n\n\nglyph\n\n\nA handle to the target glyph object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nmatrix\n\n\nA pointer to a 2x2 matrix to apply.\n\n\n\n\ndelta\n\n\nA pointer to a 2d vector to apply. Coordinates are expressed in 1/64th of a pixel.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code (if not 0, the glyph format is not scalable).\n\n\nnote\n\n\n\nThe 2x2 transformation matrix is also applied to the glyph's advance vector.\n\n\n\n\n\nFT_Glyph_BBox_Mode\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Glyph_BBox_Mode_\n  {\n    \nFT_GLYPH_BBOX_UNSCALED\n  = 0,\n    \nFT_GLYPH_BBOX_SUBPIXELS\n = 0,\n    \nFT_GLYPH_BBOX_GRIDFIT\n   = 1,\n    \nFT_GLYPH_BBOX_TRUNCATE\n  = 2,\n    \nFT_GLYPH_BBOX_PIXELS\n    = 3\n\n  } \nFT_Glyph_BBox_Mode\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_Glyph_BBox_Mode\n' values instead                   */\n#\ndefine\n ft_glyph_bbox_unscaled   \nFT_GLYPH_BBOX_UNSCALED\n\n#\ndefine\n ft_glyph_bbox_subpixels  \nFT_GLYPH_BBOX_SUBPIXELS\n\n#\ndefine\n ft_glyph_bbox_gridfit    \nFT_GLYPH_BBOX_GRIDFIT\n\n#\ndefine\n ft_glyph_bbox_truncate   \nFT_GLYPH_BBOX_TRUNCATE\n\n#\ndefine\n ft_glyph_bbox_pixels     \nFT_GLYPH_BBOX_PIXELS\n\n\n\n\n\n\n\nThe mode how the values of \nFT_Glyph_Get_CBox\n are returned.\n\n\nvalues\n\n\n\n\n\nFT_GLYPH_BBOX_UNSCALED\n\n\nReturn unscaled font units.\n\n\n\n\nFT_GLYPH_BBOX_SUBPIXELS\n\n\nReturn unfitted 26.6 coordinates.\n\n\n\n\nFT_GLYPH_BBOX_GRIDFIT\n\n\nReturn grid-fitted 26.6 coordinates.\n\n\n\n\nFT_GLYPH_BBOX_TRUNCATE\n\n\nReturn coordinates in integer pixels.\n\n\n\n\nFT_GLYPH_BBOX_PIXELS\n\n\nReturn grid-fitted pixel coordinates.\n\n\n\n\n\n\n\n\n\n\nFT_Glyph_Get_CBox\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Glyph_Get_CBox\n( \nFT_Glyph\n  glyph,\n                     \nFT_UInt\n   bbox_mode,\n                     \nFT_BBox\n  *acbox );\n\n\n\n\n\n\nReturn a glyph's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).\n\n\nComputing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nA handle to the source glyph object.\n\n\n\n\nmode\n\n\nThe mode that indicates how to interpret the returned bounding box values.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nacbox\n\n\nThe glyph coordinate bounding box. Coordinates are expressed in 1/64th of pixels if it is grid-fitted.\n\n\n\n\n\n\n\nnote\n\n\n\nCoordinates are relative to the glyph origin, using the y\u00a0upwards convention.\n\n\nIf the glyph has been loaded with \nFT_LOAD_NO_SCALE\n, \nbbox_mode\n must be set to \nFT_GLYPH_BBOX_UNSCALED\n to get unscaled font units in 26.6 pixel format. The value \nFT_GLYPH_BBOX_SUBPIXELS\n is another name for this constant.\n\n\nIf the font is tricky and the glyph has been loaded with \nFT_LOAD_NO_SCALE\n, the resulting CBox is meaningless. To get reasonable values for the CBox it is necessary to load the glyph at a large ppem value (so that the hinting instructions can properly shift and scale the subglyphs), then extracting the CBox, which can be eventually converted back to font units.\n\n\nNote that the maximum coordinates are exclusive, which means that one can compute the width and height of the glyph image (be it in integer or 26.6 pixels) as:\n\n  width  = bbox.xMax - bbox.xMin;\n  height = bbox.yMax - bbox.yMin;\n\n\n\nNote also that for 26.6 coordinates, if \nbbox_mode\n is set to \nFT_GLYPH_BBOX_GRIDFIT\n, the coordinates will also be grid-fitted, which corresponds to:\n\n  bbox.xMin = FLOOR(bbox.xMin);\n  bbox.yMin = FLOOR(bbox.yMin);\n  bbox.xMax = CEILING(bbox.xMax);\n  bbox.yMax = CEILING(bbox.yMax);\n\n\n\nTo get the bbox in pixel coordinates, set \nbbox_mode\n to \nFT_GLYPH_BBOX_TRUNCATE\n.\n\n\nTo get the bbox in grid-fitted pixel coordinates, set \nbbox_mode\n to \nFT_GLYPH_BBOX_PIXELS\n.\n\n\n\n\n\nFT_Glyph_To_Bitmap\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_To_Bitmap\n( \nFT_Glyph\n*       the_glyph,\n                      \nFT_Render_Mode\n  render_mode,\n                      \nFT_Vector\n*      origin,\n                      \nFT_Bool\n         destroy );\n\n\n\n\n\n\nConvert a given glyph object to a bitmap glyph object.\n\n\ninout\n\n\n\n\n\nthe_glyph\n\n\nA pointer to a handle to the target glyph.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nrender_mode\n\n\nAn enumeration that describes how the data is rendered.\n\n\n\n\norigin\n\n\nA pointer to a vector used to translate the glyph image before rendering. Can be\u00a00 (if no translation). The origin is expressed in 26.6 pixels.\n\n\n\n\ndestroy\n\n\nA boolean that indicates that the original glyph image should be destroyed by this function. It is never destroyed in case of error.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function does nothing if the glyph format isn't scalable.\n\n\nThe glyph image is translated with the \u2018origin\u2019 vector before rendering.\n\n\nThe first parameter is a pointer to an \nFT_Glyph\n handle, that will be \nreplaced\n by this function (with newly allocated data). Typically, you would use (omitting error handling):\n\n\n  FT_Glyph        glyph;\n  FT_BitmapGlyph  glyph_bitmap;\n\n\n  // load glyph\n  error = FT_Load_Char( face, glyph_index, FT_LOAD_DEFAULT );\n\n  // extract glyph image\n  error = FT_Get_Glyph( face->glyph, &glyph );\n\n  // convert to a bitmap (default render mode + destroying old)\n  if ( glyph->format != FT_GLYPH_FORMAT_BITMAP )\n  {\n    error = FT_Glyph_To_Bitmap( &glyph, FT_RENDER_MODE_NORMAL,\n                                0, 1 );\n    if ( error ) // `glyph' unchanged\n      ...\n  }\n\n  // access bitmap content by typecasting\n  glyph_bitmap = (FT_BitmapGlyph)glyph;\n\n  // do funny stuff with it, like blitting/drawing\n  ...\n\n  // discard glyph image (bitmap or not)\n  FT_Done_Glyph( glyph );\n\n\n\n\nHere another example, again without error handling:\n\n\n  FT_Glyph  glyphs[MAX_GLYPHS]\n\n\n  ...\n\n  for ( idx = 0; i < MAX_GLYPHS; i++ )\n    error = FT_Load_Glyph( face, idx, FT_LOAD_DEFAULT ) ||\n            FT_Get_Glyph ( face->glyph, &glyphs[idx] );\n\n  ...\n\n  for ( idx = 0; i < MAX_GLYPHS; i++ )\n  {\n    FT_Glyph  bitmap = glyphs[idx];\n\n\n    ...\n\n    // after this call, `bitmap' no longer points into\n    // the `glyphs' array (and the old value isn't destroyed)\n    FT_Glyph_To_Bitmap( &bitmap, FT_RENDER_MODE_MONO, 0, 0 );\n\n    ...\n\n    FT_Done_Glyph( bitmap );\n  }\n\n  ...\n\n  for ( idx = 0; i < MAX_GLYPHS; i++ )\n    FT_Done_Glyph( glyphs[idx] );\n\n\n\n\n\n\n\nFT_Done_Glyph\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Done_Glyph\n( \nFT_Glyph\n  glyph );\n\n\n\n\n\n\nDestroy a given glyph.\n\n\ninput\n\n\n\n\n\nglyph\n\n\nA handle to the target glyph object.",
            "title": "Glyph Management"
        },
        {
            "location": "/ft2-glyph_management/index.html#glyph-management",
            "text": "",
            "title": "Glyph Management"
        },
        {
            "location": "/ft2-glyph_management/index.html#synopsis",
            "text": "This section contains definitions used to manage glyph data through generic FT_Glyph objects. Each of them can contain a bitmap, a vector outline, or even images in other formats.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   struct  FT_GlyphRec_*   FT_Glyph ;   Handle to an object used to model generic glyph images. It is a pointer to the  FT_GlyphRec  structure and can contain a glyph bitmap or pointer.",
            "title": "FT_Glyph"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyphrec",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   struct   FT_GlyphRec_\n  {\n     FT_Library              library;\n     const  FT_Glyph_Class*  clazz;\n     FT_Glyph_Format         format;\n     FT_Vector               advance;\n\n  }  FT_GlyphRec ;   The root glyph structure contains a given glyph image plus its advance width in 16.16 fixed-point format.",
            "title": "FT_GlyphRec"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_bitmapglyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   struct  FT_BitmapGlyphRec_*   FT_BitmapGlyph ;   A handle to an object used to model a bitmap glyph image. This is a sub-class of  FT_Glyph , and a pointer to  FT_BitmapGlyphRec .",
            "title": "FT_BitmapGlyph"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_bitmapglyphrec",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   struct   FT_BitmapGlyphRec_\n  {\n     FT_GlyphRec   root;\n     FT_Int        left;\n     FT_Int        top;\n     FT_Bitmap     bitmap;\n\n  }  FT_BitmapGlyphRec ;   A structure used for bitmap glyph images. This really is a \u2018sub-class\u2019 of  FT_GlyphRec .",
            "title": "FT_BitmapGlyphRec"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_outlineglyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   struct  FT_OutlineGlyphRec_*   FT_OutlineGlyph ;   A handle to an object used to model an outline glyph image. This is a sub-class of  FT_Glyph , and a pointer to  FT_OutlineGlyphRec .",
            "title": "FT_OutlineGlyph"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_outlineglyphrec",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   struct   FT_OutlineGlyphRec_\n  {\n     FT_GlyphRec   root;\n     FT_Outline    outline;\n\n  }  FT_OutlineGlyphRec ;   A structure used for outline (vectorial) glyph images. This really is a \u2018sub-class\u2019 of  FT_GlyphRec .",
            "title": "FT_OutlineGlyphRec"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_new_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Glyph (  FT_Library        library,\n                 FT_Glyph_Format   format,\n                 FT_Glyph          *aglyph );   A function used to create a new empty glyph image. Note that the created  FT_Glyph  object must be released with  FT_Done_Glyph .",
            "title": "FT_New_Glyph"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_get_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Glyph (  FT_GlyphSlot   slot,\n                 FT_Glyph      *aglyph );   A function used to extract a glyph image from a slot. Note that the created  FT_Glyph  object must be released with  FT_Done_Glyph .",
            "title": "FT_Get_Glyph"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyph_copy",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_Copy (  FT_Glyph    source,\n                  FT_Glyph   *target );   A function used to copy a glyph image. Note that the created  FT_Glyph  object must be released with  FT_Done_Glyph .",
            "title": "FT_Glyph_Copy"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyph_transform",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_Transform (  FT_Glyph     glyph,\n                       FT_Matrix *  matrix,\n                       FT_Vector *  delta );   Transform a glyph image if its format is scalable.",
            "title": "FT_Glyph_Transform"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyph_bbox_mode",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n   typedef   enum   FT_Glyph_BBox_Mode_\n  {\n     FT_GLYPH_BBOX_UNSCALED   = 0,\n     FT_GLYPH_BBOX_SUBPIXELS  = 0,\n     FT_GLYPH_BBOX_GRIDFIT    = 1,\n     FT_GLYPH_BBOX_TRUNCATE   = 2,\n     FT_GLYPH_BBOX_PIXELS     = 3\n\n  }  FT_Glyph_BBox_Mode ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_Glyph_BBox_Mode ' values instead                   */\n# define  ft_glyph_bbox_unscaled    FT_GLYPH_BBOX_UNSCALED \n# define  ft_glyph_bbox_subpixels   FT_GLYPH_BBOX_SUBPIXELS \n# define  ft_glyph_bbox_gridfit     FT_GLYPH_BBOX_GRIDFIT \n# define  ft_glyph_bbox_truncate    FT_GLYPH_BBOX_TRUNCATE \n# define  ft_glyph_bbox_pixels      FT_GLYPH_BBOX_PIXELS    The mode how the values of  FT_Glyph_Get_CBox  are returned.",
            "title": "FT_Glyph_BBox_Mode"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyph_get_cbox",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  void  )\n   FT_Glyph_Get_CBox (  FT_Glyph   glyph,\n                      FT_UInt    bbox_mode,\n                      FT_BBox   *acbox );   Return a glyph's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).  Computing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.",
            "title": "FT_Glyph_Get_CBox"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_glyph_to_bitmap",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_To_Bitmap (  FT_Glyph *       the_glyph,\n                       FT_Render_Mode   render_mode,\n                       FT_Vector *      origin,\n                       FT_Bool          destroy );   Convert a given glyph object to a bitmap glyph object.",
            "title": "FT_Glyph_To_Bitmap"
        },
        {
            "location": "/ft2-glyph_management/index.html#ft_done_glyph",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  void  )\n   FT_Done_Glyph (  FT_Glyph   glyph );   Destroy a given glyph.",
            "title": "FT_Done_Glyph"
        },
        {
            "location": "/ft2-mac_specific/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Mac Specific Interface\n\n\n\n\nMac Specific Interface\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe following definitions are only available if FreeType is compiled on a Macintosh.\n\n\nFT_New_Face_From_FOND\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face_From_FOND\n( \nFT_Library\n  library,\n                         Handle      fond,\n                         \nFT_Long\n     face_index,\n                         \nFT_Face\n    *aface )\n                       FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\n\n\nCreate a new face object from a FOND resource.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nfond\n\n\nA FOND resource.\n\n\n\n\nface_index\n\n\nOnly supported for the -1 \u2018sanity check\u2019 special case.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nexample\n\n\n\nThis function can be used to create \nFT_Face\n objects from fonts that are installed in the system as follows.\n\n  fond  = GetResource( 'FOND', fontName );\n  error = FT_New_Face_From_FOND( library, fond, 0, &face );\n\n\n\n\n\n\nFT_GetFile_From_Mac_Name\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GetFile_From_Mac_Name\n( \nconst\n \nchar\n*  fontName,\n                            FSSpec*      pathSpec,\n                            \nFT_Long\n*     face_index )\n                          FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\n\n\nReturn an FSSpec for the disk file containing the named font.\n\n\ninput\n\n\n\n\n\nfontName\n\n\nMac OS name of the font (e.g., Times New Roman Bold).\n\n\n\n\n\n\n\noutput\n\n\n\n\n\npathSpec\n\n\nFSSpec to the file. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\n\nface_index\n\n\nIndex of the face. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_GetFile_From_Mac_ATS_Name\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GetFile_From_Mac_ATS_Name\n( \nconst\n \nchar\n*  fontName,\n                                FSSpec*      pathSpec,\n                                \nFT_Long\n*     face_index )\n                              FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\n\n\nReturn an FSSpec for the disk file containing the named font.\n\n\ninput\n\n\n\n\n\nfontName\n\n\nMac OS name of the font in ATS framework.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\npathSpec\n\n\nFSSpec to the file. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\n\nface_index\n\n\nIndex of the face. For passing to \nFT_New_Face_From_FSSpec\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_GetFilePath_From_Mac_ATS_Name\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GetFilePath_From_Mac_ATS_Name\n( \nconst\n \nchar\n*  fontName,\n                                    UInt8*       path,\n                                    UInt32       maxPathSize,\n                                    \nFT_Long\n*     face_index )\n                                  FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\n\n\nReturn a pathname of the disk file and face index for given font name that is handled by ATS framework.\n\n\ninput\n\n\n\n\n\nfontName\n\n\nMac OS name of the font in ATS framework.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\npath\n\n\nBuffer to store pathname of the file. For passing to \nFT_New_Face\n. The client must allocate this buffer before calling this function.\n\n\n\n\nmaxPathSize\n\n\nLengths of the buffer \u2018path\u2019 that client allocated.\n\n\n\n\nface_index\n\n\nIndex of the face. For passing to \nFT_New_Face\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_New_Face_From_FSSpec\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face_From_FSSpec\n( \nFT_Library\n     library,\n                           \nconst\n FSSpec  *spec,\n                           \nFT_Long\n        face_index,\n                           \nFT_Face\n       *aface )\n                         FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\n\n\nCreate a new face object from a given resource and typeface index using an FSSpec to the font file.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nspec\n\n\nFSSpec to the font file.\n\n\n\n\nface_index\n\n\nThe index of the face within the resource. The first face has index\u00a00.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nFT_New_Face_From_FSSpec\n is identical to \nFT_New_Face\n except it accepts an FSSpec instead of a path.\n\n\n\n\n\nFT_New_Face_From_FSRef\n\u00b6\n\n\nDefined in FT_MAC_H (freetype/ftmac.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Face_From_FSRef\n( \nFT_Library\n    library,\n                          \nconst\n FSRef  *ref,\n                          \nFT_Long\n       face_index,\n                          \nFT_Face\n      *aface )\n                        FT_DEPRECATED_ATTRIBUTE;\n\n\n\n\n\n\nCreate a new face object from a given resource and typeface index using an FSRef to the font file.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library resource.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nspec\n\n\nFSRef to the font file.\n\n\n\n\nface_index\n\n\nThe index of the face within the resource. The first face has index\u00a00.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to a new face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nFT_New_Face_From_FSRef\n is identical to \nFT_New_Face\n except it accepts an FSRef instead of a path.",
            "title": "Mac Specific Interface"
        },
        {
            "location": "/ft2-mac_specific/index.html#mac-specific-interface",
            "text": "",
            "title": "Mac Specific Interface"
        },
        {
            "location": "/ft2-mac_specific/index.html#synopsis",
            "text": "The following definitions are only available if FreeType is compiled on a Macintosh.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-mac_specific/index.html#ft_new_face_from_fond",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face_From_FOND (  FT_Library   library,\n                         Handle      fond,\n                          FT_Long      face_index,\n                          FT_Face     *aface )\n                       FT_DEPRECATED_ATTRIBUTE;   Create a new face object from a FOND resource.",
            "title": "FT_New_Face_From_FOND"
        },
        {
            "location": "/ft2-mac_specific/index.html#ft_getfile_from_mac_name",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_GetFile_From_Mac_Name (  const   char *  fontName,\n                            FSSpec*      pathSpec,\n                             FT_Long *     face_index )\n                          FT_DEPRECATED_ATTRIBUTE;   Return an FSSpec for the disk file containing the named font.",
            "title": "FT_GetFile_From_Mac_Name"
        },
        {
            "location": "/ft2-mac_specific/index.html#ft_getfile_from_mac_ats_name",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_GetFile_From_Mac_ATS_Name (  const   char *  fontName,\n                                FSSpec*      pathSpec,\n                                 FT_Long *     face_index )\n                              FT_DEPRECATED_ATTRIBUTE;   Return an FSSpec for the disk file containing the named font.",
            "title": "FT_GetFile_From_Mac_ATS_Name"
        },
        {
            "location": "/ft2-mac_specific/index.html#ft_getfilepath_from_mac_ats_name",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_GetFilePath_From_Mac_ATS_Name (  const   char *  fontName,\n                                    UInt8*       path,\n                                    UInt32       maxPathSize,\n                                     FT_Long *     face_index )\n                                  FT_DEPRECATED_ATTRIBUTE;   Return a pathname of the disk file and face index for given font name that is handled by ATS framework.",
            "title": "FT_GetFilePath_From_Mac_ATS_Name"
        },
        {
            "location": "/ft2-mac_specific/index.html#ft_new_face_from_fsspec",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face_From_FSSpec (  FT_Library      library,\n                            const  FSSpec  *spec,\n                            FT_Long         face_index,\n                            FT_Face        *aface )\n                         FT_DEPRECATED_ATTRIBUTE;   Create a new face object from a given resource and typeface index using an FSSpec to the font file.",
            "title": "FT_New_Face_From_FSSpec"
        },
        {
            "location": "/ft2-mac_specific/index.html#ft_new_face_from_fsref",
            "text": "Defined in FT_MAC_H (freetype/ftmac.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Face_From_FSRef (  FT_Library     library,\n                           const  FSRef  *ref,\n                           FT_Long        face_index,\n                           FT_Face       *aface )\n                        FT_DEPRECATED_ATTRIBUTE;   Create a new face object from a given resource and typeface index using an FSRef to the font file.",
            "title": "FT_New_Face_From_FSRef"
        },
        {
            "location": "/ft2-sizes_management/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Size Management\n\n\n\n\nSize Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nWhen creating a new face object (e.g., with \nFT_New_Face\n), an \nFT_Size\n object is automatically created and used to store all pixel-size dependent information, available in the \nface->size\n field.\n\n\nIt is however possible to create more sizes for a given face, mostly in order to manage several character pixel sizes of the same font family and style. See \nFT_New_Size\n and \nFT_Done_Size\n.\n\n\nNote that \nFT_Set_Pixel_Sizes\n and \nFT_Set_Char_Size\n only modify the contents of the current \u2018active\u2019 size; you thus need to use \nFT_Activate_Size\n to change it.\n\n\n99% of applications won't need the functions provided here, especially if they use the caching sub-system, so be cautious when using these.\n\n\nFT_New_Size\n\u00b6\n\n\nDefined in FT_SIZES_H (freetype/ftsizes.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Size\n( \nFT_Face\n   face,\n               \nFT_Size\n*  size );\n\n\n\n\n\n\nCreate a new size object from a given face object.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to a parent face object.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nasize\n\n\nA handle to a new size object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou need to call \nFT_Activate_Size\n in order to select the new size for upcoming calls to \nFT_Set_Pixel_Sizes\n, \nFT_Set_Char_Size\n, \nFT_Load_Glyph\n, \nFT_Load_Char\n, etc.\n\n\n\n\n\nFT_Done_Size\n\u00b6\n\n\nDefined in FT_SIZES_H (freetype/ftsizes.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_Size\n( \nFT_Size\n  size );\n\n\n\n\n\n\nDiscard a given size object. Note that \nFT_Done_Face\n automatically discards all size objects allocated with \nFT_New_Size\n.\n\n\ninput\n\n\n\n\n\nsize\n\n\nA handle to a target size object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Activate_Size\n\u00b6\n\n\nDefined in FT_SIZES_H (freetype/ftsizes.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Activate_Size\n( \nFT_Size\n  size );\n\n\n\n\n\n\nEven though it is possible to create several size objects for a given face (see \nFT_New_Size\n for details), functions like \nFT_Load_Glyph\n or \nFT_Load_Char\n only use the one that has been activated last to determine the \u2018current character pixel size\u2019.\n\n\nThis function can be used to \u2018activate\u2019 a previously created size object.\n\n\ninput\n\n\n\n\n\nsize\n\n\nA handle to a target size object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf \u2018face\u2019 is the size's parent face object, this function changes the value of \nface->size\n to the input size handle.",
            "title": "Size Management"
        },
        {
            "location": "/ft2-sizes_management/index.html#size-management",
            "text": "",
            "title": "Size Management"
        },
        {
            "location": "/ft2-sizes_management/index.html#synopsis",
            "text": "When creating a new face object (e.g., with  FT_New_Face ), an  FT_Size  object is automatically created and used to store all pixel-size dependent information, available in the  face->size  field.  It is however possible to create more sizes for a given face, mostly in order to manage several character pixel sizes of the same font family and style. See  FT_New_Size  and  FT_Done_Size .  Note that  FT_Set_Pixel_Sizes  and  FT_Set_Char_Size  only modify the contents of the current \u2018active\u2019 size; you thus need to use  FT_Activate_Size  to change it.  99% of applications won't need the functions provided here, especially if they use the caching sub-system, so be cautious when using these.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-sizes_management/index.html#ft_new_size",
            "text": "Defined in FT_SIZES_H (freetype/ftsizes.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Size (  FT_Face    face,\n                FT_Size *  size );   Create a new size object from a given face object.",
            "title": "FT_New_Size"
        },
        {
            "location": "/ft2-sizes_management/index.html#ft_done_size",
            "text": "Defined in FT_SIZES_H (freetype/ftsizes.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Done_Size (  FT_Size   size );   Discard a given size object. Note that  FT_Done_Face  automatically discards all size objects allocated with  FT_New_Size .",
            "title": "FT_Done_Size"
        },
        {
            "location": "/ft2-sizes_management/index.html#ft_activate_size",
            "text": "Defined in FT_SIZES_H (freetype/ftsizes.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Activate_Size (  FT_Size   size );   Even though it is possible to create several size objects for a given face (see  FT_New_Size  for details), functions like  FT_Load_Glyph  or  FT_Load_Char  only use the one that has been activated last to determine the \u2018current character pixel size\u2019.  This function can be used to \u2018activate\u2019 a previously created size object.",
            "title": "FT_Activate_Size"
        },
        {
            "location": "/ft2-header_file_macros/index.html",
            "text": "Docs\n \u00bb \nCore API\n \u00bb Header File Macros\n\n\n\n\nHeader File Macros\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe following macros are defined to the name of specific FreeType\u00a02 header files. They can be used directly in #include statements as in:\n\n  #include FT_FREETYPE_H\n  #include FT_MULTIPLE_MASTERS_H\n  #include FT_GLYPH_H\n\n\n\nThere are several reasons why we are now using macros to name public header files. The first one is that such macros are not limited to the infamous 8.3\u00a0naming rule required by DOS (and \nFT_MULTIPLE_MASTERS_H\n is a lot more meaningful than \nftmm.h\n).\n\n\nThe second reason is that it allows for more flexibility in the way FreeType\u00a02 is installed on a given system.\n\n\nFT_CONFIG_CONFIG_H\n\u00b6\n\n\n\n\n\n#\nifndef\n \nFT_CONFIG_CONFIG_H\n\n#\ndefine\n \nFT_CONFIG_CONFIG_H\n  <freetype/config/ftconfig.h>\n#\nendif\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing FreeType\u00a02 configuration data.\n\n\n\n\n\nFT_CONFIG_STANDARD_LIBRARY_H\n\u00b6\n\n\n\n\n\n#\nifndef\n \nFT_CONFIG_STANDARD_LIBRARY_H\n\n#\ndefine\n \nFT_CONFIG_STANDARD_LIBRARY_H\n  <freetype/config/ftstdlib.h>\n#\nendif\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing FreeType\u00a02 interface to the standard C library functions.\n\n\n\n\n\nFT_CONFIG_OPTIONS_H\n\u00b6\n\n\n\n\n\n#\nifndef\n \nFT_CONFIG_OPTIONS_H\n\n#\ndefine\n \nFT_CONFIG_OPTIONS_H\n  <freetype/config/ftoption.h>\n#\nendif\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing FreeType\u00a02 project-specific configuration options.\n\n\n\n\n\nFT_CONFIG_MODULES_H\n\u00b6\n\n\n\n\n\n#\nifndef\n \nFT_CONFIG_MODULES_H\n\n#\ndefine\n \nFT_CONFIG_MODULES_H\n  <freetype/config/ftmodule.h>\n#\nendif\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the list of FreeType\u00a02 modules that are statically linked to new library instances in \nFT_Init_FreeType\n.\n\n\n\n\n\nFT_FREETYPE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_FREETYPE_H\n  <freetype/freetype.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the base FreeType\u00a02 API.\n\n\n\n\n\nFT_ERRORS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_ERRORS_H\n  <freetype/fterrors.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the list of FreeType\u00a02 error codes (and messages).\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_MODULE_ERRORS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_MODULE_ERRORS_H\n  <freetype/ftmoderr.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the list of FreeType\u00a02 module error offsets (and messages).\n\n\n\n\n\nFT_SYSTEM_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_SYSTEM_H\n  <freetype/ftsystem.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 interface to low-level operations (i.e., memory management and stream i/o).\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_IMAGE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_IMAGE_H\n  <freetype/ftimage.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing type definitions related to glyph images (i.e., bitmaps, outlines, scan-converter parameters).\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_TYPES_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TYPES_H\n  <freetype/fttypes.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the basic data types defined by FreeType\u00a02.\n\n\nIt is included by \nFT_FREETYPE_H\n.\n\n\n\n\n\nFT_LIST_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_LIST_H\n  <freetype/ftlist.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the list management API of FreeType\u00a02.\n\n\n(Most applications will never need to include this file.)\n\n\n\n\n\nFT_OUTLINE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_OUTLINE_H\n  <freetype/ftoutln.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the scalable outline management API of FreeType\u00a02.\n\n\n\n\n\nFT_SIZES_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_SIZES_H\n  <freetype/ftsizes.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the API which manages multiple \nFT_Size\n objects per face.\n\n\n\n\n\nFT_MODULE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_MODULE_H\n  <freetype/ftmodapi.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the module management API of FreeType\u00a02.\n\n\n\n\n\nFT_RENDER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_RENDER_H\n  <freetype/ftrender.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the renderer module management API of FreeType\u00a02.\n\n\n\n\n\nFT_DRIVER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_DRIVER_H\n  <freetype/ftdriver.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the driver modules.\n\n\n\n\n\nFT_AUTOHINTER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_AUTOHINTER_H\n  \nFT_DRIVER_H\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the auto-hinting module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_CFF_DRIVER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_CFF_DRIVER_H\n  \nFT_DRIVER_H\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the CFF driver module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_TRUETYPE_DRIVER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TRUETYPE_DRIVER_H\n  \nFT_DRIVER_H\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the TrueType driver module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_PCF_DRIVER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PCF_DRIVER_H\n  \nFT_DRIVER_H\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing structures and macros related to the PCF driver module.\n\n\nDeprecated since version 2.9; use \nFT_DRIVER_H\n instead.\n\n\n\n\n\nFT_TYPE1_TABLES_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TYPE1_TABLES_H\n  <freetype/t1tables.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the types and API specific to the Type\u00a01 format.\n\n\n\n\n\nFT_TRUETYPE_IDS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TRUETYPE_IDS_H\n  <freetype/ttnameid.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the enumeration values which identify name strings, languages, encodings, etc. This file really contains a \nlarge\n set of constant macro definitions, taken from the TrueType and OpenType specifications.\n\n\n\n\n\nFT_TRUETYPE_TABLES_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TRUETYPE_TABLES_H\n  <freetype/tttables.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the types and API specific to the TrueType (as well as OpenType) format.\n\n\n\n\n\nFT_TRUETYPE_TAGS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TRUETYPE_TAGS_H\n  <freetype/tttags.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of TrueType four-byte \u2018tags\u2019 which identify blocks in SFNT-based font formats (i.e., TrueType and OpenType).\n\n\n\n\n\nFT_BDF_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_BDF_H\n  <freetype/ftbdf.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which accesses BDF-specific strings from a face.\n\n\n\n\n\nFT_CID_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_CID_H\n  <freetype/ftcid.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which access CID font information from a face.\n\n\n\n\n\nFT_GZIP_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_GZIP_H\n  <freetype/ftgzip.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports gzip-compressed files.\n\n\n\n\n\nFT_LZW_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_LZW_H\n  <freetype/ftlzw.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports LZW-compressed files.\n\n\n\n\n\nFT_BZIP2_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_BZIP2_H\n  <freetype/ftbzip2.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports bzip2-compressed files.\n\n\n\n\n\nFT_WINFONTS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_WINFONTS_H\n   <freetype/ftwinfnt.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the definitions of an API which supports Windows FNT files.\n\n\n\n\n\nFT_GLYPH_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_GLYPH_H\n  <freetype/ftglyph.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional glyph management component.\n\n\n\n\n\nFT_BITMAP_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_BITMAP_H\n  <freetype/ftbitmap.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional bitmap conversion component.\n\n\n\n\n\nFT_BBOX_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_BBOX_H\n  <freetype/ftbbox.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional exact bounding box computation routines.\n\n\n\n\n\nFT_CACHE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_CACHE_H\n  <freetype/ftcache.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the API of the optional FreeType\u00a02 cache sub-system.\n\n\n\n\n\nFT_MAC_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_MAC_H\n  <freetype/ftmac.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the Macintosh-specific FreeType\u00a02 API. The latter is used to access fonts embedded in resource forks.\n\n\nThis header file must be explicitly included by client applications compiled on the Mac (note that the base API still works though).\n\n\n\n\n\nFT_MULTIPLE_MASTERS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_MULTIPLE_MASTERS_H\n  <freetype/ftmm.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the optional multiple-masters management API of FreeType\u00a02.\n\n\n\n\n\nFT_SFNT_NAMES_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_SFNT_NAMES_H\n  <freetype/ftsnames.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the optional FreeType\u00a02 API which accesses embedded \u2018name\u2019 strings in SFNT-based font formats (i.e., TrueType and OpenType).\n\n\n\n\n\nFT_OPENTYPE_VALIDATE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_OPENTYPE_VALIDATE_H\n  <freetype/ftotval.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF).\n\n\n\n\n\nFT_GX_VALIDATE_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_GX_VALIDATE_H\n  <freetype/ftgxval.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates TrueTypeGX/AAT tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop).\n\n\n\n\n\nFT_PFR_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PFR_H\n  <freetype/ftpfr.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which accesses PFR-specific data.\n\n\n\n\n\nFT_STROKER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_STROKER_H\n  <freetype/ftstroke.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions to stroke outline paths.\n\n\n\n\n\nFT_SYNTHESIS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_SYNTHESIS_H\n  <freetype/ftsynth.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs artificial obliquing and emboldening.\n\n\n\n\n\nFT_FONT_FORMATS_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_FONT_FORMATS_H\n  <freetype/ftfntfmt.h>\n\n  /* deprecated */\n#\ndefine\n FT_XFREE86_H  \nFT_FONT_FORMATS_H\n\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions specific to font formats.\n\n\n\n\n\nFT_TRIGONOMETRY_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_TRIGONOMETRY_H\n  <freetype/fttrigon.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs trigonometric computations (e.g., cosines and arc tangents).\n\n\n\n\n\nFT_LCD_FILTER_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_LCD_FILTER_H\n  <freetype/ftlcdfil.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs color filtering for subpixel rendering.\n\n\n\n\n\nFT_INCREMENTAL_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_INCREMENTAL_H\n  <freetype/ftincrem.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which performs incremental glyph loading.\n\n\n\n\n\nFT_GASP_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_GASP_H\n  <freetype/ftgasp.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which returns entries from the TrueType GASP table.\n\n\n\n\n\nFT_ADVANCES_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_ADVANCES_H\n  <freetype/ftadvanc.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which returns individual and ranged glyph advances.\n\n\n\n\n\nFT_COLOR_H\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_COLOR_H\n  <freetype/ftcolor.h>\n\n\n\n\n\n\nA macro used in #include statements to name the file containing the FreeType\u00a02 API which handles the OpenType CPAL table.",
            "title": "Header File Macros"
        },
        {
            "location": "/ft2-header_file_macros/index.html#header-file-macros",
            "text": "",
            "title": "Header File Macros"
        },
        {
            "location": "/ft2-header_file_macros/index.html#synopsis",
            "text": "The following macros are defined to the name of specific FreeType\u00a02 header files. They can be used directly in #include statements as in:   #include FT_FREETYPE_H\n  #include FT_MULTIPLE_MASTERS_H\n  #include FT_GLYPH_H  There are several reasons why we are now using macros to name public header files. The first one is that such macros are not limited to the infamous 8.3\u00a0naming rule required by DOS (and  FT_MULTIPLE_MASTERS_H  is a lot more meaningful than  ftmm.h ).  The second reason is that it allows for more flexibility in the way FreeType\u00a02 is installed on a given system.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_config_config_h",
            "text": "# ifndef   FT_CONFIG_CONFIG_H \n# define   FT_CONFIG_CONFIG_H   <freetype/config/ftconfig.h>\n# endif    A macro used in #include statements to name the file containing FreeType\u00a02 configuration data.",
            "title": "FT_CONFIG_CONFIG_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_config_standard_library_h",
            "text": "# ifndef   FT_CONFIG_STANDARD_LIBRARY_H \n# define   FT_CONFIG_STANDARD_LIBRARY_H   <freetype/config/ftstdlib.h>\n# endif    A macro used in #include statements to name the file containing FreeType\u00a02 interface to the standard C library functions.",
            "title": "FT_CONFIG_STANDARD_LIBRARY_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_config_options_h",
            "text": "# ifndef   FT_CONFIG_OPTIONS_H \n# define   FT_CONFIG_OPTIONS_H   <freetype/config/ftoption.h>\n# endif    A macro used in #include statements to name the file containing FreeType\u00a02 project-specific configuration options.",
            "title": "FT_CONFIG_OPTIONS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_config_modules_h",
            "text": "# ifndef   FT_CONFIG_MODULES_H \n# define   FT_CONFIG_MODULES_H   <freetype/config/ftmodule.h>\n# endif    A macro used in #include statements to name the file containing the list of FreeType\u00a02 modules that are statically linked to new library instances in  FT_Init_FreeType .",
            "title": "FT_CONFIG_MODULES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_freetype_h",
            "text": "# define   FT_FREETYPE_H   <freetype/freetype.h>   A macro used in #include statements to name the file containing the base FreeType\u00a02 API.",
            "title": "FT_FREETYPE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_errors_h",
            "text": "# define   FT_ERRORS_H   <freetype/fterrors.h>   A macro used in #include statements to name the file containing the list of FreeType\u00a02 error codes (and messages).  It is included by  FT_FREETYPE_H .",
            "title": "FT_ERRORS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_module_errors_h",
            "text": "# define   FT_MODULE_ERRORS_H   <freetype/ftmoderr.h>   A macro used in #include statements to name the file containing the list of FreeType\u00a02 module error offsets (and messages).",
            "title": "FT_MODULE_ERRORS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_system_h",
            "text": "# define   FT_SYSTEM_H   <freetype/ftsystem.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 interface to low-level operations (i.e., memory management and stream i/o).  It is included by  FT_FREETYPE_H .",
            "title": "FT_SYSTEM_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_image_h",
            "text": "# define   FT_IMAGE_H   <freetype/ftimage.h>   A macro used in #include statements to name the file containing type definitions related to glyph images (i.e., bitmaps, outlines, scan-converter parameters).  It is included by  FT_FREETYPE_H .",
            "title": "FT_IMAGE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_types_h",
            "text": "# define   FT_TYPES_H   <freetype/fttypes.h>   A macro used in #include statements to name the file containing the basic data types defined by FreeType\u00a02.  It is included by  FT_FREETYPE_H .",
            "title": "FT_TYPES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_list_h",
            "text": "# define   FT_LIST_H   <freetype/ftlist.h>   A macro used in #include statements to name the file containing the list management API of FreeType\u00a02.  (Most applications will never need to include this file.)",
            "title": "FT_LIST_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_outline_h",
            "text": "# define   FT_OUTLINE_H   <freetype/ftoutln.h>   A macro used in #include statements to name the file containing the scalable outline management API of FreeType\u00a02.",
            "title": "FT_OUTLINE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_sizes_h",
            "text": "# define   FT_SIZES_H   <freetype/ftsizes.h>   A macro used in #include statements to name the file containing the API which manages multiple  FT_Size  objects per face.",
            "title": "FT_SIZES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_module_h",
            "text": "# define   FT_MODULE_H   <freetype/ftmodapi.h>   A macro used in #include statements to name the file containing the module management API of FreeType\u00a02.",
            "title": "FT_MODULE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_render_h",
            "text": "# define   FT_RENDER_H   <freetype/ftrender.h>   A macro used in #include statements to name the file containing the renderer module management API of FreeType\u00a02.",
            "title": "FT_RENDER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_driver_h",
            "text": "# define   FT_DRIVER_H   <freetype/ftdriver.h>   A macro used in #include statements to name the file containing structures and macros related to the driver modules.",
            "title": "FT_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_autohinter_h",
            "text": "# define   FT_AUTOHINTER_H    FT_DRIVER_H    A macro used in #include statements to name the file containing structures and macros related to the auto-hinting module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_AUTOHINTER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_cff_driver_h",
            "text": "# define   FT_CFF_DRIVER_H    FT_DRIVER_H    A macro used in #include statements to name the file containing structures and macros related to the CFF driver module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_CFF_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_truetype_driver_h",
            "text": "# define   FT_TRUETYPE_DRIVER_H    FT_DRIVER_H    A macro used in #include statements to name the file containing structures and macros related to the TrueType driver module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_TRUETYPE_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_pcf_driver_h",
            "text": "# define   FT_PCF_DRIVER_H    FT_DRIVER_H    A macro used in #include statements to name the file containing structures and macros related to the PCF driver module.  Deprecated since version 2.9; use  FT_DRIVER_H  instead.",
            "title": "FT_PCF_DRIVER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_type1_tables_h",
            "text": "# define   FT_TYPE1_TABLES_H   <freetype/t1tables.h>   A macro used in #include statements to name the file containing the types and API specific to the Type\u00a01 format.",
            "title": "FT_TYPE1_TABLES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_truetype_ids_h",
            "text": "# define   FT_TRUETYPE_IDS_H   <freetype/ttnameid.h>   A macro used in #include statements to name the file containing the enumeration values which identify name strings, languages, encodings, etc. This file really contains a  large  set of constant macro definitions, taken from the TrueType and OpenType specifications.",
            "title": "FT_TRUETYPE_IDS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_truetype_tables_h",
            "text": "# define   FT_TRUETYPE_TABLES_H   <freetype/tttables.h>   A macro used in #include statements to name the file containing the types and API specific to the TrueType (as well as OpenType) format.",
            "title": "FT_TRUETYPE_TABLES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_truetype_tags_h",
            "text": "# define   FT_TRUETYPE_TAGS_H   <freetype/tttags.h>   A macro used in #include statements to name the file containing the definitions of TrueType four-byte \u2018tags\u2019 which identify blocks in SFNT-based font formats (i.e., TrueType and OpenType).",
            "title": "FT_TRUETYPE_TAGS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_bdf_h",
            "text": "# define   FT_BDF_H   <freetype/ftbdf.h>   A macro used in #include statements to name the file containing the definitions of an API which accesses BDF-specific strings from a face.",
            "title": "FT_BDF_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_cid_h",
            "text": "# define   FT_CID_H   <freetype/ftcid.h>   A macro used in #include statements to name the file containing the definitions of an API which access CID font information from a face.",
            "title": "FT_CID_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_gzip_h",
            "text": "# define   FT_GZIP_H   <freetype/ftgzip.h>   A macro used in #include statements to name the file containing the definitions of an API which supports gzip-compressed files.",
            "title": "FT_GZIP_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_lzw_h",
            "text": "# define   FT_LZW_H   <freetype/ftlzw.h>   A macro used in #include statements to name the file containing the definitions of an API which supports LZW-compressed files.",
            "title": "FT_LZW_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_bzip2_h",
            "text": "# define   FT_BZIP2_H   <freetype/ftbzip2.h>   A macro used in #include statements to name the file containing the definitions of an API which supports bzip2-compressed files.",
            "title": "FT_BZIP2_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_winfonts_h",
            "text": "# define   FT_WINFONTS_H    <freetype/ftwinfnt.h>   A macro used in #include statements to name the file containing the definitions of an API which supports Windows FNT files.",
            "title": "FT_WINFONTS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_glyph_h",
            "text": "# define   FT_GLYPH_H   <freetype/ftglyph.h>   A macro used in #include statements to name the file containing the API of the optional glyph management component.",
            "title": "FT_GLYPH_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_bitmap_h",
            "text": "# define   FT_BITMAP_H   <freetype/ftbitmap.h>   A macro used in #include statements to name the file containing the API of the optional bitmap conversion component.",
            "title": "FT_BITMAP_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_bbox_h",
            "text": "# define   FT_BBOX_H   <freetype/ftbbox.h>   A macro used in #include statements to name the file containing the API of the optional exact bounding box computation routines.",
            "title": "FT_BBOX_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_cache_h",
            "text": "# define   FT_CACHE_H   <freetype/ftcache.h>   A macro used in #include statements to name the file containing the API of the optional FreeType\u00a02 cache sub-system.",
            "title": "FT_CACHE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_mac_h",
            "text": "# define   FT_MAC_H   <freetype/ftmac.h>   A macro used in #include statements to name the file containing the Macintosh-specific FreeType\u00a02 API. The latter is used to access fonts embedded in resource forks.  This header file must be explicitly included by client applications compiled on the Mac (note that the base API still works though).",
            "title": "FT_MAC_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_multiple_masters_h",
            "text": "# define   FT_MULTIPLE_MASTERS_H   <freetype/ftmm.h>   A macro used in #include statements to name the file containing the optional multiple-masters management API of FreeType\u00a02.",
            "title": "FT_MULTIPLE_MASTERS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_sfnt_names_h",
            "text": "# define   FT_SFNT_NAMES_H   <freetype/ftsnames.h>   A macro used in #include statements to name the file containing the optional FreeType\u00a02 API which accesses embedded \u2018name\u2019 strings in SFNT-based font formats (i.e., TrueType and OpenType).",
            "title": "FT_SFNT_NAMES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_opentype_validate_h",
            "text": "# define   FT_OPENTYPE_VALIDATE_H   <freetype/ftotval.h>   A macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF).",
            "title": "FT_OPENTYPE_VALIDATE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_gx_validate_h",
            "text": "# define   FT_GX_VALIDATE_H   <freetype/ftgxval.h>   A macro used in #include statements to name the file containing the optional FreeType\u00a02 API which validates TrueTypeGX/AAT tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop).",
            "title": "FT_GX_VALIDATE_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_pfr_h",
            "text": "# define   FT_PFR_H   <freetype/ftpfr.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which accesses PFR-specific data.",
            "title": "FT_PFR_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_stroker_h",
            "text": "# define   FT_STROKER_H   <freetype/ftstroke.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions to stroke outline paths.",
            "title": "FT_STROKER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_synthesis_h",
            "text": "# define   FT_SYNTHESIS_H   <freetype/ftsynth.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs artificial obliquing and emboldening.",
            "title": "FT_SYNTHESIS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_font_formats_h",
            "text": "# define   FT_FONT_FORMATS_H   <freetype/ftfntfmt.h>\n\n  /* deprecated */\n# define  FT_XFREE86_H   FT_FONT_FORMATS_H    A macro used in #include statements to name the file containing the FreeType\u00a02 API which provides functions specific to font formats.",
            "title": "FT_FONT_FORMATS_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_trigonometry_h",
            "text": "# define   FT_TRIGONOMETRY_H   <freetype/fttrigon.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs trigonometric computations (e.g., cosines and arc tangents).",
            "title": "FT_TRIGONOMETRY_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_lcd_filter_h",
            "text": "# define   FT_LCD_FILTER_H   <freetype/ftlcdfil.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs color filtering for subpixel rendering.",
            "title": "FT_LCD_FILTER_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_incremental_h",
            "text": "# define   FT_INCREMENTAL_H   <freetype/ftincrem.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which performs incremental glyph loading.",
            "title": "FT_INCREMENTAL_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_gasp_h",
            "text": "# define   FT_GASP_H   <freetype/ftgasp.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which returns entries from the TrueType GASP table.",
            "title": "FT_GASP_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_advances_h",
            "text": "# define   FT_ADVANCES_H   <freetype/ftadvanc.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which returns individual and ranged glyph advances.",
            "title": "FT_ADVANCES_H"
        },
        {
            "location": "/ft2-header_file_macros/index.html#ft_color_h",
            "text": "# define   FT_COLOR_H   <freetype/ftcolor.h>   A macro used in #include statements to name the file containing the FreeType\u00a02 API which handles the OpenType CPAL table.",
            "title": "FT_COLOR_H"
        },
        {
            "location": "/ft2-multiple_masters/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb Multiple Masters\n\n\n\n\nMultiple Masters\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe following types and functions are used to manage Multiple Master fonts, i.e., the selection of specific design instances by setting design axis coordinates.\n\n\nBesides Adobe MM fonts, the interface supports Apple's TrueType GX and OpenType variation fonts. Some of the routines only work with Adobe MM fonts, others will work with all three types. They are similar enough that a consistent interface makes sense.\n\n\nFT_MM_Axis\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_MM_Axis_\n  {\n    \nFT_String\n*  name;\n    \nFT_Long\n     minimum;\n    \nFT_Long\n     maximum;\n\n  } \nFT_MM_Axis\n;\n\n\n\n\n\n\nA structure to model a given axis in design space for Multiple Masters fonts.\n\n\nThis structure can't be used for TrueType GX or OpenType variation fonts.\n\n\nfields\n\n\n\n\n\nname\n\n\nThe axis's name.\n\n\n\n\nminimum\n\n\nThe axis's minimum design coordinate.\n\n\n\n\nmaximum\n\n\nThe axis's maximum design coordinate.\n\n\n\n\n\n\n\n\n\n\nFT_Multi_Master\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Multi_Master_\n  {\n    \nFT_UInt\n     num_axis;\n    \nFT_UInt\n     num_designs;\n    \nFT_MM_Axis\n  axis[T1_MAX_MM_AXIS];\n\n  } \nFT_Multi_Master\n;\n\n\n\n\n\n\nA structure to model the axes and space of a Multiple Masters font.\n\n\nThis structure can't be used for TrueType GX or OpenType variation fonts.\n\n\nfields\n\n\n\n\n\nnum_axis\n\n\nNumber of axes. Cannot exceed\u00a04.\n\n\n\n\nnum_designs\n\n\nNumber of designs; should be normally 2^num_axis even though the Type\u00a01 specification strangely allows for intermediate designs to be present. This number cannot exceed\u00a016.\n\n\n\n\naxis\n\n\nA table of axis descriptors.\n\n\n\n\n\n\n\n\n\n\nFT_Var_Axis\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Var_Axis_\n  {\n    \nFT_String\n*  name;\n\n    \nFT_Fixed\n    minimum;\n    \nFT_Fixed\n    def;\n    \nFT_Fixed\n    maximum;\n\n    \nFT_ULong\n    tag;\n    \nFT_UInt\n     strid;\n\n  } \nFT_Var_Axis\n;\n\n\n\n\n\n\nA structure to model a given axis in design space for Multiple Masters, TrueType GX, and OpenType variation fonts.\n\n\nfields\n\n\n\n\n\nname\n\n\nThe axis's name. Not always meaningful for TrueType GX or OpenType variation fonts.\n\n\n\n\nminimum\n\n\nThe axis's minimum design coordinate.\n\n\n\n\ndef\n\n\nThe axis's default design coordinate. FreeType computes meaningful default values for Adobe MM fonts.\n\n\n\n\nmaximum\n\n\nThe axis's maximum design coordinate.\n\n\n\n\ntag\n\n\nThe axis's tag (the equivalent to \u2018name\u2019 for TrueType GX and OpenType variation fonts). FreeType provides default values for Adobe MM fonts if possible.\n\n\n\n\nstrid\n\n\nThe axis name entry in the font's \u2018name\u2019 table. This is another (and often better) version of the \u2018name\u2019 field for TrueType GX or OpenType variation fonts. Not meaningful for Adobe MM fonts.\n\n\n\n\n\n\n\nnote\n\n\n\nThe fields \u2018minimum\u2019, \u2018def\u2019, and \u2018maximum\u2019 are 16.16 fractional values for TrueType GX and OpenType variation fonts. For Adobe MM fonts, the values are integers.\n\n\n\n\n\nFT_Var_Named_Style\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Var_Named_Style_\n  {\n    \nFT_Fixed\n*  coords;\n    \nFT_UInt\n    strid;\n    \nFT_UInt\n    psid;   /* since 2.7.1 */\n\n  } \nFT_Var_Named_Style\n;\n\n\n\n\n\n\nA structure to model a named instance in a TrueType GX or OpenType variation font.\n\n\nThis structure can't be used for Adobe MM fonts.\n\n\nfields\n\n\n\n\n\ncoords\n\n\nThe design coordinates for this instance. This is an array with one entry for each axis.\n\n\n\n\nstrid\n\n\nThe entry in \u2018name\u2019 table identifying this instance.\n\n\n\n\npsid\n\n\nThe entry in \u2018name\u2019 table identifying a PostScript name for this instance. Value 0xFFFF indicates a missing entry.\n\n\n\n\n\n\n\n\n\n\nFT_MM_Var\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_MM_Var_\n  {\n    \nFT_UInt\n              num_axis;\n    \nFT_UInt\n              num_designs;\n    \nFT_UInt\n              num_namedstyles;\n    \nFT_Var_Axis\n*         axis;\n    \nFT_Var_Named_Style\n*  namedstyle;\n\n  } \nFT_MM_Var\n;\n\n\n\n\n\n\nA structure to model the axes and space of an Adobe MM, TrueType GX, or OpenType variation font.\n\n\nSome fields are specific to one format and not to the others.\n\n\nfields\n\n\n\n\n\nnum_axis\n\n\nThe number of axes. The maximum value is\u00a04 for Adobe MM fonts; no limit in TrueType GX or OpenType variation fonts.\n\n\n\n\nnum_designs\n\n\nThe number of designs; should be normally 2^num_axis for Adobe MM fonts. Not meaningful for TrueType GX or OpenType variation fonts (where every glyph could have a different number of designs).\n\n\n\n\nnum_namedstyles\n\n\nThe number of named styles; a \u2018named style\u2019 is a tuple of design coordinates that has a string ID (in the \u2018name\u2019 table) associated with it. The font can tell the user that, for example, [Weight=1.5,Width=1.1] is \u2018Bold\u2019. Another name for \u2018named style\u2019 is \u2018named instance\u2019.\nFor Adobe Multiple Masters fonts, this value is always zero because the format does not support named styles.\n\n\n\n\naxis\n\n\nAn axis descriptor table. TrueType GX and OpenType variation fonts contain slightly more data than Adobe MM fonts. Memory management of this pointer is done internally by FreeType.\n\n\n\n\nnamedstyle\n\n\nA named style (instance) table. Only meaningful for TrueType GX and OpenType variation fonts. Memory management of this pointer is done internally by FreeType.\n\n\n\n\n\n\n\n\n\n\nFT_Get_Multi_Master\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Multi_Master\n( \nFT_Face\n           face,\n                       \nFT_Multi_Master\n  *amaster );\n\n\n\n\n\n\nRetrieve a variation descriptor of a given Adobe MM font.\n\n\nThis function can't be used with TrueType GX or OpenType variation fonts.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\namaster\n\n\nThe Multiple Masters descriptor.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Get_MM_Var\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_MM_Var\n( \nFT_Face\n      face,\n                 \nFT_MM_Var\n*  *amaster );\n\n\n\n\n\n\nRetrieve a variation descriptor for a given font.\n\n\nThis function works with all supported variation formats.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\namaster\n\n\nThe variation descriptor. Allocates a data structure, which the user must deallocate with a call to \nFT_Done_MM_Var\n after use.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Done_MM_Var\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_MM_Var\n( \nFT_Library\n   library,\n                  \nFT_MM_Var\n   *amaster );\n\n\n\n\n\n\nFree the memory allocated by \nFT_Get_MM_Var\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle of the face's parent library object that was used in the call to \nFT_Get_MM_Var\n to create \u2018amaster\u2019.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Set_MM_Design_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_MM_Design_Coordinates\n( \nFT_Face\n   face,\n                                \nFT_UInt\n   num_coords,\n                                \nFT_Long\n*  coords );\n\n\n\n\n\n\nFor Adobe MM fonts, choose an interpolated font design through design coordinates.\n\n\nThis function can't be used with TrueType GX or OpenType variation fonts.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nnum_coords\n\n\nThe number of available design coordinates. If it is larger than the number of axes, ignore the excess values. If it is smaller than the number of axes, use default values for the remaining axes.\n\n\n\n\ncoords\n\n\nAn array of design coordinates.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\n[Since 2.8.1] To reset all axes to the default values, call the function with \nnum_coords\n set to zero and \u2018coords\u2019 set to NULL.\n\n\n[Since 2.9] If \nnum_coords\n is larger than zero, this function sets the \nFT_FACE_FLAG_VARIATION\n bit in \nFT_Face\n's \nface_flags\n field (i.e., \nFT_IS_VARIATION\n will return true). If \nnum_coords\n is zero, this bit flag gets unset.\n\n\n\n\n\nFT_Set_Var_Design_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Var_Design_Coordinates\n( \nFT_Face\n    face,\n                                 \nFT_UInt\n    num_coords,\n                                 \nFT_Fixed\n*  coords );\n\n\n\n\n\n\nChoose an interpolated font design through design coordinates.\n\n\nThis function works with all supported variation formats.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nnum_coords\n\n\nThe number of available design coordinates. If it is larger than the number of axes, ignore the excess values. If it is smaller than the number of axes, use default values for the remaining axes.\n\n\n\n\ncoords\n\n\nAn array of design coordinates.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\n[Since 2.8.1] To reset all axes to the default values, call the function with \nnum_coords\n set to zero and \u2018coords\u2019 set to NULL. [Since 2.9] \u2018Default values\u2019 means the currently selected named instance (or the base font if no named instance is selected).\n\n\n[Since 2.9] If \nnum_coords\n is larger than zero, this function sets the \nFT_FACE_FLAG_VARIATION\n bit in \nFT_Face\n's \nface_flags\n field (i.e., \nFT_IS_VARIATION\n will return true). If \nnum_coords\n is zero, this bit flag gets unset.\n\n\n\n\n\nFT_Get_Var_Design_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Var_Design_Coordinates\n( \nFT_Face\n    face,\n                                 \nFT_UInt\n    num_coords,\n                                 \nFT_Fixed\n*  coords );\n\n\n\n\n\n\nGet the design coordinates of the currently selected interpolated font.\n\n\nThis function works with all supported variation formats.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\nnum_coords\n\n\nThe number of design coordinates to retrieve. If it is larger than the number of axes, set the excess values to\u00a00.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ncoords\n\n\nThe design coordinates array.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.7.1\n\n\n\n\n\nFT_Set_MM_Blend_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_MM_Blend_Coordinates\n( \nFT_Face\n    face,\n                               \nFT_UInt\n    num_coords,\n                               \nFT_Fixed\n*  coords );\n\n\n\n\n\n\nChoose an interpolated font design through normalized blend coordinates.\n\n\nThis function works with all supported variation formats.\n\n\ninout\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nnum_coords\n\n\nThe number of available design coordinates. If it is larger than the number of axes, ignore the excess values. If it is smaller than the number of axes, use default values for the remaining axes.\n\n\n\n\ncoords\n\n\nThe design coordinates array (each element must be between 0 and 1.0 for Adobe MM fonts, and between -1.0 and 1.0 for TrueType GX and OpenType variation fonts).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\n[Since 2.8.1] To reset all axes to the default values, call the function with \nnum_coords\n set to zero and \u2018coords\u2019 set to NULL. [Since 2.9] \u2018Default values\u2019 means the currently selected named instance (or the base font if no named instance is selected).\n\n\n[Since 2.9] If \nnum_coords\n is larger than zero, this function sets the \nFT_FACE_FLAG_VARIATION\n bit in \nFT_Face\n's \nface_flags\n field (i.e., \nFT_IS_VARIATION\n will return true). If \nnum_coords\n is zero, this bit flag gets unset.\n\n\n\n\n\nFT_Get_MM_Blend_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_MM_Blend_Coordinates\n( \nFT_Face\n    face,\n                               \nFT_UInt\n    num_coords,\n                               \nFT_Fixed\n*  coords );\n\n\n\n\n\n\nGet the normalized blend coordinates of the currently selected interpolated font.\n\n\nThis function works with all supported variation formats.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\nnum_coords\n\n\nThe number of normalized blend coordinates to retrieve. If it is larger than the number of axes, set the excess values to\u00a00.5 for Adobe MM fonts, and to\u00a00 for TrueType GX and OpenType variation fonts.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ncoords\n\n\nThe normalized blend coordinates array.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.7.1\n\n\n\n\n\nFT_Set_Var_Blend_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Var_Blend_Coordinates\n( \nFT_Face\n    face,\n                                \nFT_UInt\n    num_coords,\n                                \nFT_Fixed\n*  coords );\n\n\n\n\n\n\nThis is another name of \nFT_Set_MM_Blend_Coordinates\n.\n\n\n\n\n\nFT_Get_Var_Blend_Coordinates\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Var_Blend_Coordinates\n( \nFT_Face\n    face,\n                                \nFT_UInt\n    num_coords,\n                                \nFT_Fixed\n*  coords );\n\n\n\n\n\n\nThis is another name of \nFT_Get_MM_Blend_Coordinates\n.\n\n\nsince\n\n\n\n2.7.1\n\n\n\n\n\nFT_VAR_AXIS_FLAG_XXX\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n#\ndefine\n \nFT_VAR_AXIS_FLAG_HIDDEN\n  1\n\n\n\n\n\n\nA list of bit flags used in the return value of \nFT_Get_Var_Axis_Flags\n.\n\n\nvalues\n\n\n\n\n\nFT_VAR_AXIS_FLAG_HIDDEN\n\n\nThe variation axis should not be exposed to user interfaces.\n\n\n\n\n\n\n\nsince\n\n\n\n2.8.1\n\n\n\n\n\nFT_Get_Var_Axis_Flags\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Var_Axis_Flags\n( \nFT_MM_Var\n*  master,\n                         \nFT_UInt\n     axis_index,\n                         \nFT_UInt\n*    flags );\n\n\n\n\n\n\nGet the \u2018flags\u2019 field of an OpenType Variation Axis Record.\n\n\nNot meaningful for Adobe MM fonts (\u2018*flags\u2019 is always zero).\n\n\ninput\n\n\n\n\n\nmaster\n\n\nThe variation descriptor.\n\n\n\n\naxis_index\n\n\nThe index of the requested variation axis.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nflags\n\n\nThe \u2018flags\u2019 field. See \nFT_VAR_AXIS_FLAG_XXX\n for possible values.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.8.1\n\n\n\n\n\nFT_Set_Named_Instance\n\u00b6\n\n\nDefined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Named_Instance\n( \nFT_Face\n  face,\n                         \nFT_UInt\n  instance_index );\n\n\n\n\n\n\nSet or change the current named instance.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\ninstance_index\n\n\nThe index of the requested instance, starting with value 1. If set to value 0, FreeType switches to font access without a named instance.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe function uses the value of \ninstance_index\n to set bits 16-30 of the face's \nface_index\n field. It also resets any variation applied to the font, and the \nFT_FACE_FLAG_VARIATION\n bit of the face's \nface_flags\n field gets reset to zero (i.e., \nFT_IS_VARIATION\n will return false).\n\n\nFor Adobe MM fonts (which don't have named instances) this function simply resets the current face to the default instance.\n\n\nsince\n\n\n\n2.9",
            "title": "Multiple Masters"
        },
        {
            "location": "/ft2-multiple_masters/index.html#multiple-masters",
            "text": "",
            "title": "Multiple Masters"
        },
        {
            "location": "/ft2-multiple_masters/index.html#synopsis",
            "text": "The following types and functions are used to manage Multiple Master fonts, i.e., the selection of specific design instances by setting design axis coordinates.  Besides Adobe MM fonts, the interface supports Apple's TrueType GX and OpenType variation fonts. Some of the routines only work with Adobe MM fonts, others will work with all three types. They are similar enough that a consistent interface makes sense.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_mm_axis",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n   typedef   struct   FT_MM_Axis_\n  {\n     FT_String *  name;\n     FT_Long      minimum;\n     FT_Long      maximum;\n\n  }  FT_MM_Axis ;   A structure to model a given axis in design space for Multiple Masters fonts.  This structure can't be used for TrueType GX or OpenType variation fonts.",
            "title": "FT_MM_Axis"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_multi_master",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n   typedef   struct   FT_Multi_Master_\n  {\n     FT_UInt      num_axis;\n     FT_UInt      num_designs;\n     FT_MM_Axis   axis[T1_MAX_MM_AXIS];\n\n  }  FT_Multi_Master ;   A structure to model the axes and space of a Multiple Masters font.  This structure can't be used for TrueType GX or OpenType variation fonts.",
            "title": "FT_Multi_Master"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_var_axis",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n   typedef   struct   FT_Var_Axis_\n  {\n     FT_String *  name;\n\n     FT_Fixed     minimum;\n     FT_Fixed     def;\n     FT_Fixed     maximum;\n\n     FT_ULong     tag;\n     FT_UInt      strid;\n\n  }  FT_Var_Axis ;   A structure to model a given axis in design space for Multiple Masters, TrueType GX, and OpenType variation fonts.",
            "title": "FT_Var_Axis"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_var_named_style",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n   typedef   struct   FT_Var_Named_Style_\n  {\n     FT_Fixed *  coords;\n     FT_UInt     strid;\n     FT_UInt     psid;   /* since 2.7.1 */\n\n  }  FT_Var_Named_Style ;   A structure to model a named instance in a TrueType GX or OpenType variation font.  This structure can't be used for Adobe MM fonts.",
            "title": "FT_Var_Named_Style"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_mm_var",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n   typedef   struct   FT_MM_Var_\n  {\n     FT_UInt               num_axis;\n     FT_UInt               num_designs;\n     FT_UInt               num_namedstyles;\n     FT_Var_Axis *         axis;\n     FT_Var_Named_Style *  namedstyle;\n\n  }  FT_MM_Var ;   A structure to model the axes and space of an Adobe MM, TrueType GX, or OpenType variation font.  Some fields are specific to one format and not to the others.",
            "title": "FT_MM_Var"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_get_multi_master",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Multi_Master (  FT_Face            face,\n                        FT_Multi_Master   *amaster );   Retrieve a variation descriptor of a given Adobe MM font.  This function can't be used with TrueType GX or OpenType variation fonts.",
            "title": "FT_Get_Multi_Master"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_get_mm_var",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_MM_Var (  FT_Face       face,\n                  FT_MM_Var *  *amaster );   Retrieve a variation descriptor for a given font.  This function works with all supported variation formats.",
            "title": "FT_Get_MM_Var"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_done_mm_var",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Done_MM_Var (  FT_Library    library,\n                   FT_MM_Var    *amaster );   Free the memory allocated by  FT_Get_MM_Var .",
            "title": "FT_Done_MM_Var"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_set_mm_design_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_MM_Design_Coordinates (  FT_Face    face,\n                                 FT_UInt    num_coords,\n                                 FT_Long *  coords );   For Adobe MM fonts, choose an interpolated font design through design coordinates.  This function can't be used with TrueType GX or OpenType variation fonts.",
            "title": "FT_Set_MM_Design_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_set_var_design_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Var_Design_Coordinates (  FT_Face     face,\n                                  FT_UInt     num_coords,\n                                  FT_Fixed *  coords );   Choose an interpolated font design through design coordinates.  This function works with all supported variation formats.",
            "title": "FT_Set_Var_Design_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_get_var_design_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Var_Design_Coordinates (  FT_Face     face,\n                                  FT_UInt     num_coords,\n                                  FT_Fixed *  coords );   Get the design coordinates of the currently selected interpolated font.  This function works with all supported variation formats.",
            "title": "FT_Get_Var_Design_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_set_mm_blend_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_MM_Blend_Coordinates (  FT_Face     face,\n                                FT_UInt     num_coords,\n                                FT_Fixed *  coords );   Choose an interpolated font design through normalized blend coordinates.  This function works with all supported variation formats.",
            "title": "FT_Set_MM_Blend_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_get_mm_blend_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_MM_Blend_Coordinates (  FT_Face     face,\n                                FT_UInt     num_coords,\n                                FT_Fixed *  coords );   Get the normalized blend coordinates of the currently selected interpolated font.  This function works with all supported variation formats.",
            "title": "FT_Get_MM_Blend_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_set_var_blend_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Var_Blend_Coordinates (  FT_Face     face,\n                                 FT_UInt     num_coords,\n                                 FT_Fixed *  coords );   This is another name of  FT_Set_MM_Blend_Coordinates .",
            "title": "FT_Set_Var_Blend_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_get_var_blend_coordinates",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Var_Blend_Coordinates (  FT_Face     face,\n                                 FT_UInt     num_coords,\n                                 FT_Fixed *  coords );   This is another name of  FT_Get_MM_Blend_Coordinates .",
            "title": "FT_Get_Var_Blend_Coordinates"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_var_axis_flag_xxx",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n# define   FT_VAR_AXIS_FLAG_HIDDEN   1   A list of bit flags used in the return value of  FT_Get_Var_Axis_Flags .",
            "title": "FT_VAR_AXIS_FLAG_XXX"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_get_var_axis_flags",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Var_Axis_Flags (  FT_MM_Var *  master,\n                          FT_UInt      axis_index,\n                          FT_UInt *    flags );   Get the \u2018flags\u2019 field of an OpenType Variation Axis Record.  Not meaningful for Adobe MM fonts (\u2018*flags\u2019 is always zero).",
            "title": "FT_Get_Var_Axis_Flags"
        },
        {
            "location": "/ft2-multiple_masters/index.html#ft_set_named_instance",
            "text": "Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Named_Instance (  FT_Face   face,\n                          FT_UInt   instance_index );   Set or change the current named instance.",
            "title": "FT_Set_Named_Instance"
        },
        {
            "location": "/ft2-truetype_tables/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb TrueType Tables\n\n\n\n\nTrueType Tables\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains definitions of some basic tables specific to TrueType and OpenType as well as some routines used to access and process them.\n\n\nTT_Header\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_Header_\n  {\n    \nFT_Fixed\n   Table_Version;\n    \nFT_Fixed\n   Font_Revision;\n\n    \nFT_Long\n    CheckSum_Adjust;\n    \nFT_Long\n    Magic_Number;\n\n    \nFT_UShort\n  Flags;\n    \nFT_UShort\n  Units_Per_EM;\n\n    \nFT_Long\n    Created [2];\n    \nFT_Long\n    Modified[2];\n\n    \nFT_Short\n   xMin;\n    \nFT_Short\n   yMin;\n    \nFT_Short\n   xMax;\n    \nFT_Short\n   yMax;\n\n    \nFT_UShort\n  Mac_Style;\n    \nFT_UShort\n  Lowest_Rec_PPEM;\n\n    \nFT_Short\n   Font_Direction;\n    \nFT_Short\n   Index_To_Loc_Format;\n    \nFT_Short\n   Glyph_Data_Format;\n\n  } \nTT_Header\n;\n\n\n\n\n\n\nA structure to model a TrueType font header table. All fields follow the OpenType specification.\n\n\n\n\n\nTT_HoriHeader\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_HoriHeader_\n  {\n    \nFT_Fixed\n   Version;\n    \nFT_Short\n   Ascender;\n    \nFT_Short\n   Descender;\n    \nFT_Short\n   Line_Gap;\n\n    \nFT_UShort\n  advance_Width_Max;      /* advance width maximum */\n\n    \nFT_Short\n   min_Left_Side_Bearing;  /* minimum left-sb       */\n    \nFT_Short\n   min_Right_Side_Bearing; /* minimum right-sb      */\n    \nFT_Short\n   xMax_Extent;            /* xmax extents          */\n    \nFT_Short\n   caret_Slope_Rise;\n    \nFT_Short\n   caret_Slope_Run;\n    \nFT_Short\n   caret_Offset;\n\n    \nFT_Short\n   Reserved[4];\n\n    \nFT_Short\n   metric_Data_Format;\n    \nFT_UShort\n  number_Of_HMetrics;\n\n    /* The following fields are not defined by the OpenType specification */\n    /* but they are used to connect the metrics header to the relevant    */\n    /* `hmtx' table.                                                      */\n\n    \nvoid\n*      long_metrics;\n    \nvoid\n*      short_metrics;\n\n  } \nTT_HoriHeader\n;\n\n\n\n\n\n\nA structure to model a TrueType horizontal header, the \u2018hhea\u2019 table, as well as the corresponding horizontal metrics table, \u2018hmtx\u2019.\n\n\nfields\n\n\n\n\n\nVersion\n\n\nThe table version.\n\n\n\n\nAscender\n\n\nThe font's ascender, i.e., the distance from the baseline to the top-most of all glyph points found in the font.\nThis value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).\nYou should use the \nsTypoAscender\n field of the \u2018OS/2\u2019 table instead if you want the correct one.\n\n\n\n\nDescender\n\n\nThe font's descender, i.e., the distance from the baseline to the bottom-most of all glyph points found in the font. It is negative.\nThis value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).\nYou should use the \nsTypoDescender\n field of the \u2018OS/2\u2019 table instead if you want the correct one.\n\n\n\n\nLine_Gap\n\n\nThe font's line gap, i.e., the distance to add to the ascender and descender to get the BTB, i.e., the baseline-to-baseline distance for the font.\n\n\n\n\nadvance_Width_Max\n\n\nThis field is the maximum of all advance widths found in the font. It can be used to compute the maximum width of an arbitrary string of text.\n\n\n\n\nmin_Left_Side_Bearing\n\n\nThe minimum left side bearing of all glyphs within the font.\n\n\n\n\nmin_Right_Side_Bearing\n\n\nThe minimum right side bearing of all glyphs within the font.\n\n\n\n\nxMax_Extent\n\n\nThe maximum horizontal extent (i.e., the \u2018width\u2019 of a glyph's bounding box) for all glyphs in the font.\n\n\n\n\ncaret_Slope_Rise\n\n\nThe rise coefficient of the cursor's slope of the cursor (slope=rise/run).\n\n\n\n\ncaret_Slope_Run\n\n\nThe run coefficient of the cursor's slope.\n\n\n\n\ncaret_Offset\n\n\nThe cursor's offset for slanted fonts.\n\n\n\n\nReserved\n\n\n8\u00a0reserved bytes.\n\n\n\n\nmetric_Data_Format\n\n\nAlways\u00a00.\n\n\n\n\nnumber_Of_HMetrics\n\n\nNumber of HMetrics entries in the \u2018hmtx\u2019 table -- this value can be smaller than the total number of glyphs in the font.\n\n\n\n\nlong_metrics\n\n\nA pointer into the \u2018hmtx\u2019 table.\n\n\n\n\nshort_metrics\n\n\nA pointer into the \u2018hmtx\u2019 table.\n\n\n\n\n\n\n\nnote\n\n\n\nFor an OpenType variation font, the values of the following fields can change after a call to \nFT_Set_Var_Design_Coordinates\n (and friends) if the font contains an \u2018MVAR\u2019 table: \ncaret_Slope_Rise\n, \ncaret_Slope_Run\n, and \ncaret_Offset\n.\n\n\n\n\n\nTT_VertHeader\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_VertHeader_\n  {\n    \nFT_Fixed\n   Version;\n    \nFT_Short\n   Ascender;\n    \nFT_Short\n   Descender;\n    \nFT_Short\n   Line_Gap;\n\n    \nFT_UShort\n  advance_Height_Max;      /* advance height maximum */\n\n    \nFT_Short\n   min_Top_Side_Bearing;    /* minimum top-sb          */\n    \nFT_Short\n   min_Bottom_Side_Bearing; /* minimum bottom-sb       */\n    \nFT_Short\n   yMax_Extent;             /* ymax extents            */\n    \nFT_Short\n   caret_Slope_Rise;\n    \nFT_Short\n   caret_Slope_Run;\n    \nFT_Short\n   caret_Offset;\n\n    \nFT_Short\n   Reserved[4];\n\n    \nFT_Short\n   metric_Data_Format;\n    \nFT_UShort\n  number_Of_VMetrics;\n\n    /* The following fields are not defined by the OpenType specification */\n    /* but they are used to connect the metrics header to the relevant    */\n    /* `vmtx' table.                                                      */\n\n    \nvoid\n*      long_metrics;\n    \nvoid\n*      short_metrics;\n\n  } \nTT_VertHeader\n;\n\n\n\n\n\n\nA structure used to model a TrueType vertical header, the \u2018vhea\u2019 table, as well as the corresponding vertical metrics table, \u2018vmtx\u2019.\n\n\nfields\n\n\n\n\n\nVersion\n\n\nThe table version.\n\n\n\n\nAscender\n\n\nThe font's ascender, i.e., the distance from the baseline to the top-most of all glyph points found in the font.\nThis value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).\nYou should use the \nsTypoAscender\n field of the \u2018OS/2\u2019 table instead if you want the correct one.\n\n\n\n\nDescender\n\n\nThe font's descender, i.e., the distance from the baseline to the bottom-most of all glyph points found in the font. It is negative.\nThis value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).\nYou should use the \nsTypoDescender\n field of the \u2018OS/2\u2019 table instead if you want the correct one.\n\n\n\n\nLine_Gap\n\n\nThe font's line gap, i.e., the distance to add to the ascender and descender to get the BTB, i.e., the baseline-to-baseline distance for the font.\n\n\n\n\nadvance_Height_Max\n\n\nThis field is the maximum of all advance heights found in the font. It can be used to compute the maximum height of an arbitrary string of text.\n\n\n\n\nmin_Top_Side_Bearing\n\n\nThe minimum top side bearing of all glyphs within the font.\n\n\n\n\nmin_Bottom_Side_Bearing\n\n\nThe minimum bottom side bearing of all glyphs within the font.\n\n\n\n\nyMax_Extent\n\n\nThe maximum vertical extent (i.e., the \u2018height\u2019 of a glyph's bounding box) for all glyphs in the font.\n\n\n\n\ncaret_Slope_Rise\n\n\nThe rise coefficient of the cursor's slope of the cursor (slope=rise/run).\n\n\n\n\ncaret_Slope_Run\n\n\nThe run coefficient of the cursor's slope.\n\n\n\n\ncaret_Offset\n\n\nThe cursor's offset for slanted fonts.\n\n\n\n\nReserved\n\n\n8\u00a0reserved bytes.\n\n\n\n\nmetric_Data_Format\n\n\nAlways\u00a00.\n\n\n\n\nnumber_Of_VMetrics\n\n\nNumber of VMetrics entries in the \u2018vmtx\u2019 table -- this value can be smaller than the total number of glyphs in the font.\n\n\n\n\nlong_metrics\n\n\nA pointer into the \u2018vmtx\u2019 table.\n\n\n\n\nshort_metrics\n\n\nA pointer into the \u2018vmtx\u2019 table.\n\n\n\n\n\n\n\nnote\n\n\n\nFor an OpenType variation font, the values of the following fields can change after a call to \nFT_Set_Var_Design_Coordinates\n (and friends) if the font contains an \u2018MVAR\u2019 table: \u2018Ascender\u2019, \u2018Descender\u2019, \nLine_Gap\n, \ncaret_Slope_Rise\n, \ncaret_Slope_Run\n, and \ncaret_Offset\n.\n\n\n\n\n\nTT_OS2\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_OS2_\n  {\n    \nFT_UShort\n  version;                /* 0x0001 - more or 0xFFFF */\n    \nFT_Short\n   xAvgCharWidth;\n    \nFT_UShort\n  usWeightClass;\n    \nFT_UShort\n  usWidthClass;\n    \nFT_UShort\n  fsType;\n    \nFT_Short\n   ySubscriptXSize;\n    \nFT_Short\n   ySubscriptYSize;\n    \nFT_Short\n   ySubscriptXOffset;\n    \nFT_Short\n   ySubscriptYOffset;\n    \nFT_Short\n   ySuperscriptXSize;\n    \nFT_Short\n   ySuperscriptYSize;\n    \nFT_Short\n   ySuperscriptXOffset;\n    \nFT_Short\n   ySuperscriptYOffset;\n    \nFT_Short\n   yStrikeoutSize;\n    \nFT_Short\n   yStrikeoutPosition;\n    \nFT_Short\n   sFamilyClass;\n\n    \nFT_Byte\n    panose[10];\n\n    \nFT_ULong\n   ulUnicodeRange1;        /* Bits 0-31   */\n    \nFT_ULong\n   ulUnicodeRange2;        /* Bits 32-63  */\n    \nFT_ULong\n   ulUnicodeRange3;        /* Bits 64-95  */\n    \nFT_ULong\n   ulUnicodeRange4;        /* Bits 96-127 */\n\n    \nFT_Char\n    achVendID[4];\n\n    \nFT_UShort\n  fsSelection;\n    \nFT_UShort\n  usFirstCharIndex;\n    \nFT_UShort\n  usLastCharIndex;\n    \nFT_Short\n   sTypoAscender;\n    \nFT_Short\n   sTypoDescender;\n    \nFT_Short\n   sTypoLineGap;\n    \nFT_UShort\n  usWinAscent;\n    \nFT_UShort\n  usWinDescent;\n\n    /* only version 1 and higher: */\n\n    \nFT_ULong\n   ulCodePageRange1;       /* Bits 0-31   */\n    \nFT_ULong\n   ulCodePageRange2;       /* Bits 32-63  */\n\n    /* only version 2 and higher: */\n\n    \nFT_Short\n   sxHeight;\n    \nFT_Short\n   sCapHeight;\n    \nFT_UShort\n  usDefaultChar;\n    \nFT_UShort\n  usBreakChar;\n    \nFT_UShort\n  usMaxContext;\n\n    /* only version 5 and higher: */\n\n    \nFT_UShort\n  usLowerOpticalPointSize;       /* in twips (1/20th points) */\n    \nFT_UShort\n  usUpperOpticalPointSize;       /* in twips (1/20th points) */\n\n  } \nTT_OS2\n;\n\n\n\n\n\n\nA structure to model a TrueType \u2018OS/2\u2019 table. All fields comply to the OpenType specification.\n\n\nNote that we now support old Mac fonts that do not include an \u2018OS/2\u2019 table. In this case, the \u2018version\u2019 field is always set to 0xFFFF.\n\n\nnote\n\n\n\nFor an OpenType variation font, the values of the following fields can change after a call to \nFT_Set_Var_Design_Coordinates\n (and friends) if the font contains an \u2018MVAR\u2019 table: \nsCapHeight\n, \nsTypoAscender\n, \nsTypoDescender\n, \nsTypoLineGap\n, \nsxHeight\n, \nusWinAscent\n, \nusWinDescent\n, \nyStrikeoutPosition\n, \nyStrikeoutSize\n, \nySubscriptXOffset\n, \nySubScriptXSize\n, \nySubscriptYOffset\n, \nySubscriptYSize\n, \nySuperscriptXOffset\n, \nySuperscriptXSize\n, \nySuperscriptYOffset\n, and \nySuperscriptYSize\n.\n\n\nPossible values for bits in the \nulUnicodeRangeX\n fields are given by the \nTT_UCR_XXX\n macros.\n\n\n\n\n\nTT_Postscript\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_Postscript_\n  {\n    \nFT_Fixed\n  FormatType;\n    \nFT_Fixed\n  italicAngle;\n    \nFT_Short\n  underlinePosition;\n    \nFT_Short\n  underlineThickness;\n    \nFT_ULong\n  isFixedPitch;\n    \nFT_ULong\n  minMemType42;\n    \nFT_ULong\n  maxMemType42;\n    \nFT_ULong\n  minMemType1;\n    \nFT_ULong\n  maxMemType1;\n\n    /* Glyph names follow in the `post' table, but we don't */\n    /* load them by default.                                */\n\n  } \nTT_Postscript\n;\n\n\n\n\n\n\nA structure to model a TrueType \u2018post\u2019 table. All fields comply to the OpenType specification. This structure does not reference a font's PostScript glyph names; use \nFT_Get_Glyph_Name\n to retrieve them.\n\n\nnote\n\n\n\nFor an OpenType variation font, the values of the following fields can change after a call to \nFT_Set_Var_Design_Coordinates\n (and friends) if the font contains an \u2018MVAR\u2019 table: \nunderlinePosition\n and \nunderlineThickness\n.\n\n\n\n\n\nTT_PCLT\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_PCLT_\n  {\n    \nFT_Fixed\n   Version;\n    \nFT_ULong\n   FontNumber;\n    \nFT_UShort\n  Pitch;\n    \nFT_UShort\n  xHeight;\n    \nFT_UShort\n  Style;\n    \nFT_UShort\n  TypeFamily;\n    \nFT_UShort\n  CapHeight;\n    \nFT_UShort\n  SymbolSet;\n    \nFT_Char\n    TypeFace[16];\n    \nFT_Char\n    CharacterComplement[8];\n    \nFT_Char\n    FileName[6];\n    \nFT_Char\n    StrokeWeight;\n    \nFT_Char\n    WidthType;\n    \nFT_Byte\n    SerifStyle;\n    \nFT_Byte\n    Reserved;\n\n  } \nTT_PCLT\n;\n\n\n\n\n\n\nA structure to model a TrueType \u2018PCLT\u2019 table. All fields comply to the OpenType specification.\n\n\n\n\n\nTT_MaxProfile\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  TT_MaxProfile_\n  {\n    \nFT_Fixed\n   version;\n    \nFT_UShort\n  numGlyphs;\n    \nFT_UShort\n  maxPoints;\n    \nFT_UShort\n  maxContours;\n    \nFT_UShort\n  maxCompositePoints;\n    \nFT_UShort\n  maxCompositeContours;\n    \nFT_UShort\n  maxZones;\n    \nFT_UShort\n  maxTwilightPoints;\n    \nFT_UShort\n  maxStorage;\n    \nFT_UShort\n  maxFunctionDefs;\n    \nFT_UShort\n  maxInstructionDefs;\n    \nFT_UShort\n  maxStackElements;\n    \nFT_UShort\n  maxSizeOfInstructions;\n    \nFT_UShort\n  maxComponentElements;\n    \nFT_UShort\n  maxComponentDepth;\n\n  } \nTT_MaxProfile\n;\n\n\n\n\n\n\nThe maximum profile (\u2018maxp\u2019) table contains many max values, which can be used to pre-allocate arrays for speeding up glyph loading and hinting.\n\n\nfields\n\n\n\n\n\nversion\n\n\nThe version number.\n\n\n\n\nnumGlyphs\n\n\nThe number of glyphs in this TrueType font.\n\n\n\n\nmaxPoints\n\n\nThe maximum number of points in a non-composite TrueType glyph. See also \nmaxCompositePoints\n.\n\n\n\n\nmaxContours\n\n\nThe maximum number of contours in a non-composite TrueType glyph. See also \nmaxCompositeContours\n.\n\n\n\n\nmaxCompositePoints\n\n\nThe maximum number of points in a composite TrueType glyph. See also \nmaxPoints\n.\n\n\n\n\nmaxCompositeContours\n\n\nThe maximum number of contours in a composite TrueType glyph. See also \nmaxContours\n.\n\n\n\n\nmaxZones\n\n\nThe maximum number of zones used for glyph hinting.\n\n\n\n\nmaxTwilightPoints\n\n\nThe maximum number of points in the twilight zone used for glyph hinting.\n\n\n\n\nmaxStorage\n\n\nThe maximum number of elements in the storage area used for glyph hinting.\n\n\n\n\nmaxFunctionDefs\n\n\nThe maximum number of function definitions in the TrueType bytecode for this font.\n\n\n\n\nmaxInstructionDefs\n\n\nThe maximum number of instruction definitions in the TrueType bytecode for this font.\n\n\n\n\nmaxStackElements\n\n\nThe maximum number of stack elements used during bytecode interpretation.\n\n\n\n\nmaxSizeOfInstructions\n\n\nThe maximum number of TrueType opcodes used for glyph hinting.\n\n\n\n\nmaxComponentElements\n\n\nThe maximum number of simple (i.e., non-composite) glyphs in a composite glyph.\n\n\n\n\nmaxComponentDepth\n\n\nThe maximum nesting depth of composite glyphs.\n\n\n\n\n\n\n\nnote\n\n\n\nThis structure is only used during font loading.\n\n\n\n\n\nFT_Sfnt_Tag\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Sfnt_Tag_\n  {\n    \nFT_SFNT_HEAD\n,\n    \nFT_SFNT_MAXP\n,\n    \nFT_SFNT_OS2\n,\n    \nFT_SFNT_HHEA\n,\n    \nFT_SFNT_VHEA\n,\n    \nFT_SFNT_POST\n,\n    \nFT_SFNT_PCLT\n,\n\n    FT_SFNT_MAX\n\n  } \nFT_Sfnt_Tag\n;\n\n  /* these constants are deprecated; use the corresponding `\nFT_Sfnt_Tag\n' */\n  /* values instead                                                      */\n#\ndefine\n ft_sfnt_head  \nFT_SFNT_HEAD\n\n#\ndefine\n ft_sfnt_maxp  \nFT_SFNT_MAXP\n\n#\ndefine\n ft_sfnt_os2   \nFT_SFNT_OS2\n\n#\ndefine\n ft_sfnt_hhea  \nFT_SFNT_HHEA\n\n#\ndefine\n ft_sfnt_vhea  \nFT_SFNT_VHEA\n\n#\ndefine\n ft_sfnt_post  \nFT_SFNT_POST\n\n#\ndefine\n ft_sfnt_pclt  \nFT_SFNT_PCLT\n\n\n\n\n\n\n\nAn enumeration to specify indices of SFNT tables loaded and parsed by FreeType during initialization of an SFNT font. Used in the \nFT_Get_Sfnt_Table\n API function.\n\n\nvalues\n\n\n\n\n\nFT_SFNT_HEAD\n\n\nTo access the font's \nTT_Header\n structure.\n\n\n\n\nFT_SFNT_MAXP\n\n\nTo access the font's \nTT_MaxProfile\n structure.\n\n\n\n\nFT_SFNT_OS2\n\n\nTo access the font's \nTT_OS2\n structure.\n\n\n\n\nFT_SFNT_HHEA\n\n\nTo access the font's \nTT_HoriHeader\n structure.\n\n\n\n\nFT_SFNT_VHEA\n\n\nTo access the font's \nTT_VertHeader\n structure.\n\n\n\n\nFT_SFNT_POST\n\n\nTo access the font's \nTT_Postscript\n structure.\n\n\n\n\nFT_SFNT_PCLT\n\n\nTo access the font's \nTT_PCLT\n structure.\n\n\n\n\n\n\n\n\n\n\nFT_Get_Sfnt_Table\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n* )\n  \nFT_Get_Sfnt_Table\n( \nFT_Face\n      face,\n                     \nFT_Sfnt_Tag\n  tag );\n\n\n\n\n\n\nReturn a pointer to a given SFNT table stored within a face.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source.\n\n\n\n\ntag\n\n\nThe index of the SFNT table.\n\n\n\n\n\n\n\nreturn\n\n\n\nA type-less pointer to the table. This will be NULL in case of error, or if the corresponding table was not found \nOR\n loaded from the file.\n\n\nUse a typecast according to \u2018tag\u2019 to access the structure elements.\n\n\nnote\n\n\n\nThe table is owned by the face object and disappears with it.\n\n\nThis function is only useful to access SFNT tables that are loaded by the sfnt, truetype, and opentype drivers. See \nFT_Sfnt_Tag\n for a list.\n\n\nexample\n\n\n\nHere an example how to access the \u2018vhea\u2019 table.\n\n  TT_VertHeader*  vert_header;\n\n\n  vert_header =\n    (TT_VertHeader*)FT_Get_Sfnt_Table( face, FT_SFNT_VHEA );\n\n\n\n\n\n\nFT_Load_Sfnt_Table\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Load_Sfnt_Table\n( \nFT_Face\n    face,\n                      \nFT_ULong\n   tag,\n                      \nFT_Long\n    offset,\n                      \nFT_Byte\n*   buffer,\n                      \nFT_ULong\n*  length );\n\n\n\n\n\n\nLoad any SFNT font table into client memory.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\ntag\n\n\nThe four-byte tag of the table to load. Use value\u00a00 if you want to access the whole font file. Otherwise, you can use one of the definitions found in the \nFT_TRUETYPE_TAGS_H\n file, or forge a new one with \nFT_MAKE_TAG\n.\n\n\n\n\noffset\n\n\nThe starting offset in the table (or file if tag\u00a0==\u00a00).\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nbuffer\n\n\nThe target buffer address. The client must ensure that the memory array is big enough to hold the data.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nlength\n\n\nIf the \u2018length\u2019 parameter is NULL, try to load the whole table. Return an error code if it fails.\nElse, if \u2018*length\u2019 is\u00a00, exit immediately while returning the table's (or file) full size in it.\nElse the number of bytes to read from the table or file, from the starting offset.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf you need to determine the table's length you should first call this function with \u2018*length\u2019 set to\u00a00, as in the following example:\n\n  FT_ULong  length = 0;\n\n\n  error = FT_Load_Sfnt_Table( face, tag, 0, NULL, &length );\n  if ( error ) { ... table does not exist ... }\n\n  buffer = malloc( length );\n  if ( buffer == NULL ) { ... not enough memory ... }\n\n  error = FT_Load_Sfnt_Table( face, tag, 0, buffer, &length );\n  if ( error ) { ... could not load table ... }\n\n\n\nNote that structures like \nTT_Header\n or \nTT_OS2\n can't be used with this function; they are limited to \nFT_Get_Sfnt_Table\n. Reason is that those structures depend on the processor architecture, with varying size (e.g. 32bit vs. 64bit) or order (big endian vs. little endian).\n\n\n\n\n\nFT_Sfnt_Table_Info\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Sfnt_Table_Info\n( \nFT_Face\n    face,\n                      \nFT_UInt\n    table_index,\n                      \nFT_ULong\n  *tag,\n                      \nFT_ULong\n  *length );\n\n\n\n\n\n\nReturn information on an SFNT table.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\ntable_index\n\n\nThe index of an SFNT table. The function returns FT_Err_Table_Missing for an invalid value.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\ntag\n\n\nThe name tag of the SFNT table. If the value is NULL, \ntable_index\n is ignored, and \u2018length\u2019 returns the number of SFNT tables in the font.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nlength\n\n\nThe length of the SFNT table (or the number of SFNT tables, depending on \u2018tag\u2019).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nWhile parsing fonts, FreeType handles SFNT tables with length zero as missing.\n\n\n\n\n\nFT_Get_CMap_Language_ID\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_ULong\n )\n  \nFT_Get_CMap_Language_ID\n( \nFT_CharMap\n  charmap );\n\n\n\n\n\n\nReturn cmap language ID as specified in the OpenType standard. Definitions of language ID values are in file \nFT_TRUETYPE_IDS_H\n.\n\n\ninput\n\n\n\n\n\ncharmap\n\n\nThe target charmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe language ID of \u2018charmap\u2019. If \u2018charmap\u2019 doesn't belong to an SFNT face, just return\u00a00 as the default value.\n\n\nFor a format\u00a014 cmap (to access Unicode IVS), the return value is 0xFFFFFFFF.\n\n\n\n\n\nFT_Get_CMap_Format\n\u00b6\n\n\nDefined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Long\n )\n  \nFT_Get_CMap_Format\n( \nFT_CharMap\n  charmap );\n\n\n\n\n\n\nReturn the format of an SFNT \u2018cmap\u2019 table.\n\n\ninput\n\n\n\n\n\ncharmap\n\n\nThe target charmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe format of \u2018charmap\u2019. If \u2018charmap\u2019 doesn't belong to an SFNT face, return -1.\n\n\n\n\n\nFT_PARAM_TAG_UNPATENTED_HINTING\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_UNPATENTED_HINTING\n \\\n          \nFT_MAKE_TAG\n( 'u', 'n', 'p', 'a' )\n\n\n\n\n\n\nDeprecated, no effect.\n\n\nPreviously: A constant used as the tag of an \nFT_Parameter\n structure to indicate that unpatented methods only should be used by the TrueType bytecode interpreter for a typeface opened by \nFT_Open_Face\n.\n\n\n\n\n\nTT_PLATFORM_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n \nTT_PLATFORM_APPLE_UNICODE\n  0\n#\ndefine\n \nTT_PLATFORM_MACINTOSH\n      1\n#\ndefine\n \nTT_PLATFORM_ISO\n            2 /* deprecated */\n#\ndefine\n \nTT_PLATFORM_MICROSOFT\n      3\n#\ndefine\n \nTT_PLATFORM_CUSTOM\n         4\n#\ndefine\n \nTT_PLATFORM_ADOBE\n          7 /* artificial */\n\n\n\n\n\n\nA list of valid values for the \nplatform_id\n identifier code in \nFT_CharMapRec\n and \nFT_SfntName\n structures.\n\n\nvalues\n\n\n\n\n\nTT_PLATFORM_APPLE_UNICODE\n\n\nUsed by Apple to indicate a Unicode character map and/or name entry. See \nTT_APPLE_ID_XXX\n for corresponding \nencoding_id\n values. Note that name entries in this format are coded as big-endian UCS-2 character codes \nonly\n.\n\n\n\n\nTT_PLATFORM_MACINTOSH\n\n\nUsed by Apple to indicate a MacOS-specific charmap and/or name entry. See \nTT_MAC_ID_XXX\n for corresponding \nencoding_id\n values. Note that most TrueType fonts contain an Apple roman charmap to be usable on MacOS systems (even if they contain a Microsoft charmap as well).\n\n\n\n\nTT_PLATFORM_ISO\n\n\nThis value was used to specify ISO/IEC 10646 charmaps. It is however now deprecated. See \nTT_ISO_ID_XXX\n for a list of corresponding \nencoding_id\n values.\n\n\n\n\nTT_PLATFORM_MICROSOFT\n\n\nUsed by Microsoft to indicate Windows-specific charmaps. See \nTT_MS_ID_XXX\n for a list of corresponding \nencoding_id\n values. Note that most fonts contain a Unicode charmap using (TT_PLATFORM_MICROSOFT, \nTT_MS_ID_UNICODE_CS\n).\n\n\n\n\nTT_PLATFORM_CUSTOM\n\n\nUsed to indicate application-specific charmaps.\n\n\n\n\nTT_PLATFORM_ADOBE\n\n\nThis value isn't part of any font format specification, but is used by FreeType to report Adobe-specific charmaps in an \nFT_CharMapRec\n structure. See \nTT_ADOBE_ID_XXX\n.\n\n\n\n\n\n\n\n\n\n\nTT_APPLE_ID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n \nTT_APPLE_ID_DEFAULT\n           0 /* Unicode 1.0                   */\n#\ndefine\n \nTT_APPLE_ID_UNICODE_1_1\n       1 /* specify Hangul at U+34xx      */\n#\ndefine\n \nTT_APPLE_ID_ISO_10646\n         2 /* deprecated                    */\n#\ndefine\n \nTT_APPLE_ID_UNICODE_2_0\n       3 /* or later                      */\n#\ndefine\n \nTT_APPLE_ID_UNICODE_32\n        4 /* 2.0 or later, full repertoire */\n#\ndefine\n \nTT_APPLE_ID_VARIANT_SELECTOR\n  5 /* variation selector data       */\n#\ndefine\n \nTT_APPLE_ID_FULL_UNICODE\n      6 /* used with type 13 cmaps       */\n\n\n\n\n\n\nA list of valid values for the \nencoding_id\n for \nTT_PLATFORM_APPLE_UNICODE\n charmaps and name entries.\n\n\nvalues\n\n\n\n\n\nTT_APPLE_ID_DEFAULT\n\n\nUnicode version 1.0.\n\n\n\n\nTT_APPLE_ID_UNICODE_1_1\n\n\nUnicode 1.1; specifies Hangul characters starting at U+34xx.\n\n\n\n\nTT_APPLE_ID_ISO_10646\n\n\nDeprecated (identical to preceding).\n\n\n\n\nTT_APPLE_ID_UNICODE_2_0\n\n\nUnicode 2.0 and beyond (UTF-16 BMP only).\n\n\n\n\nTT_APPLE_ID_UNICODE_32\n\n\nUnicode 3.1 and beyond, using UTF-32.\n\n\n\n\nTT_APPLE_ID_VARIANT_SELECTOR\n\n\nFrom Adobe, not Apple. Not a normal cmap. Specifies variations on a real cmap.\n\n\n\n\nTT_APPLE_ID_FULL_UNICODE\n\n\nUsed for fallback fonts that provide complete Unicode coverage with a type\u00a013 cmap.\n\n\n\n\n\n\n\n\n\n\nTT_MAC_ID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n TT_MAC_ID_ROMAN                 0\n#\ndefine\n TT_MAC_ID_JAPANESE              1\n#\ndefine\n TT_MAC_ID_TRADITIONAL_CHINESE   2\n#\ndefine\n TT_MAC_ID_KOREAN                3\n#\ndefine\n TT_MAC_ID_ARABIC                4\n#\ndefine\n TT_MAC_ID_HEBREW                5\n#\ndefine\n TT_MAC_ID_GREEK                 6\n#\ndefine\n TT_MAC_ID_RUSSIAN               7\n#\ndefine\n TT_MAC_ID_RSYMBOL               8\n#\ndefine\n TT_MAC_ID_DEVANAGARI            9\n#\ndefine\n TT_MAC_ID_GURMUKHI             10\n#\ndefine\n TT_MAC_ID_GUJARATI             11\n#\ndefine\n TT_MAC_ID_ORIYA                12\n#\ndefine\n TT_MAC_ID_BENGALI              13\n#\ndefine\n TT_MAC_ID_TAMIL                14\n#\ndefine\n TT_MAC_ID_TELUGU               15\n#\ndefine\n TT_MAC_ID_KANNADA              16\n#\ndefine\n TT_MAC_ID_MALAYALAM            17\n#\ndefine\n TT_MAC_ID_SINHALESE            18\n#\ndefine\n TT_MAC_ID_BURMESE              19\n#\ndefine\n TT_MAC_ID_KHMER                20\n#\ndefine\n TT_MAC_ID_THAI                 21\n#\ndefine\n TT_MAC_ID_LAOTIAN              22\n#\ndefine\n TT_MAC_ID_GEORGIAN             23\n#\ndefine\n TT_MAC_ID_ARMENIAN             24\n#\ndefine\n TT_MAC_ID_MALDIVIAN            25\n#\ndefine\n TT_MAC_ID_SIMPLIFIED_CHINESE   25\n#\ndefine\n TT_MAC_ID_TIBETAN              26\n#\ndefine\n TT_MAC_ID_MONGOLIAN            27\n#\ndefine\n TT_MAC_ID_GEEZ                 28\n#\ndefine\n TT_MAC_ID_SLAVIC               29\n#\ndefine\n TT_MAC_ID_VIETNAMESE           30\n#\ndefine\n TT_MAC_ID_SINDHI               31\n#\ndefine\n TT_MAC_ID_UNINTERP             32\n\n\n\n\n\n\nA list of valid values for the \nencoding_id\n for \nTT_PLATFORM_MACINTOSH\n charmaps and name entries.\n\n\n\n\n\nTT_ISO_ID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n \nTT_ISO_ID_7BIT_ASCII\n  0\n#\ndefine\n \nTT_ISO_ID_10646\n       1\n#\ndefine\n \nTT_ISO_ID_8859_1\n      2\n\n\n\n\n\n\nA list of valid values for the \nencoding_id\n for \nTT_PLATFORM_ISO\n charmaps and name entries.\n\n\nTheir use is now deprecated.\n\n\nvalues\n\n\n\n\n\nTT_ISO_ID_7BIT_ASCII\n\n\nASCII.\n\n\n\n\nTT_ISO_ID_10646\n\n\nISO/10646.\n\n\n\n\nTT_ISO_ID_8859_1\n\n\nAlso known as Latin-1.\n\n\n\n\n\n\n\n\n\n\nTT_MS_ID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n \nTT_MS_ID_SYMBOL_CS\n    0\n#\ndefine\n \nTT_MS_ID_UNICODE_CS\n   1\n#\ndefine\n \nTT_MS_ID_SJIS\n         2\n#\ndefine\n \nTT_MS_ID_PRC\n          3\n#\ndefine\n \nTT_MS_ID_BIG_5\n        4\n#\ndefine\n \nTT_MS_ID_WANSUNG\n      5\n#\ndefine\n \nTT_MS_ID_JOHAB\n        6\n#\ndefine\n \nTT_MS_ID_UCS_4\n       10\n\n  /* this value is deprecated */\n#\ndefine\n TT_MS_ID_GB2312  \nTT_MS_ID_PRC\n\n\n\n\n\n\n\nA list of valid values for the \nencoding_id\n for \nTT_PLATFORM_MICROSOFT\n charmaps and name entries.\n\n\nvalues\n\n\n\n\n\nTT_MS_ID_SYMBOL_CS\n\n\nMicrosoft symbol encoding. See \nFT_ENCODING_MS_SYMBOL\n.\n\n\n\n\nTT_MS_ID_UNICODE_CS\n\n\nMicrosoft WGL4 charmap, matching Unicode. See \nFT_ENCODING_UNICODE\n.\n\n\n\n\nTT_MS_ID_SJIS\n\n\nShift JIS Japanese encoding. See \nFT_ENCODING_SJIS\n.\n\n\n\n\nTT_MS_ID_PRC\n\n\nChinese encodings as used in the People's Republic of China (PRC). This means the encodings GB\u00a02312 and its supersets GBK and GB\u00a018030. See \nFT_ENCODING_PRC\n.\n\n\n\n\nTT_MS_ID_BIG_5\n\n\nTraditional Chinese as used in Taiwan and Hong Kong. See \nFT_ENCODING_BIG5\n.\n\n\n\n\nTT_MS_ID_WANSUNG\n\n\nKorean Extended Wansung encoding. See \nFT_ENCODING_WANSUNG\n.\n\n\n\n\nTT_MS_ID_JOHAB\n\n\nKorean Johab encoding. See \nFT_ENCODING_JOHAB\n.\n\n\n\n\nTT_MS_ID_UCS_4\n\n\nUCS-4 or UTF-32 charmaps. This has been added to the OpenType specification version 1.4 (mid-2001).\n\n\n\n\n\n\n\n\n\n\nTT_ADOBE_ID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n \nTT_ADOBE_ID_STANDARD\n  0\n#\ndefine\n \nTT_ADOBE_ID_EXPERT\n    1\n#\ndefine\n \nTT_ADOBE_ID_CUSTOM\n    2\n#\ndefine\n \nTT_ADOBE_ID_LATIN_1\n   3\n\n\n\n\n\n\nA list of valid values for the \nencoding_id\n for \nTT_PLATFORM_ADOBE\n charmaps. This is a FreeType-specific extension!\n\n\nvalues\n\n\n\n\n\nTT_ADOBE_ID_STANDARD\n\n\nAdobe standard encoding.\n\n\n\n\nTT_ADOBE_ID_EXPERT\n\n\nAdobe expert encoding.\n\n\n\n\nTT_ADOBE_ID_CUSTOM\n\n\nAdobe custom encoding.\n\n\n\n\nTT_ADOBE_ID_LATIN_1\n\n\nAdobe Latin\u00a01 encoding.\n\n\n\n\n\n\n\n\n\n\nTT_MAC_LANGID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n TT_MAC_LANGID_ENGLISH                       0\n#\ndefine\n TT_MAC_LANGID_FRENCH                        1\n#\ndefine\n TT_MAC_LANGID_GERMAN                        2\n#\ndefine\n TT_MAC_LANGID_ITALIAN                       3\n#\ndefine\n TT_MAC_LANGID_DUTCH                         4\n#\ndefine\n TT_MAC_LANGID_SWEDISH                       5\n#\ndefine\n TT_MAC_LANGID_SPANISH                       6\n#\ndefine\n TT_MAC_LANGID_DANISH                        7\n#\ndefine\n TT_MAC_LANGID_PORTUGUESE                    8\n#\ndefine\n TT_MAC_LANGID_NORWEGIAN                     9\n#\ndefine\n TT_MAC_LANGID_HEBREW                       10\n#\ndefine\n TT_MAC_LANGID_JAPANESE                     11\n#\ndefine\n TT_MAC_LANGID_ARABIC                       12\n#\ndefine\n TT_MAC_LANGID_FINNISH                      13\n#\ndefine\n TT_MAC_LANGID_GREEK                        14\n#\ndefine\n TT_MAC_LANGID_ICELANDIC                    15\n#\ndefine\n TT_MAC_LANGID_MALTESE                      16\n#\ndefine\n TT_MAC_LANGID_TURKISH                      17\n#\ndefine\n TT_MAC_LANGID_CROATIAN                     18\n#\ndefine\n TT_MAC_LANGID_CHINESE_TRADITIONAL          19\n#\ndefine\n TT_MAC_LANGID_URDU                         20\n#\ndefine\n TT_MAC_LANGID_HINDI                        21\n#\ndefine\n TT_MAC_LANGID_THAI                         22\n#\ndefine\n TT_MAC_LANGID_KOREAN                       23\n#\ndefine\n TT_MAC_LANGID_LITHUANIAN                   24\n#\ndefine\n TT_MAC_LANGID_POLISH                       25\n#\ndefine\n TT_MAC_LANGID_HUNGARIAN                    26\n#\ndefine\n TT_MAC_LANGID_ESTONIAN                     27\n#\ndefine\n TT_MAC_LANGID_LETTISH                      28\n#\ndefine\n TT_MAC_LANGID_SAAMISK                      29\n#\ndefine\n TT_MAC_LANGID_FAEROESE                     30\n#\ndefine\n TT_MAC_LANGID_FARSI                        31\n#\ndefine\n TT_MAC_LANGID_RUSSIAN                      32\n#\ndefine\n TT_MAC_LANGID_CHINESE_SIMPLIFIED           33\n#\ndefine\n TT_MAC_LANGID_FLEMISH                      34\n#\ndefine\n TT_MAC_LANGID_IRISH                        35\n#\ndefine\n TT_MAC_LANGID_ALBANIAN                     36\n#\ndefine\n TT_MAC_LANGID_ROMANIAN                     37\n#\ndefine\n TT_MAC_LANGID_CZECH                        38\n#\ndefine\n TT_MAC_LANGID_SLOVAK                       39\n#\ndefine\n TT_MAC_LANGID_SLOVENIAN                    40\n#\ndefine\n TT_MAC_LANGID_YIDDISH                      41\n#\ndefine\n TT_MAC_LANGID_SERBIAN                      42\n#\ndefine\n TT_MAC_LANGID_MACEDONIAN                   43\n#\ndefine\n TT_MAC_LANGID_BULGARIAN                    44\n#\ndefine\n TT_MAC_LANGID_UKRAINIAN                    45\n#\ndefine\n TT_MAC_LANGID_BYELORUSSIAN                 46\n#\ndefine\n TT_MAC_LANGID_UZBEK                        47\n#\ndefine\n TT_MAC_LANGID_KAZAKH                       48\n#\ndefine\n TT_MAC_LANGID_AZERBAIJANI                  49\n#\ndefine\n TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT  49\n#\ndefine\n TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT    50\n#\ndefine\n TT_MAC_LANGID_ARMENIAN                     51\n#\ndefine\n TT_MAC_LANGID_GEORGIAN                     52\n#\ndefine\n TT_MAC_LANGID_MOLDAVIAN                    53\n#\ndefine\n TT_MAC_LANGID_KIRGHIZ                      54\n#\ndefine\n TT_MAC_LANGID_TAJIKI                       55\n#\ndefine\n TT_MAC_LANGID_TURKMEN                      56\n#\ndefine\n TT_MAC_LANGID_MONGOLIAN                    57\n#\ndefine\n TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT   57\n#\ndefine\n TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT    58\n#\ndefine\n TT_MAC_LANGID_PASHTO                       59\n#\ndefine\n TT_MAC_LANGID_KURDISH                      60\n#\ndefine\n TT_MAC_LANGID_KASHMIRI                     61\n#\ndefine\n TT_MAC_LANGID_SINDHI                       62\n#\ndefine\n TT_MAC_LANGID_TIBETAN                      63\n#\ndefine\n TT_MAC_LANGID_NEPALI                       64\n#\ndefine\n TT_MAC_LANGID_SANSKRIT                     65\n#\ndefine\n TT_MAC_LANGID_MARATHI                      66\n#\ndefine\n TT_MAC_LANGID_BENGALI                      67\n#\ndefine\n TT_MAC_LANGID_ASSAMESE                     68\n#\ndefine\n TT_MAC_LANGID_GUJARATI                     69\n#\ndefine\n TT_MAC_LANGID_PUNJABI                      70\n#\ndefine\n TT_MAC_LANGID_ORIYA                        71\n#\ndefine\n TT_MAC_LANGID_MALAYALAM                    72\n#\ndefine\n TT_MAC_LANGID_KANNADA                      73\n#\ndefine\n TT_MAC_LANGID_TAMIL                        74\n#\ndefine\n TT_MAC_LANGID_TELUGU                       75\n#\ndefine\n TT_MAC_LANGID_SINHALESE                    76\n#\ndefine\n TT_MAC_LANGID_BURMESE                      77\n#\ndefine\n TT_MAC_LANGID_KHMER                        78\n#\ndefine\n TT_MAC_LANGID_LAO                          79\n#\ndefine\n TT_MAC_LANGID_VIETNAMESE                   80\n#\ndefine\n TT_MAC_LANGID_INDONESIAN                   81\n#\ndefine\n TT_MAC_LANGID_TAGALOG                      82\n#\ndefine\n TT_MAC_LANGID_MALAY_ROMAN_SCRIPT           83\n#\ndefine\n TT_MAC_LANGID_MALAY_ARABIC_SCRIPT          84\n#\ndefine\n TT_MAC_LANGID_AMHARIC                      85\n#\ndefine\n TT_MAC_LANGID_TIGRINYA                     86\n#\ndefine\n TT_MAC_LANGID_GALLA                        87\n#\ndefine\n TT_MAC_LANGID_SOMALI                       88\n#\ndefine\n TT_MAC_LANGID_SWAHILI                      89\n#\ndefine\n TT_MAC_LANGID_RUANDA                       90\n#\ndefine\n TT_MAC_LANGID_RUNDI                        91\n#\ndefine\n TT_MAC_LANGID_CHEWA                        92\n#\ndefine\n TT_MAC_LANGID_MALAGASY                     93\n#\ndefine\n TT_MAC_LANGID_ESPERANTO                    94\n#\ndefine\n TT_MAC_LANGID_WELSH                       128\n#\ndefine\n TT_MAC_LANGID_BASQUE                      129\n#\ndefine\n TT_MAC_LANGID_CATALAN                     130\n#\ndefine\n TT_MAC_LANGID_LATIN                       131\n#\ndefine\n TT_MAC_LANGID_QUECHUA                     132\n#\ndefine\n TT_MAC_LANGID_GUARANI                     133\n#\ndefine\n TT_MAC_LANGID_AYMARA                      134\n#\ndefine\n TT_MAC_LANGID_TATAR                       135\n#\ndefine\n TT_MAC_LANGID_UIGHUR                      136\n#\ndefine\n TT_MAC_LANGID_DZONGKHA                    137\n#\ndefine\n TT_MAC_LANGID_JAVANESE                    138\n#\ndefine\n TT_MAC_LANGID_SUNDANESE                   139\n\n  /* The following codes are new as of 2000-03-10 */\n#\ndefine\n TT_MAC_LANGID_GALICIAN                    140\n#\ndefine\n TT_MAC_LANGID_AFRIKAANS                   141\n#\ndefine\n TT_MAC_LANGID_BRETON                      142\n#\ndefine\n TT_MAC_LANGID_INUKTITUT                   143\n#\ndefine\n TT_MAC_LANGID_SCOTTISH_GAELIC             144\n#\ndefine\n TT_MAC_LANGID_MANX_GAELIC                 145\n#\ndefine\n TT_MAC_LANGID_IRISH_GAELIC                146\n#\ndefine\n TT_MAC_LANGID_TONGAN                      147\n#\ndefine\n TT_MAC_LANGID_GREEK_POLYTONIC             148\n#\ndefine\n TT_MAC_LANGID_GREELANDIC                  149\n#\ndefine\n TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT    150\n\n\n\n\n\n\nPossible values of the language identifier field in the name records of the SFNT \u2018name\u2019 table if the \u2018platform\u2019 identifier code is \nTT_PLATFORM_MACINTOSH\n. These values are also used as return values for function \nFT_Get_CMap_Language_ID\n.\n\n\nThe canonical source for Apple's IDs is\n\n\nhttps://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html\n\n\n\n\n\nTT_MS_LANGID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n TT_MS_LANGID_ARABIC_SAUDI_ARABIA               0x0401\n#\ndefine\n TT_MS_LANGID_ARABIC_IRAQ                       0x0801\n#\ndefine\n TT_MS_LANGID_ARABIC_EGYPT                      0x0C01\n#\ndefine\n TT_MS_LANGID_ARABIC_LIBYA                      0x1001\n#\ndefine\n TT_MS_LANGID_ARABIC_ALGERIA                    0x1401\n#\ndefine\n TT_MS_LANGID_ARABIC_MOROCCO                    0x1801\n#\ndefine\n TT_MS_LANGID_ARABIC_TUNISIA                    0x1C01\n#\ndefine\n TT_MS_LANGID_ARABIC_OMAN                       0x2001\n#\ndefine\n TT_MS_LANGID_ARABIC_YEMEN                      0x2401\n#\ndefine\n TT_MS_LANGID_ARABIC_SYRIA                      0x2801\n#\ndefine\n TT_MS_LANGID_ARABIC_JORDAN                     0x2C01\n#\ndefine\n TT_MS_LANGID_ARABIC_LEBANON                    0x3001\n#\ndefine\n TT_MS_LANGID_ARABIC_KUWAIT                     0x3401\n#\ndefine\n TT_MS_LANGID_ARABIC_UAE                        0x3801\n#\ndefine\n TT_MS_LANGID_ARABIC_BAHRAIN                    0x3C01\n#\ndefine\n TT_MS_LANGID_ARABIC_QATAR                      0x4001\n#\ndefine\n TT_MS_LANGID_BULGARIAN_BULGARIA                0x0402\n#\ndefine\n TT_MS_LANGID_CATALAN_CATALAN                   0x0403\n#\ndefine\n TT_MS_LANGID_CHINESE_TAIWAN                    0x0404\n#\ndefine\n TT_MS_LANGID_CHINESE_PRC                       0x0804\n#\ndefine\n TT_MS_LANGID_CHINESE_HONG_KONG                 0x0C04\n#\ndefine\n TT_MS_LANGID_CHINESE_SINGAPORE                 0x1004\n#\ndefine\n TT_MS_LANGID_CHINESE_MACAO                     0x1404\n#\ndefine\n TT_MS_LANGID_CZECH_CZECH_REPUBLIC              0x0405\n#\ndefine\n TT_MS_LANGID_DANISH_DENMARK                    0x0406\n#\ndefine\n TT_MS_LANGID_GERMAN_GERMANY                    0x0407\n#\ndefine\n TT_MS_LANGID_GERMAN_SWITZERLAND                0x0807\n#\ndefine\n TT_MS_LANGID_GERMAN_AUSTRIA                    0x0C07\n#\ndefine\n TT_MS_LANGID_GERMAN_LUXEMBOURG                 0x1007\n#\ndefine\n TT_MS_LANGID_GERMAN_LIECHTENSTEIN              0x1407\n#\ndefine\n TT_MS_LANGID_GREEK_GREECE                      0x0408\n#\ndefine\n TT_MS_LANGID_ENGLISH_UNITED_STATES             0x0409\n#\ndefine\n TT_MS_LANGID_ENGLISH_UNITED_KINGDOM            0x0809\n#\ndefine\n TT_MS_LANGID_ENGLISH_AUSTRALIA                 0x0C09\n#\ndefine\n TT_MS_LANGID_ENGLISH_CANADA                    0x1009\n#\ndefine\n TT_MS_LANGID_ENGLISH_NEW_ZEALAND               0x1409\n#\ndefine\n TT_MS_LANGID_ENGLISH_IRELAND                   0x1809\n#\ndefine\n TT_MS_LANGID_ENGLISH_SOUTH_AFRICA              0x1C09\n#\ndefine\n TT_MS_LANGID_ENGLISH_JAMAICA                   0x2009\n#\ndefine\n TT_MS_LANGID_ENGLISH_CARIBBEAN                 0x2409\n#\ndefine\n TT_MS_LANGID_ENGLISH_BELIZE                    0x2809\n#\ndefine\n TT_MS_LANGID_ENGLISH_TRINIDAD                  0x2C09\n#\ndefine\n TT_MS_LANGID_ENGLISH_ZIMBABWE                  0x3009\n#\ndefine\n TT_MS_LANGID_ENGLISH_PHILIPPINES               0x3409\n#\ndefine\n TT_MS_LANGID_ENGLISH_INDIA                     0x4009\n#\ndefine\n TT_MS_LANGID_ENGLISH_MALAYSIA                  0x4409\n#\ndefine\n TT_MS_LANGID_ENGLISH_SINGAPORE                 0x4809\n#\ndefine\n TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT    0x040A\n#\ndefine\n TT_MS_LANGID_SPANISH_MEXICO                    0x080A\n#\ndefine\n TT_MS_LANGID_SPANISH_SPAIN_MODERN_SORT         0x0C0A\n#\ndefine\n TT_MS_LANGID_SPANISH_GUATEMALA                 0x100A\n#\ndefine\n TT_MS_LANGID_SPANISH_COSTA_RICA                0x140A\n#\ndefine\n TT_MS_LANGID_SPANISH_PANAMA                    0x180A\n#\ndefine\n TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC        0x1C0A\n#\ndefine\n TT_MS_LANGID_SPANISH_VENEZUELA                 0x200A\n#\ndefine\n TT_MS_LANGID_SPANISH_COLOMBIA                  0x240A\n#\ndefine\n TT_MS_LANGID_SPANISH_PERU                      0x280A\n#\ndefine\n TT_MS_LANGID_SPANISH_ARGENTINA                 0x2C0A\n#\ndefine\n TT_MS_LANGID_SPANISH_ECUADOR                   0x300A\n#\ndefine\n TT_MS_LANGID_SPANISH_CHILE                     0x340A\n#\ndefine\n TT_MS_LANGID_SPANISH_URUGUAY                   0x380A\n#\ndefine\n TT_MS_LANGID_SPANISH_PARAGUAY                  0x3C0A\n#\ndefine\n TT_MS_LANGID_SPANISH_BOLIVIA                   0x400A\n#\ndefine\n TT_MS_LANGID_SPANISH_EL_SALVADOR               0x440A\n#\ndefine\n TT_MS_LANGID_SPANISH_HONDURAS                  0x480A\n#\ndefine\n TT_MS_LANGID_SPANISH_NICARAGUA                 0x4C0A\n#\ndefine\n TT_MS_LANGID_SPANISH_PUERTO_RICO               0x500A\n#\ndefine\n TT_MS_LANGID_SPANISH_UNITED_STATES             0x540A\n#\ndefine\n TT_MS_LANGID_FINNISH_FINLAND                   0x040B\n#\ndefine\n TT_MS_LANGID_FRENCH_FRANCE                     0x040C\n#\ndefine\n TT_MS_LANGID_FRENCH_BELGIUM                    0x080C\n#\ndefine\n TT_MS_LANGID_FRENCH_CANADA                     0x0C0C\n#\ndefine\n TT_MS_LANGID_FRENCH_SWITZERLAND                0x100C\n#\ndefine\n TT_MS_LANGID_FRENCH_LUXEMBOURG                 0x140C\n#\ndefine\n TT_MS_LANGID_FRENCH_MONACO                     0x180C\n#\ndefine\n TT_MS_LANGID_HEBREW_ISRAEL                     0x040D\n#\ndefine\n TT_MS_LANGID_HUNGARIAN_HUNGARY                 0x040E\n#\ndefine\n TT_MS_LANGID_ICELANDIC_ICELAND                 0x040F\n#\ndefine\n TT_MS_LANGID_ITALIAN_ITALY                     0x0410\n#\ndefine\n TT_MS_LANGID_ITALIAN_SWITZERLAND               0x0810\n#\ndefine\n TT_MS_LANGID_JAPANESE_JAPAN                    0x0411\n#\ndefine\n TT_MS_LANGID_KOREAN_KOREA                      0x0412\n#\ndefine\n TT_MS_LANGID_DUTCH_NETHERLANDS                 0x0413\n#\ndefine\n TT_MS_LANGID_DUTCH_BELGIUM                     0x0813\n#\ndefine\n TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL           0x0414\n#\ndefine\n TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK          0x0814\n#\ndefine\n TT_MS_LANGID_POLISH_POLAND                     0x0415\n#\ndefine\n TT_MS_LANGID_PORTUGUESE_BRAZIL                 0x0416\n#\ndefine\n TT_MS_LANGID_PORTUGUESE_PORTUGAL               0x0816\n#\ndefine\n TT_MS_LANGID_ROMANSH_SWITZERLAND               0x0417\n#\ndefine\n TT_MS_LANGID_ROMANIAN_ROMANIA                  0x0418\n#\ndefine\n TT_MS_LANGID_RUSSIAN_RUSSIA                    0x0419\n#\ndefine\n TT_MS_LANGID_CROATIAN_CROATIA                  0x041A\n#\ndefine\n TT_MS_LANGID_SERBIAN_SERBIA_LATIN              0x081A\n#\ndefine\n TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC           0x0C1A\n#\ndefine\n TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA       0x101A\n#\ndefine\n TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA        0x141A\n#\ndefine\n TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN         0x181A\n#\ndefine\n TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC      0x1C1A\n#\ndefine\n TT_MS_LANGID_BOSNIAN_BOSNIA_HERZ_CYRILLIC      0x201A\n#\ndefine\n TT_MS_LANGID_SLOVAK_SLOVAKIA                   0x041B\n#\ndefine\n TT_MS_LANGID_ALBANIAN_ALBANIA                  0x041C\n#\ndefine\n TT_MS_LANGID_SWEDISH_SWEDEN                    0x041D\n#\ndefine\n TT_MS_LANGID_SWEDISH_FINLAND                   0x081D\n#\ndefine\n TT_MS_LANGID_THAI_THAILAND                     0x041E\n#\ndefine\n TT_MS_LANGID_TURKISH_TURKEY                    0x041F\n#\ndefine\n TT_MS_LANGID_URDU_PAKISTAN                     0x0420\n#\ndefine\n TT_MS_LANGID_INDONESIAN_INDONESIA              0x0421\n#\ndefine\n TT_MS_LANGID_UKRAINIAN_UKRAINE                 0x0422\n#\ndefine\n TT_MS_LANGID_BELARUSIAN_BELARUS                0x0423\n#\ndefine\n TT_MS_LANGID_SLOVENIAN_SLOVENIA                0x0424\n#\ndefine\n TT_MS_LANGID_ESTONIAN_ESTONIA                  0x0425\n#\ndefine\n TT_MS_LANGID_LATVIAN_LATVIA                    0x0426\n#\ndefine\n TT_MS_LANGID_LITHUANIAN_LITHUANIA              0x0427\n#\ndefine\n TT_MS_LANGID_TAJIK_TAJIKISTAN                  0x0428\n#\ndefine\n TT_MS_LANGID_VIETNAMESE_VIET_NAM               0x042A\n#\ndefine\n TT_MS_LANGID_ARMENIAN_ARMENIA                  0x042B\n#\ndefine\n TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN            0x042C\n#\ndefine\n TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC         0x082C\n#\ndefine\n TT_MS_LANGID_BASQUE_BASQUE                     0x042D\n#\ndefine\n TT_MS_LANGID_UPPER_SORBIAN_GERMANY             0x042E\n#\ndefine\n TT_MS_LANGID_LOWER_SORBIAN_GERMANY             0x082E\n#\ndefine\n TT_MS_LANGID_MACEDONIAN_MACEDONIA              0x042F\n#\ndefine\n TT_MS_LANGID_SETSWANA_SOUTH_AFRICA             0x0432\n#\ndefine\n TT_MS_LANGID_ISIXHOSA_SOUTH_AFRICA             0x0434\n#\ndefine\n TT_MS_LANGID_ISIZULU_SOUTH_AFRICA              0x0435\n#\ndefine\n TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA            0x0436\n#\ndefine\n TT_MS_LANGID_GEORGIAN_GEORGIA                  0x0437\n#\ndefine\n TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS           0x0438\n#\ndefine\n TT_MS_LANGID_HINDI_INDIA                       0x0439\n#\ndefine\n TT_MS_LANGID_MALTESE_MALTA                     0x043A\n#\ndefine\n TT_MS_LANGID_SAMI_NORTHERN_NORWAY              0x043B\n#\ndefine\n TT_MS_LANGID_SAMI_NORTHERN_SWEDEN              0x083B\n#\ndefine\n TT_MS_LANGID_SAMI_NORTHERN_FINLAND             0x0C3B\n#\ndefine\n TT_MS_LANGID_SAMI_LULE_NORWAY                  0x103B\n#\ndefine\n TT_MS_LANGID_SAMI_LULE_SWEDEN                  0x143B\n#\ndefine\n TT_MS_LANGID_SAMI_SOUTHERN_NORWAY              0x183B\n#\ndefine\n TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN              0x1C3B\n#\ndefine\n TT_MS_LANGID_SAMI_SKOLT_FINLAND                0x203B\n#\ndefine\n TT_MS_LANGID_SAMI_INARI_FINLAND                0x243B\n#\ndefine\n TT_MS_LANGID_IRISH_IRELAND                     0x083C\n#\ndefine\n TT_MS_LANGID_MALAY_MALAYSIA                    0x043E\n#\ndefine\n TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM           0x083E\n#\ndefine\n TT_MS_LANGID_KAZAKH_KAZAKHSTAN                 0x043F\n#\ndefine\n TT_MS_LANGID_KYRGYZ_KYRGYZSTAN /* Cyrillic*/   0x0440\n#\ndefine\n TT_MS_LANGID_KISWAHILI_KENYA                   0x0441\n#\ndefine\n TT_MS_LANGID_TURKMEN_TURKMENISTAN              0x0442\n#\ndefine\n TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN            0x0443\n#\ndefine\n TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC         0x0843\n#\ndefine\n TT_MS_LANGID_TATAR_RUSSIA                      0x0444\n#\ndefine\n TT_MS_LANGID_BENGALI_INDIA                     0x0445\n#\ndefine\n TT_MS_LANGID_BENGALI_BANGLADESH                0x0845\n#\ndefine\n TT_MS_LANGID_PUNJABI_INDIA                     0x0446\n#\ndefine\n TT_MS_LANGID_GUJARATI_INDIA                    0x0447\n#\ndefine\n TT_MS_LANGID_ODIA_INDIA                        0x0448\n#\ndefine\n TT_MS_LANGID_TAMIL_INDIA                       0x0449\n#\ndefine\n TT_MS_LANGID_TELUGU_INDIA                      0x044A\n#\ndefine\n TT_MS_LANGID_KANNADA_INDIA                     0x044B\n#\ndefine\n TT_MS_LANGID_MALAYALAM_INDIA                   0x044C\n#\ndefine\n TT_MS_LANGID_ASSAMESE_INDIA                    0x044D\n#\ndefine\n TT_MS_LANGID_MARATHI_INDIA                     0x044E\n#\ndefine\n TT_MS_LANGID_SANSKRIT_INDIA                    0x044F\n#\ndefine\n TT_MS_LANGID_MONGOLIAN_MONGOLIA /* Cyrillic */ 0x0450\n#\ndefine\n TT_MS_LANGID_MONGOLIAN_PRC                     0x0850\n#\ndefine\n TT_MS_LANGID_TIBETAN_PRC                       0x0451\n#\ndefine\n TT_MS_LANGID_WELSH_UNITED_KINGDOM              0x0452\n#\ndefine\n TT_MS_LANGID_KHMER_CAMBODIA                    0x0453\n#\ndefine\n TT_MS_LANGID_LAO_LAOS                          0x0454\n#\ndefine\n TT_MS_LANGID_GALICIAN_GALICIAN                 0x0456\n#\ndefine\n TT_MS_LANGID_KONKANI_INDIA                     0x0457\n#\ndefine\n TT_MS_LANGID_SYRIAC_SYRIA                      0x045A\n#\ndefine\n TT_MS_LANGID_SINHALA_SRI_LANKA                 0x045B\n#\ndefine\n TT_MS_LANGID_INUKTITUT_CANADA                  0x045D\n#\ndefine\n TT_MS_LANGID_INUKTITUT_CANADA_LATIN            0x085D\n#\ndefine\n TT_MS_LANGID_AMHARIC_ETHIOPIA                  0x045E\n#\ndefine\n TT_MS_LANGID_TAMAZIGHT_ALGERIA                 0x085F\n#\ndefine\n TT_MS_LANGID_NEPALI_NEPAL                      0x0461\n#\ndefine\n TT_MS_LANGID_FRISIAN_NETHERLANDS               0x0462\n#\ndefine\n TT_MS_LANGID_PASHTO_AFGHANISTAN                0x0463\n#\ndefine\n TT_MS_LANGID_FILIPINO_PHILIPPINES              0x0464\n#\ndefine\n TT_MS_LANGID_DHIVEHI_MALDIVES                  0x0465\n#\ndefine\n TT_MS_LANGID_HAUSA_NIGERIA                     0x0468\n#\ndefine\n TT_MS_LANGID_YORUBA_NIGERIA                    0x046A\n#\ndefine\n TT_MS_LANGID_QUECHUA_BOLIVIA                   0x046B\n#\ndefine\n TT_MS_LANGID_QUECHUA_ECUADOR                   0x086B\n#\ndefine\n TT_MS_LANGID_QUECHUA_PERU                      0x0C6B\n#\ndefine\n TT_MS_LANGID_SESOTHO_SA_LEBOA_SOUTH_AFRICA     0x046C\n#\ndefine\n TT_MS_LANGID_BASHKIR_RUSSIA                    0x046D\n#\ndefine\n TT_MS_LANGID_LUXEMBOURGISH_LUXEMBOURG          0x046E\n#\ndefine\n TT_MS_LANGID_GREENLANDIC_GREENLAND             0x046F\n#\ndefine\n TT_MS_LANGID_IGBO_NIGERIA                      0x0470\n#\ndefine\n TT_MS_LANGID_YI_PRC                            0x0478\n#\ndefine\n TT_MS_LANGID_MAPUDUNGUN_CHILE                  0x047A\n#\ndefine\n TT_MS_LANGID_MOHAWK_MOHAWK                     0x047C\n#\ndefine\n TT_MS_LANGID_BRETON_FRANCE                     0x047E\n#\ndefine\n TT_MS_LANGID_UIGHUR_PRC                        0x0480\n#\ndefine\n TT_MS_LANGID_MAORI_NEW_ZEALAND                 0x0481\n#\ndefine\n TT_MS_LANGID_OCCITAN_FRANCE                    0x0482\n#\ndefine\n TT_MS_LANGID_CORSICAN_FRANCE                   0x0483\n#\ndefine\n TT_MS_LANGID_ALSATIAN_FRANCE                   0x0484\n#\ndefine\n TT_MS_LANGID_YAKUT_RUSSIA                      0x0485\n#\ndefine\n TT_MS_LANGID_KICHE_GUATEMALA                   0x0486\n#\ndefine\n TT_MS_LANGID_KINYARWANDA_RWANDA                0x0487\n#\ndefine\n TT_MS_LANGID_WOLOF_SENEGAL                     0x0488\n#\ndefine\n TT_MS_LANGID_DARI_AFGHANISTAN                  0x048C\n\n\n\n\n\n\nPossible values of the language identifier field in the name records of the SFNT \u2018name\u2019 table if the \u2018platform\u2019 identifier code is \nTT_PLATFORM_MICROSOFT\n. These values are also used as return values for function \nFT_Get_CMap_Language_ID\n.\n\n\nThe canonical source for Microsoft's IDs is\n\n\nhttps://www.microsoft.com/globaldev/reference/lcid-all.mspx\n ,\n\n\nhowever, we only provide macros for language identifiers present in the OpenType specification: Microsoft has abandoned the concept of LCIDs (language code identifiers), and format\u00a01 of the \u2018name\u2019 table provides a better mechanism for languages not covered here.\n\n\nMore legacy values not listed in the reference can be found in the \nFT_TRUETYPE_IDS_H\n header file.\n\n\n\n\n\nTT_NAME_ID_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n#\ndefine\n TT_NAME_ID_COPYRIGHT              0\n#\ndefine\n TT_NAME_ID_FONT_FAMILY            1\n#\ndefine\n TT_NAME_ID_FONT_SUBFAMILY         2\n#\ndefine\n TT_NAME_ID_UNIQUE_ID              3\n#\ndefine\n TT_NAME_ID_FULL_NAME              4\n#\ndefine\n TT_NAME_ID_VERSION_STRING         5\n#\ndefine\n TT_NAME_ID_PS_NAME                6\n#\ndefine\n TT_NAME_ID_TRADEMARK              7\n\n  /* the following values are from the OpenType spec */\n#\ndefine\n TT_NAME_ID_MANUFACTURER           8\n#\ndefine\n TT_NAME_ID_DESIGNER               9\n#\ndefine\n TT_NAME_ID_DESCRIPTION            10\n#\ndefine\n TT_NAME_ID_VENDOR_URL             11\n#\ndefine\n TT_NAME_ID_DESIGNER_URL           12\n#\ndefine\n TT_NAME_ID_LICENSE                13\n#\ndefine\n TT_NAME_ID_LICENSE_URL            14\n  /* number 15 is reserved */\n#\ndefine\n TT_NAME_ID_TYPOGRAPHIC_FAMILY     16\n#\ndefine\n TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY  17\n#\ndefine\n TT_NAME_ID_MAC_FULL_NAME          18\n\n  /* The following code is new as of 2000-01-21 */\n#\ndefine\n TT_NAME_ID_SAMPLE_TEXT            19\n\n  /* This is new in OpenType 1.3 */\n#\ndefine\n TT_NAME_ID_CID_FINDFONT_NAME      20\n\n  /* This is new in OpenType 1.5 */\n#\ndefine\n TT_NAME_ID_WWS_FAMILY             21\n#\ndefine\n TT_NAME_ID_WWS_SUBFAMILY          22\n\n  /* This is new in OpenType 1.7 */\n#\ndefine\n TT_NAME_ID_LIGHT_BACKGROUND       23\n#\ndefine\n TT_NAME_ID_DARK_BACKGROUND        24\n\n  /* This is new in OpenType 1.8 */\n#\ndefine\n TT_NAME_ID_VARIATIONS_PREFIX      25\n\n  /* these two values are deprecated */\n#\ndefine\n TT_NAME_ID_PREFERRED_FAMILY     TT_NAME_ID_TYPOGRAPHIC_FAMILY\n#\ndefine\n TT_NAME_ID_PREFERRED_SUBFAMILY  TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY\n\n\n\n\n\n\nPossible values of the \u2018name\u2019 identifier field in the name records of an SFNT \u2018name\u2019 table. These values are platform independent.\n\n\n\n\n\nTT_UCR_XXX\n\u00b6\n\n\nDefined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).\n\n\n\n\n\n  /* ulUnicodeRange1 */\n  /* --------------- */\n\n  /* Bit  0   Basic Latin */\n#\ndefine\n TT_UCR_BASIC_LATIN                     (1L <<  0) /* U+0020-U+007E */\n  /* Bit  1   C1 Controls and Latin-1 Supplement */\n#\ndefine\n TT_UCR_LATIN1_SUPPLEMENT               (1L <<  1) /* U+0080-U+00FF */\n  /* Bit  2   Latin Extended-A */\n#\ndefine\n TT_UCR_LATIN_EXTENDED_A                (1L <<  2) /* U+0100-U+017F */\n  /* Bit  3   Latin Extended-B */\n#\ndefine\n TT_UCR_LATIN_EXTENDED_B                (1L <<  3) /* U+0180-U+024F */\n  /* Bit  4   IPA Extensions                 */\n  /*          Phonetic Extensions            */\n  /*          Phonetic Extensions Supplement */\n#\ndefine\n TT_UCR_IPA_EXTENSIONS                  (1L <<  4) /* U+0250-U+02AF */\n                                                          /* U+1D00-U+1D7F */\n                                                          /* U+1D80-U+1DBF */\n  /* Bit  5   Spacing Modifier Letters */\n  /*          Modifier Tone Letters    */\n#\ndefine\n TT_UCR_SPACING_MODIFIER                (1L <<  5) /* U+02B0-U+02FF */\n                                                          /* U+A700-U+A71F */\n  /* Bit  6   Combining Diacritical Marks            */\n  /*          Combining Diacritical Marks Supplement */\n#\ndefine\n TT_UCR_COMBINING_DIACRITICAL_MARKS     (1L <<  6) /* U+0300-U+036F */\n                                                          /* U+1DC0-U+1DFF */\n  /* Bit  7   Greek and Coptic */\n#\ndefine\n TT_UCR_GREEK                           (1L <<  7) /* U+0370-U+03FF */\n  /* Bit  8   Coptic */\n#\ndefine\n TT_UCR_COPTIC                          (1L <<  8) /* U+2C80-U+2CFF */\n  /* Bit  9   Cyrillic            */\n  /*          Cyrillic Supplement */\n  /*          Cyrillic Extended-A */\n  /*          Cyrillic Extended-B */\n#\ndefine\n TT_UCR_CYRILLIC                        (1L <<  9) /* U+0400-U+04FF */\n                                                          /* U+0500-U+052F */\n                                                          /* U+2DE0-U+2DFF */\n                                                          /* U+A640-U+A69F */\n  /* Bit 10   Armenian */\n#\ndefine\n TT_UCR_ARMENIAN                        (1L << 10) /* U+0530-U+058F */\n  /* Bit 11   Hebrew */\n#\ndefine\n TT_UCR_HEBREW                          (1L << 11) /* U+0590-U+05FF */\n  /* Bit 12   Vai */\n#\ndefine\n TT_UCR_VAI                             (1L << 12) /* U+A500-U+A63F */\n  /* Bit 13   Arabic            */\n  /*          Arabic Supplement */\n#\ndefine\n TT_UCR_ARABIC                          (1L << 13) /* U+0600-U+06FF */\n                                                          /* U+0750-U+077F */\n  /* Bit 14   NKo */\n#\ndefine\n TT_UCR_NKO                             (1L << 14) /* U+07C0-U+07FF */\n  /* Bit 15   Devanagari */\n#\ndefine\n TT_UCR_DEVANAGARI                      (1L << 15) /* U+0900-U+097F */\n  /* Bit 16   Bengali */\n#\ndefine\n TT_UCR_BENGALI                         (1L << 16) /* U+0980-U+09FF */\n  /* Bit 17   Gurmukhi */\n#\ndefine\n TT_UCR_GURMUKHI                        (1L << 17) /* U+0A00-U+0A7F */\n  /* Bit 18   Gujarati */\n#\ndefine\n TT_UCR_GUJARATI                        (1L << 18) /* U+0A80-U+0AFF */\n  /* Bit 19   Oriya */\n#\ndefine\n TT_UCR_ORIYA                           (1L << 19) /* U+0B00-U+0B7F */\n  /* Bit 20   Tamil */\n#\ndefine\n TT_UCR_TAMIL                           (1L << 20) /* U+0B80-U+0BFF */\n  /* Bit 21   Telugu */\n#\ndefine\n TT_UCR_TELUGU                          (1L << 21) /* U+0C00-U+0C7F */\n  /* Bit 22   Kannada */\n#\ndefine\n TT_UCR_KANNADA                         (1L << 22) /* U+0C80-U+0CFF */\n  /* Bit 23   Malayalam */\n#\ndefine\n TT_UCR_MALAYALAM                       (1L << 23) /* U+0D00-U+0D7F */\n  /* Bit 24   Thai */\n#\ndefine\n TT_UCR_THAI                            (1L << 24) /* U+0E00-U+0E7F */\n  /* Bit 25   Lao */\n#\ndefine\n TT_UCR_LAO                             (1L << 25) /* U+0E80-U+0EFF */\n  /* Bit 26   Georgian            */\n  /*          Georgian Supplement */\n#\ndefine\n TT_UCR_GEORGIAN                        (1L << 26) /* U+10A0-U+10FF */\n                                                          /* U+2D00-U+2D2F */\n  /* Bit 27   Balinese */\n#\ndefine\n TT_UCR_BALINESE                        (1L << 27) /* U+1B00-U+1B7F */\n  /* Bit 28   Hangul Jamo */\n#\ndefine\n TT_UCR_HANGUL_JAMO                     (1L << 28) /* U+1100-U+11FF */\n  /* Bit 29   Latin Extended Additional */\n  /*          Latin Extended-C          */\n  /*          Latin Extended-D          */\n#\ndefine\n TT_UCR_LATIN_EXTENDED_ADDITIONAL       (1L << 29) /* U+1E00-U+1EFF */\n                                                          /* U+2C60-U+2C7F */\n                                                          /* U+A720-U+A7FF */\n  /* Bit 30   Greek Extended */\n#\ndefine\n TT_UCR_GREEK_EXTENDED                  (1L << 30) /* U+1F00-U+1FFF */\n  /* Bit 31   General Punctuation      */\n  /*          Supplemental Punctuation */\n#\ndefine\n TT_UCR_GENERAL_PUNCTUATION             (1L << 31) /* U+2000-U+206F */\n                                                          /* U+2E00-U+2E7F */\n\n  /* ulUnicodeRange2 */\n  /* --------------- */\n\n  /* Bit 32   Superscripts And Subscripts */\n#\ndefine\n TT_UCR_SUPERSCRIPTS_SUBSCRIPTS         (1L <<  0) /* U+2070-U+209F */\n  /* Bit 33   Currency Symbols */\n#\ndefine\n TT_UCR_CURRENCY_SYMBOLS                (1L <<  1) /* U+20A0-U+20CF */\n  /* Bit 34   Combining Diacritical Marks For Symbols */\n#\ndefine\n TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB \\\n                                               (1L <<  2) /* U+20D0-U+20FF */\n  /* Bit 35   Letterlike Symbols */\n#\ndefine\n TT_UCR_LETTERLIKE_SYMBOLS              (1L <<  3) /* U+2100-U+214F */\n  /* Bit 36   Number Forms */\n#\ndefine\n TT_UCR_NUMBER_FORMS                    (1L <<  4) /* U+2150-U+218F */\n  /* Bit 37   Arrows                           */\n  /*          Supplemental Arrows-A            */\n  /*          Supplemental Arrows-B            */\n  /*          Miscellaneous Symbols and Arrows */\n#\ndefine\n TT_UCR_ARROWS                          (1L <<  5) /* U+2190-U+21FF */\n                                                          /* U+27F0-U+27FF */\n                                                          /* U+2900-U+297F */\n                                                          /* U+2B00-U+2BFF */\n  /* Bit 38   Mathematical Operators               */\n  /*          Supplemental Mathematical Operators  */\n  /*          Miscellaneous Mathematical Symbols-A */\n  /*          Miscellaneous Mathematical Symbols-B */\n#\ndefine\n TT_UCR_MATHEMATICAL_OPERATORS          (1L <<  6) /* U+2200-U+22FF */\n                                                          /* U+2A00-U+2AFF */\n                                                          /* U+27C0-U+27EF */\n                                                          /* U+2980-U+29FF */\n  /* Bit 39 Miscellaneous Technical */\n#\ndefine\n TT_UCR_MISCELLANEOUS_TECHNICAL         (1L <<  7) /* U+2300-U+23FF */\n  /* Bit 40   Control Pictures */\n#\ndefine\n TT_UCR_CONTROL_PICTURES                (1L <<  8) /* U+2400-U+243F */\n  /* Bit 41   Optical Character Recognition */\n#\ndefine\n TT_UCR_OCR                             (1L <<  9) /* U+2440-U+245F */\n  /* Bit 42   Enclosed Alphanumerics */\n#\ndefine\n TT_UCR_ENCLOSED_ALPHANUMERICS          (1L << 10) /* U+2460-U+24FF */\n  /* Bit 43   Box Drawing */\n#\ndefine\n TT_UCR_BOX_DRAWING                     (1L << 11) /* U+2500-U+257F */\n  /* Bit 44   Block Elements */\n#\ndefine\n TT_UCR_BLOCK_ELEMENTS                  (1L << 12) /* U+2580-U+259F */\n  /* Bit 45   Geometric Shapes */\n#\ndefine\n TT_UCR_GEOMETRIC_SHAPES                (1L << 13) /* U+25A0-U+25FF */\n  /* Bit 46   Miscellaneous Symbols */\n#\ndefine\n TT_UCR_MISCELLANEOUS_SYMBOLS           (1L << 14) /* U+2600-U+26FF */\n  /* Bit 47   Dingbats */\n#\ndefine\n TT_UCR_DINGBATS                        (1L << 15) /* U+2700-U+27BF */\n  /* Bit 48   CJK Symbols and Punctuation */\n#\ndefine\n TT_UCR_CJK_SYMBOLS                     (1L << 16) /* U+3000-U+303F */\n  /* Bit 49   Hiragana */\n#\ndefine\n TT_UCR_HIRAGANA                        (1L << 17) /* U+3040-U+309F */\n  /* Bit 50   Katakana                     */\n  /*          Katakana Phonetic Extensions */\n#\ndefine\n TT_UCR_KATAKANA                        (1L << 18) /* U+30A0-U+30FF */\n                                                          /* U+31F0-U+31FF */\n  /* Bit 51   Bopomofo          */\n  /*          Bopomofo Extended */\n#\ndefine\n TT_UCR_BOPOMOFO                        (1L << 19) /* U+3100-U+312F */\n                                                          /* U+31A0-U+31BF */\n  /* Bit 52   Hangul Compatibility Jamo */\n#\ndefine\n TT_UCR_HANGUL_COMPATIBILITY_JAMO       (1L << 20) /* U+3130-U+318F */\n  /* Bit 53   Phags-Pa */\n#\ndefine\n TT_UCR_CJK_MISC                        (1L << 21) /* U+A840-U+A87F */\n#\ndefine\n TT_UCR_KANBUN  TT_UCR_CJK_MISC /* deprecated */\n#\ndefine\n TT_UCR_PHAGSPA\n  /* Bit 54   Enclosed CJK Letters and Months */\n#\ndefine\n TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS     (1L << 22) /* U+3200-U+32FF */\n  /* Bit 55   CJK Compatibility */\n#\ndefine\n TT_UCR_CJK_COMPATIBILITY               (1L << 23) /* U+3300-U+33FF */\n  /* Bit 56   Hangul Syllables */\n#\ndefine\n TT_UCR_HANGUL                          (1L << 24) /* U+AC00-U+D7A3 */\n  /* Bit 57   High Surrogates              */\n  /*          High Private Use Surrogates  */\n  /*          Low Surrogates               */\n\n  /* According to OpenType specs v.1.3+,   */\n  /* setting bit 57 implies that there is  */\n  /* at least one codepoint beyond the     */\n  /* Basic Multilingual Plane that is      */\n  /* supported by this font.  So it really */\n  /* means >= U+10000.                     */\n#\ndefine\n TT_UCR_SURROGATES                      (1L << 25) /* U+D800-U+DB7F */\n                                                          /* U+DB80-U+DBFF */\n                                                          /* U+DC00-U+DFFF */\n#\ndefine\n TT_UCR_NON_PLANE_0  TT_UCR_SURROGATES\n  /* Bit 58  Phoenician */\n#\ndefine\n TT_UCR_PHOENICIAN                      (1L << 26) /*U+10900-U+1091F*/\n  /* Bit 59   CJK Unified Ideographs             */\n  /*          CJK Radicals Supplement            */\n  /*          Kangxi Radicals                    */\n  /*          Ideographic Description Characters */\n  /*          CJK Unified Ideographs Extension A */\n  /*          CJK Unified Ideographs Extension B */\n  /*          Kanbun                             */\n#\ndefine\n TT_UCR_CJK_UNIFIED_IDEOGRAPHS          (1L << 27) /* U+4E00-U+9FFF */\n                                                          /* U+2E80-U+2EFF */\n                                                          /* U+2F00-U+2FDF */\n                                                          /* U+2FF0-U+2FFF */\n                                                          /* U+3400-U+4DB5 */\n                                                          /*U+20000-U+2A6DF*/\n                                                          /* U+3190-U+319F */\n  /* Bit 60   Private Use */\n#\ndefine\n TT_UCR_PRIVATE_USE                     (1L << 28) /* U+E000-U+F8FF */\n  /* Bit 61   CJK Strokes                             */\n  /*          CJK Compatibility Ideographs            */\n  /*          CJK Compatibility Ideographs Supplement */\n#\ndefine\n TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS    (1L << 29) /* U+31C0-U+31EF */\n                                                          /* U+F900-U+FAFF */\n                                                          /*U+2F800-U+2FA1F*/\n  /* Bit 62   Alphabetic Presentation Forms */\n#\ndefine\n TT_UCR_ALPHABETIC_PRESENTATION_FORMS   (1L << 30) /* U+FB00-U+FB4F */\n  /* Bit 63   Arabic Presentation Forms-A */\n#\ndefine\n TT_UCR_ARABIC_PRESENTATION_FORMS_A     (1L << 31) /* U+FB50-U+FDFF */\n\n  /* ulUnicodeRange3 */\n  /* --------------- */\n\n  /* Bit 64   Combining Half Marks */\n#\ndefine\n TT_UCR_COMBINING_HALF_MARKS            (1L <<  0) /* U+FE20-U+FE2F */\n  /* Bit 65   Vertical forms          */\n  /*          CJK Compatibility Forms */\n#\ndefine\n TT_UCR_CJK_COMPATIBILITY_FORMS         (1L <<  1) /* U+FE10-U+FE1F */\n                                                          /* U+FE30-U+FE4F */\n  /* Bit 66   Small Form Variants */\n#\ndefine\n TT_UCR_SMALL_FORM_VARIANTS             (1L <<  2) /* U+FE50-U+FE6F */\n  /* Bit 67   Arabic Presentation Forms-B */\n#\ndefine\n TT_UCR_ARABIC_PRESENTATION_FORMS_B     (1L <<  3) /* U+FE70-U+FEFE */\n  /* Bit 68   Halfwidth and Fullwidth Forms */\n#\ndefine\n TT_UCR_HALFWIDTH_FULLWIDTH_FORMS       (1L <<  4) /* U+FF00-U+FFEF */\n  /* Bit 69   Specials */\n#\ndefine\n TT_UCR_SPECIALS                        (1L <<  5) /* U+FFF0-U+FFFD */\n  /* Bit 70   Tibetan */\n#\ndefine\n TT_UCR_TIBETAN                         (1L <<  6) /* U+0F00-U+0FFF */\n  /* Bit 71   Syriac */\n#\ndefine\n TT_UCR_SYRIAC                          (1L <<  7) /* U+0700-U+074F */\n  /* Bit 72   Thaana */\n#\ndefine\n TT_UCR_THAANA                          (1L <<  8) /* U+0780-U+07BF */\n  /* Bit 73   Sinhala */\n#\ndefine\n TT_UCR_SINHALA                         (1L <<  9) /* U+0D80-U+0DFF */\n  /* Bit 74   Myanmar */\n#\ndefine\n TT_UCR_MYANMAR                         (1L << 10) /* U+1000-U+109F */\n  /* Bit 75   Ethiopic            */\n  /*          Ethiopic Supplement */\n  /*          Ethiopic Extended   */\n#\ndefine\n TT_UCR_ETHIOPIC                        (1L << 11) /* U+1200-U+137F */\n                                                          /* U+1380-U+139F */\n                                                          /* U+2D80-U+2DDF */\n  /* Bit 76   Cherokee */\n#\ndefine\n TT_UCR_CHEROKEE                        (1L << 12) /* U+13A0-U+13FF */\n  /* Bit 77   Unified Canadian Aboriginal Syllabics */\n#\ndefine\n TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS   (1L << 13) /* U+1400-U+167F */\n  /* Bit 78   Ogham */\n#\ndefine\n TT_UCR_OGHAM                           (1L << 14) /* U+1680-U+169F */\n  /* Bit 79   Runic */\n#\ndefine\n TT_UCR_RUNIC                           (1L << 15) /* U+16A0-U+16FF */\n  /* Bit 80   Khmer         */\n  /*          Khmer Symbols */\n#\ndefine\n TT_UCR_KHMER                           (1L << 16) /* U+1780-U+17FF */\n                                                          /* U+19E0-U+19FF */\n  /* Bit 81   Mongolian */\n#\ndefine\n TT_UCR_MONGOLIAN                       (1L << 17) /* U+1800-U+18AF */\n  /* Bit 82   Braille Patterns */\n#\ndefine\n TT_UCR_BRAILLE                         (1L << 18) /* U+2800-U+28FF */\n  /* Bit 83   Yi Syllables */\n  /*          Yi Radicals  */\n#\ndefine\n TT_UCR_YI                              (1L << 19) /* U+A000-U+A48F */\n                                                          /* U+A490-U+A4CF */\n  /* Bit 84   Tagalog  */\n  /*          Hanunoo  */\n  /*          Buhid    */\n  /*          Tagbanwa */\n#\ndefine\n TT_UCR_PHILIPPINE                      (1L << 20) /* U+1700-U+171F */\n                                                          /* U+1720-U+173F */\n                                                          /* U+1740-U+175F */\n                                                          /* U+1760-U+177F */\n  /* Bit 85   Old Italic */\n#\ndefine\n TT_UCR_OLD_ITALIC                      (1L << 21) /*U+10300-U+1032F*/\n  /* Bit 86   Gothic */\n#\ndefine\n TT_UCR_GOTHIC                          (1L << 22) /*U+10330-U+1034F*/\n  /* Bit 87   Deseret */\n#\ndefine\n TT_UCR_DESERET                         (1L << 23) /*U+10400-U+1044F*/\n  /* Bit 88   Byzantine Musical Symbols      */\n  /*          Musical Symbols                */\n  /*          Ancient Greek Musical Notation */\n#\ndefine\n TT_UCR_MUSICAL_SYMBOLS                 (1L << 24) /*U+1D000-U+1D0FF*/\n                                                          /*U+1D100-U+1D1FF*/\n                                                          /*U+1D200-U+1D24F*/\n  /* Bit 89   Mathematical Alphanumeric Symbols */\n#\ndefine\n TT_UCR_MATH_ALPHANUMERIC_SYMBOLS       (1L << 25) /*U+1D400-U+1D7FF*/\n  /* Bit 90   Private Use (plane 15) */\n  /*          Private Use (plane 16) */\n#\ndefine\n TT_UCR_PRIVATE_USE_SUPPLEMENTARY       (1L << 26) /*U+F0000-U+FFFFD*/\n                                                        /*U+100000-U+10FFFD*/\n  /* Bit 91   Variation Selectors            */\n  /*          Variation Selectors Supplement */\n#\ndefine\n TT_UCR_VARIATION_SELECTORS             (1L << 27) /* U+FE00-U+FE0F */\n                                                          /*U+E0100-U+E01EF*/\n  /* Bit 92   Tags */\n#\ndefine\n TT_UCR_TAGS                            (1L << 28) /*U+E0000-U+E007F*/\n  /* Bit 93   Limbu */\n#\ndefine\n TT_UCR_LIMBU                           (1L << 29) /* U+1900-U+194F */\n  /* Bit 94   Tai Le */\n#\ndefine\n TT_UCR_TAI_LE                          (1L << 30) /* U+1950-U+197F */\n  /* Bit 95   New Tai Lue */\n#\ndefine\n TT_UCR_NEW_TAI_LUE                     (1L << 31) /* U+1980-U+19DF */\n\n  /* ulUnicodeRange4 */\n  /* --------------- */\n\n  /* Bit 96   Buginese */\n#\ndefine\n TT_UCR_BUGINESE                        (1L <<  0) /* U+1A00-U+1A1F */\n  /* Bit 97   Glagolitic */\n#\ndefine\n TT_UCR_GLAGOLITIC                      (1L <<  1) /* U+2C00-U+2C5F */\n  /* Bit 98   Tifinagh */\n#\ndefine\n TT_UCR_TIFINAGH                        (1L <<  2) /* U+2D30-U+2D7F */\n  /* Bit 99   Yijing Hexagram Symbols */\n#\ndefine\n TT_UCR_YIJING                          (1L <<  3) /* U+4DC0-U+4DFF */\n  /* Bit 100  Syloti Nagri */\n#\ndefine\n TT_UCR_SYLOTI_NAGRI                    (1L <<  4) /* U+A800-U+A82F */\n  /* Bit 101  Linear B Syllabary */\n  /*          Linear B Ideograms */\n  /*          Aegean Numbers     */\n#\ndefine\n TT_UCR_LINEAR_B                        (1L <<  5) /*U+10000-U+1007F*/\n                                                          /*U+10080-U+100FF*/\n                                                          /*U+10100-U+1013F*/\n  /* Bit 102  Ancient Greek Numbers */\n#\ndefine\n TT_UCR_ANCIENT_GREEK_NUMBERS           (1L <<  6) /*U+10140-U+1018F*/\n  /* Bit 103  Ugaritic */\n#\ndefine\n TT_UCR_UGARITIC                        (1L <<  7) /*U+10380-U+1039F*/\n  /* Bit 104  Old Persian */\n#\ndefine\n TT_UCR_OLD_PERSIAN                     (1L <<  8) /*U+103A0-U+103DF*/\n  /* Bit 105  Shavian */\n#\ndefine\n TT_UCR_SHAVIAN                         (1L <<  9) /*U+10450-U+1047F*/\n  /* Bit 106  Osmanya */\n#\ndefine\n TT_UCR_OSMANYA                         (1L << 10) /*U+10480-U+104AF*/\n  /* Bit 107  Cypriot Syllabary */\n#\ndefine\n TT_UCR_CYPRIOT_SYLLABARY               (1L << 11) /*U+10800-U+1083F*/\n  /* Bit 108  Kharoshthi */\n#\ndefine\n TT_UCR_KHAROSHTHI                      (1L << 12) /*U+10A00-U+10A5F*/\n  /* Bit 109  Tai Xuan Jing Symbols */\n#\ndefine\n TT_UCR_TAI_XUAN_JING                   (1L << 13) /*U+1D300-U+1D35F*/\n  /* Bit 110  Cuneiform                         */\n  /*          Cuneiform Numbers and Punctuation */\n#\ndefine\n TT_UCR_CUNEIFORM                       (1L << 14) /*U+12000-U+123FF*/\n                                                          /*U+12400-U+1247F*/\n  /* Bit 111  Counting Rod Numerals */\n#\ndefine\n TT_UCR_COUNTING_ROD_NUMERALS           (1L << 15) /*U+1D360-U+1D37F*/\n  /* Bit 112  Sundanese */\n#\ndefine\n TT_UCR_SUNDANESE                       (1L << 16) /* U+1B80-U+1BBF */\n  /* Bit 113  Lepcha */\n#\ndefine\n TT_UCR_LEPCHA                          (1L << 17) /* U+1C00-U+1C4F */\n  /* Bit 114  Ol Chiki */\n#\ndefine\n TT_UCR_OL_CHIKI                        (1L << 18) /* U+1C50-U+1C7F */\n  /* Bit 115  Saurashtra */\n#\ndefine\n TT_UCR_SAURASHTRA                      (1L << 19) /* U+A880-U+A8DF */\n  /* Bit 116  Kayah Li */\n#\ndefine\n TT_UCR_KAYAH_LI                        (1L << 20) /* U+A900-U+A92F */\n  /* Bit 117  Rejang */\n#\ndefine\n TT_UCR_REJANG                          (1L << 21) /* U+A930-U+A95F */\n  /* Bit 118  Cham */\n#\ndefine\n TT_UCR_CHAM                            (1L << 22) /* U+AA00-U+AA5F */\n  /* Bit 119  Ancient Symbols */\n#\ndefine\n TT_UCR_ANCIENT_SYMBOLS                 (1L << 23) /*U+10190-U+101CF*/\n  /* Bit 120  Phaistos Disc */\n#\ndefine\n TT_UCR_PHAISTOS_DISC                   (1L << 24) /*U+101D0-U+101FF*/\n  /* Bit 121  Carian */\n  /*          Lycian */\n  /*          Lydian */\n#\ndefine\n TT_UCR_OLD_ANATOLIAN                   (1L << 25) /*U+102A0-U+102DF*/\n                                                          /*U+10280-U+1029F*/\n                                                          /*U+10920-U+1093F*/\n  /* Bit 122  Domino Tiles  */\n  /*          Mahjong Tiles */\n#\ndefine\n TT_UCR_GAME_TILES                      (1L << 26) /*U+1F030-U+1F09F*/\n                                                          /*U+1F000-U+1F02F*/\n  /* Bit 123-127 Reserved for process-internal usage */\n\n\n\n\n\n\nPossible bit mask values for the \nulUnicodeRangeX\n fields in an SFNT \u2018OS/2\u2019 table.",
            "title": "TrueType Tables"
        },
        {
            "location": "/ft2-truetype_tables/index.html#truetype-tables",
            "text": "",
            "title": "TrueType Tables"
        },
        {
            "location": "/ft2-truetype_tables/index.html#synopsis",
            "text": "This section contains definitions of some basic tables specific to TrueType and OpenType as well as some routines used to access and process them.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_header",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_Header_\n  {\n     FT_Fixed    Table_Version;\n     FT_Fixed    Font_Revision;\n\n     FT_Long     CheckSum_Adjust;\n     FT_Long     Magic_Number;\n\n     FT_UShort   Flags;\n     FT_UShort   Units_Per_EM;\n\n     FT_Long     Created [2];\n     FT_Long     Modified[2];\n\n     FT_Short    xMin;\n     FT_Short    yMin;\n     FT_Short    xMax;\n     FT_Short    yMax;\n\n     FT_UShort   Mac_Style;\n     FT_UShort   Lowest_Rec_PPEM;\n\n     FT_Short    Font_Direction;\n     FT_Short    Index_To_Loc_Format;\n     FT_Short    Glyph_Data_Format;\n\n  }  TT_Header ;   A structure to model a TrueType font header table. All fields follow the OpenType specification.",
            "title": "TT_Header"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_horiheader",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_HoriHeader_\n  {\n     FT_Fixed    Version;\n     FT_Short    Ascender;\n     FT_Short    Descender;\n     FT_Short    Line_Gap;\n\n     FT_UShort   advance_Width_Max;      /* advance width maximum */\n\n     FT_Short    min_Left_Side_Bearing;  /* minimum left-sb       */\n     FT_Short    min_Right_Side_Bearing; /* minimum right-sb      */\n     FT_Short    xMax_Extent;            /* xmax extents          */\n     FT_Short    caret_Slope_Rise;\n     FT_Short    caret_Slope_Run;\n     FT_Short    caret_Offset;\n\n     FT_Short    Reserved[4];\n\n     FT_Short    metric_Data_Format;\n     FT_UShort   number_Of_HMetrics;\n\n    /* The following fields are not defined by the OpenType specification */\n    /* but they are used to connect the metrics header to the relevant    */\n    /* `hmtx' table.                                                      */\n\n     void *      long_metrics;\n     void *      short_metrics;\n\n  }  TT_HoriHeader ;   A structure to model a TrueType horizontal header, the \u2018hhea\u2019 table, as well as the corresponding horizontal metrics table, \u2018hmtx\u2019.",
            "title": "TT_HoriHeader"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_vertheader",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_VertHeader_\n  {\n     FT_Fixed    Version;\n     FT_Short    Ascender;\n     FT_Short    Descender;\n     FT_Short    Line_Gap;\n\n     FT_UShort   advance_Height_Max;      /* advance height maximum */\n\n     FT_Short    min_Top_Side_Bearing;    /* minimum top-sb          */\n     FT_Short    min_Bottom_Side_Bearing; /* minimum bottom-sb       */\n     FT_Short    yMax_Extent;             /* ymax extents            */\n     FT_Short    caret_Slope_Rise;\n     FT_Short    caret_Slope_Run;\n     FT_Short    caret_Offset;\n\n     FT_Short    Reserved[4];\n\n     FT_Short    metric_Data_Format;\n     FT_UShort   number_Of_VMetrics;\n\n    /* The following fields are not defined by the OpenType specification */\n    /* but they are used to connect the metrics header to the relevant    */\n    /* `vmtx' table.                                                      */\n\n     void *      long_metrics;\n     void *      short_metrics;\n\n  }  TT_VertHeader ;   A structure used to model a TrueType vertical header, the \u2018vhea\u2019 table, as well as the corresponding vertical metrics table, \u2018vmtx\u2019.",
            "title": "TT_VertHeader"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_os2",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_OS2_\n  {\n     FT_UShort   version;                /* 0x0001 - more or 0xFFFF */\n     FT_Short    xAvgCharWidth;\n     FT_UShort   usWeightClass;\n     FT_UShort   usWidthClass;\n     FT_UShort   fsType;\n     FT_Short    ySubscriptXSize;\n     FT_Short    ySubscriptYSize;\n     FT_Short    ySubscriptXOffset;\n     FT_Short    ySubscriptYOffset;\n     FT_Short    ySuperscriptXSize;\n     FT_Short    ySuperscriptYSize;\n     FT_Short    ySuperscriptXOffset;\n     FT_Short    ySuperscriptYOffset;\n     FT_Short    yStrikeoutSize;\n     FT_Short    yStrikeoutPosition;\n     FT_Short    sFamilyClass;\n\n     FT_Byte     panose[10];\n\n     FT_ULong    ulUnicodeRange1;        /* Bits 0-31   */\n     FT_ULong    ulUnicodeRange2;        /* Bits 32-63  */\n     FT_ULong    ulUnicodeRange3;        /* Bits 64-95  */\n     FT_ULong    ulUnicodeRange4;        /* Bits 96-127 */\n\n     FT_Char     achVendID[4];\n\n     FT_UShort   fsSelection;\n     FT_UShort   usFirstCharIndex;\n     FT_UShort   usLastCharIndex;\n     FT_Short    sTypoAscender;\n     FT_Short    sTypoDescender;\n     FT_Short    sTypoLineGap;\n     FT_UShort   usWinAscent;\n     FT_UShort   usWinDescent;\n\n    /* only version 1 and higher: */\n\n     FT_ULong    ulCodePageRange1;       /* Bits 0-31   */\n     FT_ULong    ulCodePageRange2;       /* Bits 32-63  */\n\n    /* only version 2 and higher: */\n\n     FT_Short    sxHeight;\n     FT_Short    sCapHeight;\n     FT_UShort   usDefaultChar;\n     FT_UShort   usBreakChar;\n     FT_UShort   usMaxContext;\n\n    /* only version 5 and higher: */\n\n     FT_UShort   usLowerOpticalPointSize;       /* in twips (1/20th points) */\n     FT_UShort   usUpperOpticalPointSize;       /* in twips (1/20th points) */\n\n  }  TT_OS2 ;   A structure to model a TrueType \u2018OS/2\u2019 table. All fields comply to the OpenType specification.  Note that we now support old Mac fonts that do not include an \u2018OS/2\u2019 table. In this case, the \u2018version\u2019 field is always set to 0xFFFF.",
            "title": "TT_OS2"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_postscript",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_Postscript_\n  {\n     FT_Fixed   FormatType;\n     FT_Fixed   italicAngle;\n     FT_Short   underlinePosition;\n     FT_Short   underlineThickness;\n     FT_ULong   isFixedPitch;\n     FT_ULong   minMemType42;\n     FT_ULong   maxMemType42;\n     FT_ULong   minMemType1;\n     FT_ULong   maxMemType1;\n\n    /* Glyph names follow in the `post' table, but we don't */\n    /* load them by default.                                */\n\n  }  TT_Postscript ;   A structure to model a TrueType \u2018post\u2019 table. All fields comply to the OpenType specification. This structure does not reference a font's PostScript glyph names; use  FT_Get_Glyph_Name  to retrieve them.",
            "title": "TT_Postscript"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_pclt",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_PCLT_\n  {\n     FT_Fixed    Version;\n     FT_ULong    FontNumber;\n     FT_UShort   Pitch;\n     FT_UShort   xHeight;\n     FT_UShort   Style;\n     FT_UShort   TypeFamily;\n     FT_UShort   CapHeight;\n     FT_UShort   SymbolSet;\n     FT_Char     TypeFace[16];\n     FT_Char     CharacterComplement[8];\n     FT_Char     FileName[6];\n     FT_Char     StrokeWeight;\n     FT_Char     WidthType;\n     FT_Byte     SerifStyle;\n     FT_Byte     Reserved;\n\n  }  TT_PCLT ;   A structure to model a TrueType \u2018PCLT\u2019 table. All fields comply to the OpenType specification.",
            "title": "TT_PCLT"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_maxprofile",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   struct   TT_MaxProfile_\n  {\n     FT_Fixed    version;\n     FT_UShort   numGlyphs;\n     FT_UShort   maxPoints;\n     FT_UShort   maxContours;\n     FT_UShort   maxCompositePoints;\n     FT_UShort   maxCompositeContours;\n     FT_UShort   maxZones;\n     FT_UShort   maxTwilightPoints;\n     FT_UShort   maxStorage;\n     FT_UShort   maxFunctionDefs;\n     FT_UShort   maxInstructionDefs;\n     FT_UShort   maxStackElements;\n     FT_UShort   maxSizeOfInstructions;\n     FT_UShort   maxComponentElements;\n     FT_UShort   maxComponentDepth;\n\n  }  TT_MaxProfile ;   The maximum profile (\u2018maxp\u2019) table contains many max values, which can be used to pre-allocate arrays for speeding up glyph loading and hinting.",
            "title": "TT_MaxProfile"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_sfnt_tag",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n   typedef   enum   FT_Sfnt_Tag_\n  {\n     FT_SFNT_HEAD ,\n     FT_SFNT_MAXP ,\n     FT_SFNT_OS2 ,\n     FT_SFNT_HHEA ,\n     FT_SFNT_VHEA ,\n     FT_SFNT_POST ,\n     FT_SFNT_PCLT ,\n\n    FT_SFNT_MAX\n\n  }  FT_Sfnt_Tag ;\n\n  /* these constants are deprecated; use the corresponding ` FT_Sfnt_Tag ' */\n  /* values instead                                                      */\n# define  ft_sfnt_head   FT_SFNT_HEAD \n# define  ft_sfnt_maxp   FT_SFNT_MAXP \n# define  ft_sfnt_os2    FT_SFNT_OS2 \n# define  ft_sfnt_hhea   FT_SFNT_HHEA \n# define  ft_sfnt_vhea   FT_SFNT_VHEA \n# define  ft_sfnt_post   FT_SFNT_POST \n# define  ft_sfnt_pclt   FT_SFNT_PCLT    An enumeration to specify indices of SFNT tables loaded and parsed by FreeType during initialization of an SFNT font. Used in the  FT_Get_Sfnt_Table  API function.",
            "title": "FT_Sfnt_Tag"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_get_sfnt_table",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n  FT_EXPORT(  void * )\n   FT_Get_Sfnt_Table (  FT_Face       face,\n                      FT_Sfnt_Tag   tag );   Return a pointer to a given SFNT table stored within a face.",
            "title": "FT_Get_Sfnt_Table"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_load_sfnt_table",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Load_Sfnt_Table (  FT_Face     face,\n                       FT_ULong    tag,\n                       FT_Long     offset,\n                       FT_Byte *   buffer,\n                       FT_ULong *  length );   Load any SFNT font table into client memory.",
            "title": "FT_Load_Sfnt_Table"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_sfnt_table_info",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Sfnt_Table_Info (  FT_Face     face,\n                       FT_UInt     table_index,\n                       FT_ULong   *tag,\n                       FT_ULong   *length );   Return information on an SFNT table.",
            "title": "FT_Sfnt_Table_Info"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_get_cmap_language_id",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n  FT_EXPORT(  FT_ULong  )\n   FT_Get_CMap_Language_ID (  FT_CharMap   charmap );   Return cmap language ID as specified in the OpenType standard. Definitions of language ID values are in file  FT_TRUETYPE_IDS_H .",
            "title": "FT_Get_CMap_Language_ID"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_get_cmap_format",
            "text": "Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).   \n  FT_EXPORT(  FT_Long  )\n   FT_Get_CMap_Format (  FT_CharMap   charmap );   Return the format of an SFNT \u2018cmap\u2019 table.",
            "title": "FT_Get_CMap_Format"
        },
        {
            "location": "/ft2-truetype_tables/index.html#ft_param_tag_unpatented_hinting",
            "text": "# define   FT_PARAM_TAG_UNPATENTED_HINTING  \\\n           FT_MAKE_TAG ( 'u', 'n', 'p', 'a' )   Deprecated, no effect.  Previously: A constant used as the tag of an  FT_Parameter  structure to indicate that unpatented methods only should be used by the TrueType bytecode interpreter for a typeface opened by  FT_Open_Face .",
            "title": "FT_PARAM_TAG_UNPATENTED_HINTING"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_platform_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define   TT_PLATFORM_APPLE_UNICODE   0\n# define   TT_PLATFORM_MACINTOSH       1\n# define   TT_PLATFORM_ISO             2 /* deprecated */\n# define   TT_PLATFORM_MICROSOFT       3\n# define   TT_PLATFORM_CUSTOM          4\n# define   TT_PLATFORM_ADOBE           7 /* artificial */   A list of valid values for the  platform_id  identifier code in  FT_CharMapRec  and  FT_SfntName  structures.",
            "title": "TT_PLATFORM_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_apple_id_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define   TT_APPLE_ID_DEFAULT            0 /* Unicode 1.0                   */\n# define   TT_APPLE_ID_UNICODE_1_1        1 /* specify Hangul at U+34xx      */\n# define   TT_APPLE_ID_ISO_10646          2 /* deprecated                    */\n# define   TT_APPLE_ID_UNICODE_2_0        3 /* or later                      */\n# define   TT_APPLE_ID_UNICODE_32         4 /* 2.0 or later, full repertoire */\n# define   TT_APPLE_ID_VARIANT_SELECTOR   5 /* variation selector data       */\n# define   TT_APPLE_ID_FULL_UNICODE       6 /* used with type 13 cmaps       */   A list of valid values for the  encoding_id  for  TT_PLATFORM_APPLE_UNICODE  charmaps and name entries.",
            "title": "TT_APPLE_ID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_mac_id_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define  TT_MAC_ID_ROMAN                 0\n# define  TT_MAC_ID_JAPANESE              1\n# define  TT_MAC_ID_TRADITIONAL_CHINESE   2\n# define  TT_MAC_ID_KOREAN                3\n# define  TT_MAC_ID_ARABIC                4\n# define  TT_MAC_ID_HEBREW                5\n# define  TT_MAC_ID_GREEK                 6\n# define  TT_MAC_ID_RUSSIAN               7\n# define  TT_MAC_ID_RSYMBOL               8\n# define  TT_MAC_ID_DEVANAGARI            9\n# define  TT_MAC_ID_GURMUKHI             10\n# define  TT_MAC_ID_GUJARATI             11\n# define  TT_MAC_ID_ORIYA                12\n# define  TT_MAC_ID_BENGALI              13\n# define  TT_MAC_ID_TAMIL                14\n# define  TT_MAC_ID_TELUGU               15\n# define  TT_MAC_ID_KANNADA              16\n# define  TT_MAC_ID_MALAYALAM            17\n# define  TT_MAC_ID_SINHALESE            18\n# define  TT_MAC_ID_BURMESE              19\n# define  TT_MAC_ID_KHMER                20\n# define  TT_MAC_ID_THAI                 21\n# define  TT_MAC_ID_LAOTIAN              22\n# define  TT_MAC_ID_GEORGIAN             23\n# define  TT_MAC_ID_ARMENIAN             24\n# define  TT_MAC_ID_MALDIVIAN            25\n# define  TT_MAC_ID_SIMPLIFIED_CHINESE   25\n# define  TT_MAC_ID_TIBETAN              26\n# define  TT_MAC_ID_MONGOLIAN            27\n# define  TT_MAC_ID_GEEZ                 28\n# define  TT_MAC_ID_SLAVIC               29\n# define  TT_MAC_ID_VIETNAMESE           30\n# define  TT_MAC_ID_SINDHI               31\n# define  TT_MAC_ID_UNINTERP             32   A list of valid values for the  encoding_id  for  TT_PLATFORM_MACINTOSH  charmaps and name entries.",
            "title": "TT_MAC_ID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_iso_id_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define   TT_ISO_ID_7BIT_ASCII   0\n# define   TT_ISO_ID_10646        1\n# define   TT_ISO_ID_8859_1       2   A list of valid values for the  encoding_id  for  TT_PLATFORM_ISO  charmaps and name entries.  Their use is now deprecated.",
            "title": "TT_ISO_ID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_ms_id_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define   TT_MS_ID_SYMBOL_CS     0\n# define   TT_MS_ID_UNICODE_CS    1\n# define   TT_MS_ID_SJIS          2\n# define   TT_MS_ID_PRC           3\n# define   TT_MS_ID_BIG_5         4\n# define   TT_MS_ID_WANSUNG       5\n# define   TT_MS_ID_JOHAB         6\n# define   TT_MS_ID_UCS_4        10\n\n  /* this value is deprecated */\n# define  TT_MS_ID_GB2312   TT_MS_ID_PRC    A list of valid values for the  encoding_id  for  TT_PLATFORM_MICROSOFT  charmaps and name entries.",
            "title": "TT_MS_ID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_adobe_id_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define   TT_ADOBE_ID_STANDARD   0\n# define   TT_ADOBE_ID_EXPERT     1\n# define   TT_ADOBE_ID_CUSTOM     2\n# define   TT_ADOBE_ID_LATIN_1    3   A list of valid values for the  encoding_id  for  TT_PLATFORM_ADOBE  charmaps. This is a FreeType-specific extension!",
            "title": "TT_ADOBE_ID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_mac_langid_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define  TT_MAC_LANGID_ENGLISH                       0\n# define  TT_MAC_LANGID_FRENCH                        1\n# define  TT_MAC_LANGID_GERMAN                        2\n# define  TT_MAC_LANGID_ITALIAN                       3\n# define  TT_MAC_LANGID_DUTCH                         4\n# define  TT_MAC_LANGID_SWEDISH                       5\n# define  TT_MAC_LANGID_SPANISH                       6\n# define  TT_MAC_LANGID_DANISH                        7\n# define  TT_MAC_LANGID_PORTUGUESE                    8\n# define  TT_MAC_LANGID_NORWEGIAN                     9\n# define  TT_MAC_LANGID_HEBREW                       10\n# define  TT_MAC_LANGID_JAPANESE                     11\n# define  TT_MAC_LANGID_ARABIC                       12\n# define  TT_MAC_LANGID_FINNISH                      13\n# define  TT_MAC_LANGID_GREEK                        14\n# define  TT_MAC_LANGID_ICELANDIC                    15\n# define  TT_MAC_LANGID_MALTESE                      16\n# define  TT_MAC_LANGID_TURKISH                      17\n# define  TT_MAC_LANGID_CROATIAN                     18\n# define  TT_MAC_LANGID_CHINESE_TRADITIONAL          19\n# define  TT_MAC_LANGID_URDU                         20\n# define  TT_MAC_LANGID_HINDI                        21\n# define  TT_MAC_LANGID_THAI                         22\n# define  TT_MAC_LANGID_KOREAN                       23\n# define  TT_MAC_LANGID_LITHUANIAN                   24\n# define  TT_MAC_LANGID_POLISH                       25\n# define  TT_MAC_LANGID_HUNGARIAN                    26\n# define  TT_MAC_LANGID_ESTONIAN                     27\n# define  TT_MAC_LANGID_LETTISH                      28\n# define  TT_MAC_LANGID_SAAMISK                      29\n# define  TT_MAC_LANGID_FAEROESE                     30\n# define  TT_MAC_LANGID_FARSI                        31\n# define  TT_MAC_LANGID_RUSSIAN                      32\n# define  TT_MAC_LANGID_CHINESE_SIMPLIFIED           33\n# define  TT_MAC_LANGID_FLEMISH                      34\n# define  TT_MAC_LANGID_IRISH                        35\n# define  TT_MAC_LANGID_ALBANIAN                     36\n# define  TT_MAC_LANGID_ROMANIAN                     37\n# define  TT_MAC_LANGID_CZECH                        38\n# define  TT_MAC_LANGID_SLOVAK                       39\n# define  TT_MAC_LANGID_SLOVENIAN                    40\n# define  TT_MAC_LANGID_YIDDISH                      41\n# define  TT_MAC_LANGID_SERBIAN                      42\n# define  TT_MAC_LANGID_MACEDONIAN                   43\n# define  TT_MAC_LANGID_BULGARIAN                    44\n# define  TT_MAC_LANGID_UKRAINIAN                    45\n# define  TT_MAC_LANGID_BYELORUSSIAN                 46\n# define  TT_MAC_LANGID_UZBEK                        47\n# define  TT_MAC_LANGID_KAZAKH                       48\n# define  TT_MAC_LANGID_AZERBAIJANI                  49\n# define  TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT  49\n# define  TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT    50\n# define  TT_MAC_LANGID_ARMENIAN                     51\n# define  TT_MAC_LANGID_GEORGIAN                     52\n# define  TT_MAC_LANGID_MOLDAVIAN                    53\n# define  TT_MAC_LANGID_KIRGHIZ                      54\n# define  TT_MAC_LANGID_TAJIKI                       55\n# define  TT_MAC_LANGID_TURKMEN                      56\n# define  TT_MAC_LANGID_MONGOLIAN                    57\n# define  TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT   57\n# define  TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT    58\n# define  TT_MAC_LANGID_PASHTO                       59\n# define  TT_MAC_LANGID_KURDISH                      60\n# define  TT_MAC_LANGID_KASHMIRI                     61\n# define  TT_MAC_LANGID_SINDHI                       62\n# define  TT_MAC_LANGID_TIBETAN                      63\n# define  TT_MAC_LANGID_NEPALI                       64\n# define  TT_MAC_LANGID_SANSKRIT                     65\n# define  TT_MAC_LANGID_MARATHI                      66\n# define  TT_MAC_LANGID_BENGALI                      67\n# define  TT_MAC_LANGID_ASSAMESE                     68\n# define  TT_MAC_LANGID_GUJARATI                     69\n# define  TT_MAC_LANGID_PUNJABI                      70\n# define  TT_MAC_LANGID_ORIYA                        71\n# define  TT_MAC_LANGID_MALAYALAM                    72\n# define  TT_MAC_LANGID_KANNADA                      73\n# define  TT_MAC_LANGID_TAMIL                        74\n# define  TT_MAC_LANGID_TELUGU                       75\n# define  TT_MAC_LANGID_SINHALESE                    76\n# define  TT_MAC_LANGID_BURMESE                      77\n# define  TT_MAC_LANGID_KHMER                        78\n# define  TT_MAC_LANGID_LAO                          79\n# define  TT_MAC_LANGID_VIETNAMESE                   80\n# define  TT_MAC_LANGID_INDONESIAN                   81\n# define  TT_MAC_LANGID_TAGALOG                      82\n# define  TT_MAC_LANGID_MALAY_ROMAN_SCRIPT           83\n# define  TT_MAC_LANGID_MALAY_ARABIC_SCRIPT          84\n# define  TT_MAC_LANGID_AMHARIC                      85\n# define  TT_MAC_LANGID_TIGRINYA                     86\n# define  TT_MAC_LANGID_GALLA                        87\n# define  TT_MAC_LANGID_SOMALI                       88\n# define  TT_MAC_LANGID_SWAHILI                      89\n# define  TT_MAC_LANGID_RUANDA                       90\n# define  TT_MAC_LANGID_RUNDI                        91\n# define  TT_MAC_LANGID_CHEWA                        92\n# define  TT_MAC_LANGID_MALAGASY                     93\n# define  TT_MAC_LANGID_ESPERANTO                    94\n# define  TT_MAC_LANGID_WELSH                       128\n# define  TT_MAC_LANGID_BASQUE                      129\n# define  TT_MAC_LANGID_CATALAN                     130\n# define  TT_MAC_LANGID_LATIN                       131\n# define  TT_MAC_LANGID_QUECHUA                     132\n# define  TT_MAC_LANGID_GUARANI                     133\n# define  TT_MAC_LANGID_AYMARA                      134\n# define  TT_MAC_LANGID_TATAR                       135\n# define  TT_MAC_LANGID_UIGHUR                      136\n# define  TT_MAC_LANGID_DZONGKHA                    137\n# define  TT_MAC_LANGID_JAVANESE                    138\n# define  TT_MAC_LANGID_SUNDANESE                   139\n\n  /* The following codes are new as of 2000-03-10 */\n# define  TT_MAC_LANGID_GALICIAN                    140\n# define  TT_MAC_LANGID_AFRIKAANS                   141\n# define  TT_MAC_LANGID_BRETON                      142\n# define  TT_MAC_LANGID_INUKTITUT                   143\n# define  TT_MAC_LANGID_SCOTTISH_GAELIC             144\n# define  TT_MAC_LANGID_MANX_GAELIC                 145\n# define  TT_MAC_LANGID_IRISH_GAELIC                146\n# define  TT_MAC_LANGID_TONGAN                      147\n# define  TT_MAC_LANGID_GREEK_POLYTONIC             148\n# define  TT_MAC_LANGID_GREELANDIC                  149\n# define  TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT    150   Possible values of the language identifier field in the name records of the SFNT \u2018name\u2019 table if the \u2018platform\u2019 identifier code is  TT_PLATFORM_MACINTOSH . These values are also used as return values for function  FT_Get_CMap_Language_ID .  The canonical source for Apple's IDs is  https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html",
            "title": "TT_MAC_LANGID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_ms_langid_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define  TT_MS_LANGID_ARABIC_SAUDI_ARABIA               0x0401\n# define  TT_MS_LANGID_ARABIC_IRAQ                       0x0801\n# define  TT_MS_LANGID_ARABIC_EGYPT                      0x0C01\n# define  TT_MS_LANGID_ARABIC_LIBYA                      0x1001\n# define  TT_MS_LANGID_ARABIC_ALGERIA                    0x1401\n# define  TT_MS_LANGID_ARABIC_MOROCCO                    0x1801\n# define  TT_MS_LANGID_ARABIC_TUNISIA                    0x1C01\n# define  TT_MS_LANGID_ARABIC_OMAN                       0x2001\n# define  TT_MS_LANGID_ARABIC_YEMEN                      0x2401\n# define  TT_MS_LANGID_ARABIC_SYRIA                      0x2801\n# define  TT_MS_LANGID_ARABIC_JORDAN                     0x2C01\n# define  TT_MS_LANGID_ARABIC_LEBANON                    0x3001\n# define  TT_MS_LANGID_ARABIC_KUWAIT                     0x3401\n# define  TT_MS_LANGID_ARABIC_UAE                        0x3801\n# define  TT_MS_LANGID_ARABIC_BAHRAIN                    0x3C01\n# define  TT_MS_LANGID_ARABIC_QATAR                      0x4001\n# define  TT_MS_LANGID_BULGARIAN_BULGARIA                0x0402\n# define  TT_MS_LANGID_CATALAN_CATALAN                   0x0403\n# define  TT_MS_LANGID_CHINESE_TAIWAN                    0x0404\n# define  TT_MS_LANGID_CHINESE_PRC                       0x0804\n# define  TT_MS_LANGID_CHINESE_HONG_KONG                 0x0C04\n# define  TT_MS_LANGID_CHINESE_SINGAPORE                 0x1004\n# define  TT_MS_LANGID_CHINESE_MACAO                     0x1404\n# define  TT_MS_LANGID_CZECH_CZECH_REPUBLIC              0x0405\n# define  TT_MS_LANGID_DANISH_DENMARK                    0x0406\n# define  TT_MS_LANGID_GERMAN_GERMANY                    0x0407\n# define  TT_MS_LANGID_GERMAN_SWITZERLAND                0x0807\n# define  TT_MS_LANGID_GERMAN_AUSTRIA                    0x0C07\n# define  TT_MS_LANGID_GERMAN_LUXEMBOURG                 0x1007\n# define  TT_MS_LANGID_GERMAN_LIECHTENSTEIN              0x1407\n# define  TT_MS_LANGID_GREEK_GREECE                      0x0408\n# define  TT_MS_LANGID_ENGLISH_UNITED_STATES             0x0409\n# define  TT_MS_LANGID_ENGLISH_UNITED_KINGDOM            0x0809\n# define  TT_MS_LANGID_ENGLISH_AUSTRALIA                 0x0C09\n# define  TT_MS_LANGID_ENGLISH_CANADA                    0x1009\n# define  TT_MS_LANGID_ENGLISH_NEW_ZEALAND               0x1409\n# define  TT_MS_LANGID_ENGLISH_IRELAND                   0x1809\n# define  TT_MS_LANGID_ENGLISH_SOUTH_AFRICA              0x1C09\n# define  TT_MS_LANGID_ENGLISH_JAMAICA                   0x2009\n# define  TT_MS_LANGID_ENGLISH_CARIBBEAN                 0x2409\n# define  TT_MS_LANGID_ENGLISH_BELIZE                    0x2809\n# define  TT_MS_LANGID_ENGLISH_TRINIDAD                  0x2C09\n# define  TT_MS_LANGID_ENGLISH_ZIMBABWE                  0x3009\n# define  TT_MS_LANGID_ENGLISH_PHILIPPINES               0x3409\n# define  TT_MS_LANGID_ENGLISH_INDIA                     0x4009\n# define  TT_MS_LANGID_ENGLISH_MALAYSIA                  0x4409\n# define  TT_MS_LANGID_ENGLISH_SINGAPORE                 0x4809\n# define  TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT    0x040A\n# define  TT_MS_LANGID_SPANISH_MEXICO                    0x080A\n# define  TT_MS_LANGID_SPANISH_SPAIN_MODERN_SORT         0x0C0A\n# define  TT_MS_LANGID_SPANISH_GUATEMALA                 0x100A\n# define  TT_MS_LANGID_SPANISH_COSTA_RICA                0x140A\n# define  TT_MS_LANGID_SPANISH_PANAMA                    0x180A\n# define  TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC        0x1C0A\n# define  TT_MS_LANGID_SPANISH_VENEZUELA                 0x200A\n# define  TT_MS_LANGID_SPANISH_COLOMBIA                  0x240A\n# define  TT_MS_LANGID_SPANISH_PERU                      0x280A\n# define  TT_MS_LANGID_SPANISH_ARGENTINA                 0x2C0A\n# define  TT_MS_LANGID_SPANISH_ECUADOR                   0x300A\n# define  TT_MS_LANGID_SPANISH_CHILE                     0x340A\n# define  TT_MS_LANGID_SPANISH_URUGUAY                   0x380A\n# define  TT_MS_LANGID_SPANISH_PARAGUAY                  0x3C0A\n# define  TT_MS_LANGID_SPANISH_BOLIVIA                   0x400A\n# define  TT_MS_LANGID_SPANISH_EL_SALVADOR               0x440A\n# define  TT_MS_LANGID_SPANISH_HONDURAS                  0x480A\n# define  TT_MS_LANGID_SPANISH_NICARAGUA                 0x4C0A\n# define  TT_MS_LANGID_SPANISH_PUERTO_RICO               0x500A\n# define  TT_MS_LANGID_SPANISH_UNITED_STATES             0x540A\n# define  TT_MS_LANGID_FINNISH_FINLAND                   0x040B\n# define  TT_MS_LANGID_FRENCH_FRANCE                     0x040C\n# define  TT_MS_LANGID_FRENCH_BELGIUM                    0x080C\n# define  TT_MS_LANGID_FRENCH_CANADA                     0x0C0C\n# define  TT_MS_LANGID_FRENCH_SWITZERLAND                0x100C\n# define  TT_MS_LANGID_FRENCH_LUXEMBOURG                 0x140C\n# define  TT_MS_LANGID_FRENCH_MONACO                     0x180C\n# define  TT_MS_LANGID_HEBREW_ISRAEL                     0x040D\n# define  TT_MS_LANGID_HUNGARIAN_HUNGARY                 0x040E\n# define  TT_MS_LANGID_ICELANDIC_ICELAND                 0x040F\n# define  TT_MS_LANGID_ITALIAN_ITALY                     0x0410\n# define  TT_MS_LANGID_ITALIAN_SWITZERLAND               0x0810\n# define  TT_MS_LANGID_JAPANESE_JAPAN                    0x0411\n# define  TT_MS_LANGID_KOREAN_KOREA                      0x0412\n# define  TT_MS_LANGID_DUTCH_NETHERLANDS                 0x0413\n# define  TT_MS_LANGID_DUTCH_BELGIUM                     0x0813\n# define  TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL           0x0414\n# define  TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK          0x0814\n# define  TT_MS_LANGID_POLISH_POLAND                     0x0415\n# define  TT_MS_LANGID_PORTUGUESE_BRAZIL                 0x0416\n# define  TT_MS_LANGID_PORTUGUESE_PORTUGAL               0x0816\n# define  TT_MS_LANGID_ROMANSH_SWITZERLAND               0x0417\n# define  TT_MS_LANGID_ROMANIAN_ROMANIA                  0x0418\n# define  TT_MS_LANGID_RUSSIAN_RUSSIA                    0x0419\n# define  TT_MS_LANGID_CROATIAN_CROATIA                  0x041A\n# define  TT_MS_LANGID_SERBIAN_SERBIA_LATIN              0x081A\n# define  TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC           0x0C1A\n# define  TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA       0x101A\n# define  TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA        0x141A\n# define  TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN         0x181A\n# define  TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC      0x1C1A\n# define  TT_MS_LANGID_BOSNIAN_BOSNIA_HERZ_CYRILLIC      0x201A\n# define  TT_MS_LANGID_SLOVAK_SLOVAKIA                   0x041B\n# define  TT_MS_LANGID_ALBANIAN_ALBANIA                  0x041C\n# define  TT_MS_LANGID_SWEDISH_SWEDEN                    0x041D\n# define  TT_MS_LANGID_SWEDISH_FINLAND                   0x081D\n# define  TT_MS_LANGID_THAI_THAILAND                     0x041E\n# define  TT_MS_LANGID_TURKISH_TURKEY                    0x041F\n# define  TT_MS_LANGID_URDU_PAKISTAN                     0x0420\n# define  TT_MS_LANGID_INDONESIAN_INDONESIA              0x0421\n# define  TT_MS_LANGID_UKRAINIAN_UKRAINE                 0x0422\n# define  TT_MS_LANGID_BELARUSIAN_BELARUS                0x0423\n# define  TT_MS_LANGID_SLOVENIAN_SLOVENIA                0x0424\n# define  TT_MS_LANGID_ESTONIAN_ESTONIA                  0x0425\n# define  TT_MS_LANGID_LATVIAN_LATVIA                    0x0426\n# define  TT_MS_LANGID_LITHUANIAN_LITHUANIA              0x0427\n# define  TT_MS_LANGID_TAJIK_TAJIKISTAN                  0x0428\n# define  TT_MS_LANGID_VIETNAMESE_VIET_NAM               0x042A\n# define  TT_MS_LANGID_ARMENIAN_ARMENIA                  0x042B\n# define  TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN            0x042C\n# define  TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC         0x082C\n# define  TT_MS_LANGID_BASQUE_BASQUE                     0x042D\n# define  TT_MS_LANGID_UPPER_SORBIAN_GERMANY             0x042E\n# define  TT_MS_LANGID_LOWER_SORBIAN_GERMANY             0x082E\n# define  TT_MS_LANGID_MACEDONIAN_MACEDONIA              0x042F\n# define  TT_MS_LANGID_SETSWANA_SOUTH_AFRICA             0x0432\n# define  TT_MS_LANGID_ISIXHOSA_SOUTH_AFRICA             0x0434\n# define  TT_MS_LANGID_ISIZULU_SOUTH_AFRICA              0x0435\n# define  TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA            0x0436\n# define  TT_MS_LANGID_GEORGIAN_GEORGIA                  0x0437\n# define  TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS           0x0438\n# define  TT_MS_LANGID_HINDI_INDIA                       0x0439\n# define  TT_MS_LANGID_MALTESE_MALTA                     0x043A\n# define  TT_MS_LANGID_SAMI_NORTHERN_NORWAY              0x043B\n# define  TT_MS_LANGID_SAMI_NORTHERN_SWEDEN              0x083B\n# define  TT_MS_LANGID_SAMI_NORTHERN_FINLAND             0x0C3B\n# define  TT_MS_LANGID_SAMI_LULE_NORWAY                  0x103B\n# define  TT_MS_LANGID_SAMI_LULE_SWEDEN                  0x143B\n# define  TT_MS_LANGID_SAMI_SOUTHERN_NORWAY              0x183B\n# define  TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN              0x1C3B\n# define  TT_MS_LANGID_SAMI_SKOLT_FINLAND                0x203B\n# define  TT_MS_LANGID_SAMI_INARI_FINLAND                0x243B\n# define  TT_MS_LANGID_IRISH_IRELAND                     0x083C\n# define  TT_MS_LANGID_MALAY_MALAYSIA                    0x043E\n# define  TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM           0x083E\n# define  TT_MS_LANGID_KAZAKH_KAZAKHSTAN                 0x043F\n# define  TT_MS_LANGID_KYRGYZ_KYRGYZSTAN /* Cyrillic*/   0x0440\n# define  TT_MS_LANGID_KISWAHILI_KENYA                   0x0441\n# define  TT_MS_LANGID_TURKMEN_TURKMENISTAN              0x0442\n# define  TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN            0x0443\n# define  TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC         0x0843\n# define  TT_MS_LANGID_TATAR_RUSSIA                      0x0444\n# define  TT_MS_LANGID_BENGALI_INDIA                     0x0445\n# define  TT_MS_LANGID_BENGALI_BANGLADESH                0x0845\n# define  TT_MS_LANGID_PUNJABI_INDIA                     0x0446\n# define  TT_MS_LANGID_GUJARATI_INDIA                    0x0447\n# define  TT_MS_LANGID_ODIA_INDIA                        0x0448\n# define  TT_MS_LANGID_TAMIL_INDIA                       0x0449\n# define  TT_MS_LANGID_TELUGU_INDIA                      0x044A\n# define  TT_MS_LANGID_KANNADA_INDIA                     0x044B\n# define  TT_MS_LANGID_MALAYALAM_INDIA                   0x044C\n# define  TT_MS_LANGID_ASSAMESE_INDIA                    0x044D\n# define  TT_MS_LANGID_MARATHI_INDIA                     0x044E\n# define  TT_MS_LANGID_SANSKRIT_INDIA                    0x044F\n# define  TT_MS_LANGID_MONGOLIAN_MONGOLIA /* Cyrillic */ 0x0450\n# define  TT_MS_LANGID_MONGOLIAN_PRC                     0x0850\n# define  TT_MS_LANGID_TIBETAN_PRC                       0x0451\n# define  TT_MS_LANGID_WELSH_UNITED_KINGDOM              0x0452\n# define  TT_MS_LANGID_KHMER_CAMBODIA                    0x0453\n# define  TT_MS_LANGID_LAO_LAOS                          0x0454\n# define  TT_MS_LANGID_GALICIAN_GALICIAN                 0x0456\n# define  TT_MS_LANGID_KONKANI_INDIA                     0x0457\n# define  TT_MS_LANGID_SYRIAC_SYRIA                      0x045A\n# define  TT_MS_LANGID_SINHALA_SRI_LANKA                 0x045B\n# define  TT_MS_LANGID_INUKTITUT_CANADA                  0x045D\n# define  TT_MS_LANGID_INUKTITUT_CANADA_LATIN            0x085D\n# define  TT_MS_LANGID_AMHARIC_ETHIOPIA                  0x045E\n# define  TT_MS_LANGID_TAMAZIGHT_ALGERIA                 0x085F\n# define  TT_MS_LANGID_NEPALI_NEPAL                      0x0461\n# define  TT_MS_LANGID_FRISIAN_NETHERLANDS               0x0462\n# define  TT_MS_LANGID_PASHTO_AFGHANISTAN                0x0463\n# define  TT_MS_LANGID_FILIPINO_PHILIPPINES              0x0464\n# define  TT_MS_LANGID_DHIVEHI_MALDIVES                  0x0465\n# define  TT_MS_LANGID_HAUSA_NIGERIA                     0x0468\n# define  TT_MS_LANGID_YORUBA_NIGERIA                    0x046A\n# define  TT_MS_LANGID_QUECHUA_BOLIVIA                   0x046B\n# define  TT_MS_LANGID_QUECHUA_ECUADOR                   0x086B\n# define  TT_MS_LANGID_QUECHUA_PERU                      0x0C6B\n# define  TT_MS_LANGID_SESOTHO_SA_LEBOA_SOUTH_AFRICA     0x046C\n# define  TT_MS_LANGID_BASHKIR_RUSSIA                    0x046D\n# define  TT_MS_LANGID_LUXEMBOURGISH_LUXEMBOURG          0x046E\n# define  TT_MS_LANGID_GREENLANDIC_GREENLAND             0x046F\n# define  TT_MS_LANGID_IGBO_NIGERIA                      0x0470\n# define  TT_MS_LANGID_YI_PRC                            0x0478\n# define  TT_MS_LANGID_MAPUDUNGUN_CHILE                  0x047A\n# define  TT_MS_LANGID_MOHAWK_MOHAWK                     0x047C\n# define  TT_MS_LANGID_BRETON_FRANCE                     0x047E\n# define  TT_MS_LANGID_UIGHUR_PRC                        0x0480\n# define  TT_MS_LANGID_MAORI_NEW_ZEALAND                 0x0481\n# define  TT_MS_LANGID_OCCITAN_FRANCE                    0x0482\n# define  TT_MS_LANGID_CORSICAN_FRANCE                   0x0483\n# define  TT_MS_LANGID_ALSATIAN_FRANCE                   0x0484\n# define  TT_MS_LANGID_YAKUT_RUSSIA                      0x0485\n# define  TT_MS_LANGID_KICHE_GUATEMALA                   0x0486\n# define  TT_MS_LANGID_KINYARWANDA_RWANDA                0x0487\n# define  TT_MS_LANGID_WOLOF_SENEGAL                     0x0488\n# define  TT_MS_LANGID_DARI_AFGHANISTAN                  0x048C   Possible values of the language identifier field in the name records of the SFNT \u2018name\u2019 table if the \u2018platform\u2019 identifier code is  TT_PLATFORM_MICROSOFT . These values are also used as return values for function  FT_Get_CMap_Language_ID .  The canonical source for Microsoft's IDs is  https://www.microsoft.com/globaldev/reference/lcid-all.mspx  ,  however, we only provide macros for language identifiers present in the OpenType specification: Microsoft has abandoned the concept of LCIDs (language code identifiers), and format\u00a01 of the \u2018name\u2019 table provides a better mechanism for languages not covered here.  More legacy values not listed in the reference can be found in the  FT_TRUETYPE_IDS_H  header file.",
            "title": "TT_MS_LANGID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_name_id_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n# define  TT_NAME_ID_COPYRIGHT              0\n# define  TT_NAME_ID_FONT_FAMILY            1\n# define  TT_NAME_ID_FONT_SUBFAMILY         2\n# define  TT_NAME_ID_UNIQUE_ID              3\n# define  TT_NAME_ID_FULL_NAME              4\n# define  TT_NAME_ID_VERSION_STRING         5\n# define  TT_NAME_ID_PS_NAME                6\n# define  TT_NAME_ID_TRADEMARK              7\n\n  /* the following values are from the OpenType spec */\n# define  TT_NAME_ID_MANUFACTURER           8\n# define  TT_NAME_ID_DESIGNER               9\n# define  TT_NAME_ID_DESCRIPTION            10\n# define  TT_NAME_ID_VENDOR_URL             11\n# define  TT_NAME_ID_DESIGNER_URL           12\n# define  TT_NAME_ID_LICENSE                13\n# define  TT_NAME_ID_LICENSE_URL            14\n  /* number 15 is reserved */\n# define  TT_NAME_ID_TYPOGRAPHIC_FAMILY     16\n# define  TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY  17\n# define  TT_NAME_ID_MAC_FULL_NAME          18\n\n  /* The following code is new as of 2000-01-21 */\n# define  TT_NAME_ID_SAMPLE_TEXT            19\n\n  /* This is new in OpenType 1.3 */\n# define  TT_NAME_ID_CID_FINDFONT_NAME      20\n\n  /* This is new in OpenType 1.5 */\n# define  TT_NAME_ID_WWS_FAMILY             21\n# define  TT_NAME_ID_WWS_SUBFAMILY          22\n\n  /* This is new in OpenType 1.7 */\n# define  TT_NAME_ID_LIGHT_BACKGROUND       23\n# define  TT_NAME_ID_DARK_BACKGROUND        24\n\n  /* This is new in OpenType 1.8 */\n# define  TT_NAME_ID_VARIATIONS_PREFIX      25\n\n  /* these two values are deprecated */\n# define  TT_NAME_ID_PREFERRED_FAMILY     TT_NAME_ID_TYPOGRAPHIC_FAMILY\n# define  TT_NAME_ID_PREFERRED_SUBFAMILY  TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY   Possible values of the \u2018name\u2019 identifier field in the name records of an SFNT \u2018name\u2019 table. These values are platform independent.",
            "title": "TT_NAME_ID_XXX"
        },
        {
            "location": "/ft2-truetype_tables/index.html#tt_ucr_xxx",
            "text": "Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).   \n  /* ulUnicodeRange1 */\n  /* --------------- */\n\n  /* Bit  0   Basic Latin */\n# define  TT_UCR_BASIC_LATIN                     (1L <<  0) /* U+0020-U+007E */\n  /* Bit  1   C1 Controls and Latin-1 Supplement */\n# define  TT_UCR_LATIN1_SUPPLEMENT               (1L <<  1) /* U+0080-U+00FF */\n  /* Bit  2   Latin Extended-A */\n# define  TT_UCR_LATIN_EXTENDED_A                (1L <<  2) /* U+0100-U+017F */\n  /* Bit  3   Latin Extended-B */\n# define  TT_UCR_LATIN_EXTENDED_B                (1L <<  3) /* U+0180-U+024F */\n  /* Bit  4   IPA Extensions                 */\n  /*          Phonetic Extensions            */\n  /*          Phonetic Extensions Supplement */\n# define  TT_UCR_IPA_EXTENSIONS                  (1L <<  4) /* U+0250-U+02AF */\n                                                          /* U+1D00-U+1D7F */\n                                                          /* U+1D80-U+1DBF */\n  /* Bit  5   Spacing Modifier Letters */\n  /*          Modifier Tone Letters    */\n# define  TT_UCR_SPACING_MODIFIER                (1L <<  5) /* U+02B0-U+02FF */\n                                                          /* U+A700-U+A71F */\n  /* Bit  6   Combining Diacritical Marks            */\n  /*          Combining Diacritical Marks Supplement */\n# define  TT_UCR_COMBINING_DIACRITICAL_MARKS     (1L <<  6) /* U+0300-U+036F */\n                                                          /* U+1DC0-U+1DFF */\n  /* Bit  7   Greek and Coptic */\n# define  TT_UCR_GREEK                           (1L <<  7) /* U+0370-U+03FF */\n  /* Bit  8   Coptic */\n# define  TT_UCR_COPTIC                          (1L <<  8) /* U+2C80-U+2CFF */\n  /* Bit  9   Cyrillic            */\n  /*          Cyrillic Supplement */\n  /*          Cyrillic Extended-A */\n  /*          Cyrillic Extended-B */\n# define  TT_UCR_CYRILLIC                        (1L <<  9) /* U+0400-U+04FF */\n                                                          /* U+0500-U+052F */\n                                                          /* U+2DE0-U+2DFF */\n                                                          /* U+A640-U+A69F */\n  /* Bit 10   Armenian */\n# define  TT_UCR_ARMENIAN                        (1L << 10) /* U+0530-U+058F */\n  /* Bit 11   Hebrew */\n# define  TT_UCR_HEBREW                          (1L << 11) /* U+0590-U+05FF */\n  /* Bit 12   Vai */\n# define  TT_UCR_VAI                             (1L << 12) /* U+A500-U+A63F */\n  /* Bit 13   Arabic            */\n  /*          Arabic Supplement */\n# define  TT_UCR_ARABIC                          (1L << 13) /* U+0600-U+06FF */\n                                                          /* U+0750-U+077F */\n  /* Bit 14   NKo */\n# define  TT_UCR_NKO                             (1L << 14) /* U+07C0-U+07FF */\n  /* Bit 15   Devanagari */\n# define  TT_UCR_DEVANAGARI                      (1L << 15) /* U+0900-U+097F */\n  /* Bit 16   Bengali */\n# define  TT_UCR_BENGALI                         (1L << 16) /* U+0980-U+09FF */\n  /* Bit 17   Gurmukhi */\n# define  TT_UCR_GURMUKHI                        (1L << 17) /* U+0A00-U+0A7F */\n  /* Bit 18   Gujarati */\n# define  TT_UCR_GUJARATI                        (1L << 18) /* U+0A80-U+0AFF */\n  /* Bit 19   Oriya */\n# define  TT_UCR_ORIYA                           (1L << 19) /* U+0B00-U+0B7F */\n  /* Bit 20   Tamil */\n# define  TT_UCR_TAMIL                           (1L << 20) /* U+0B80-U+0BFF */\n  /* Bit 21   Telugu */\n# define  TT_UCR_TELUGU                          (1L << 21) /* U+0C00-U+0C7F */\n  /* Bit 22   Kannada */\n# define  TT_UCR_KANNADA                         (1L << 22) /* U+0C80-U+0CFF */\n  /* Bit 23   Malayalam */\n# define  TT_UCR_MALAYALAM                       (1L << 23) /* U+0D00-U+0D7F */\n  /* Bit 24   Thai */\n# define  TT_UCR_THAI                            (1L << 24) /* U+0E00-U+0E7F */\n  /* Bit 25   Lao */\n# define  TT_UCR_LAO                             (1L << 25) /* U+0E80-U+0EFF */\n  /* Bit 26   Georgian            */\n  /*          Georgian Supplement */\n# define  TT_UCR_GEORGIAN                        (1L << 26) /* U+10A0-U+10FF */\n                                                          /* U+2D00-U+2D2F */\n  /* Bit 27   Balinese */\n# define  TT_UCR_BALINESE                        (1L << 27) /* U+1B00-U+1B7F */\n  /* Bit 28   Hangul Jamo */\n# define  TT_UCR_HANGUL_JAMO                     (1L << 28) /* U+1100-U+11FF */\n  /* Bit 29   Latin Extended Additional */\n  /*          Latin Extended-C          */\n  /*          Latin Extended-D          */\n# define  TT_UCR_LATIN_EXTENDED_ADDITIONAL       (1L << 29) /* U+1E00-U+1EFF */\n                                                          /* U+2C60-U+2C7F */\n                                                          /* U+A720-U+A7FF */\n  /* Bit 30   Greek Extended */\n# define  TT_UCR_GREEK_EXTENDED                  (1L << 30) /* U+1F00-U+1FFF */\n  /* Bit 31   General Punctuation      */\n  /*          Supplemental Punctuation */\n# define  TT_UCR_GENERAL_PUNCTUATION             (1L << 31) /* U+2000-U+206F */\n                                                          /* U+2E00-U+2E7F */\n\n  /* ulUnicodeRange2 */\n  /* --------------- */\n\n  /* Bit 32   Superscripts And Subscripts */\n# define  TT_UCR_SUPERSCRIPTS_SUBSCRIPTS         (1L <<  0) /* U+2070-U+209F */\n  /* Bit 33   Currency Symbols */\n# define  TT_UCR_CURRENCY_SYMBOLS                (1L <<  1) /* U+20A0-U+20CF */\n  /* Bit 34   Combining Diacritical Marks For Symbols */\n# define  TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB \\\n                                               (1L <<  2) /* U+20D0-U+20FF */\n  /* Bit 35   Letterlike Symbols */\n# define  TT_UCR_LETTERLIKE_SYMBOLS              (1L <<  3) /* U+2100-U+214F */\n  /* Bit 36   Number Forms */\n# define  TT_UCR_NUMBER_FORMS                    (1L <<  4) /* U+2150-U+218F */\n  /* Bit 37   Arrows                           */\n  /*          Supplemental Arrows-A            */\n  /*          Supplemental Arrows-B            */\n  /*          Miscellaneous Symbols and Arrows */\n# define  TT_UCR_ARROWS                          (1L <<  5) /* U+2190-U+21FF */\n                                                          /* U+27F0-U+27FF */\n                                                          /* U+2900-U+297F */\n                                                          /* U+2B00-U+2BFF */\n  /* Bit 38   Mathematical Operators               */\n  /*          Supplemental Mathematical Operators  */\n  /*          Miscellaneous Mathematical Symbols-A */\n  /*          Miscellaneous Mathematical Symbols-B */\n# define  TT_UCR_MATHEMATICAL_OPERATORS          (1L <<  6) /* U+2200-U+22FF */\n                                                          /* U+2A00-U+2AFF */\n                                                          /* U+27C0-U+27EF */\n                                                          /* U+2980-U+29FF */\n  /* Bit 39 Miscellaneous Technical */\n# define  TT_UCR_MISCELLANEOUS_TECHNICAL         (1L <<  7) /* U+2300-U+23FF */\n  /* Bit 40   Control Pictures */\n# define  TT_UCR_CONTROL_PICTURES                (1L <<  8) /* U+2400-U+243F */\n  /* Bit 41   Optical Character Recognition */\n# define  TT_UCR_OCR                             (1L <<  9) /* U+2440-U+245F */\n  /* Bit 42   Enclosed Alphanumerics */\n# define  TT_UCR_ENCLOSED_ALPHANUMERICS          (1L << 10) /* U+2460-U+24FF */\n  /* Bit 43   Box Drawing */\n# define  TT_UCR_BOX_DRAWING                     (1L << 11) /* U+2500-U+257F */\n  /* Bit 44   Block Elements */\n# define  TT_UCR_BLOCK_ELEMENTS                  (1L << 12) /* U+2580-U+259F */\n  /* Bit 45   Geometric Shapes */\n# define  TT_UCR_GEOMETRIC_SHAPES                (1L << 13) /* U+25A0-U+25FF */\n  /* Bit 46   Miscellaneous Symbols */\n# define  TT_UCR_MISCELLANEOUS_SYMBOLS           (1L << 14) /* U+2600-U+26FF */\n  /* Bit 47   Dingbats */\n# define  TT_UCR_DINGBATS                        (1L << 15) /* U+2700-U+27BF */\n  /* Bit 48   CJK Symbols and Punctuation */\n# define  TT_UCR_CJK_SYMBOLS                     (1L << 16) /* U+3000-U+303F */\n  /* Bit 49   Hiragana */\n# define  TT_UCR_HIRAGANA                        (1L << 17) /* U+3040-U+309F */\n  /* Bit 50   Katakana                     */\n  /*          Katakana Phonetic Extensions */\n# define  TT_UCR_KATAKANA                        (1L << 18) /* U+30A0-U+30FF */\n                                                          /* U+31F0-U+31FF */\n  /* Bit 51   Bopomofo          */\n  /*          Bopomofo Extended */\n# define  TT_UCR_BOPOMOFO                        (1L << 19) /* U+3100-U+312F */\n                                                          /* U+31A0-U+31BF */\n  /* Bit 52   Hangul Compatibility Jamo */\n# define  TT_UCR_HANGUL_COMPATIBILITY_JAMO       (1L << 20) /* U+3130-U+318F */\n  /* Bit 53   Phags-Pa */\n# define  TT_UCR_CJK_MISC                        (1L << 21) /* U+A840-U+A87F */\n# define  TT_UCR_KANBUN  TT_UCR_CJK_MISC /* deprecated */\n# define  TT_UCR_PHAGSPA\n  /* Bit 54   Enclosed CJK Letters and Months */\n# define  TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS     (1L << 22) /* U+3200-U+32FF */\n  /* Bit 55   CJK Compatibility */\n# define  TT_UCR_CJK_COMPATIBILITY               (1L << 23) /* U+3300-U+33FF */\n  /* Bit 56   Hangul Syllables */\n# define  TT_UCR_HANGUL                          (1L << 24) /* U+AC00-U+D7A3 */\n  /* Bit 57   High Surrogates              */\n  /*          High Private Use Surrogates  */\n  /*          Low Surrogates               */\n\n  /* According to OpenType specs v.1.3+,   */\n  /* setting bit 57 implies that there is  */\n  /* at least one codepoint beyond the     */\n  /* Basic Multilingual Plane that is      */\n  /* supported by this font.  So it really */\n  /* means >= U+10000.                     */\n# define  TT_UCR_SURROGATES                      (1L << 25) /* U+D800-U+DB7F */\n                                                          /* U+DB80-U+DBFF */\n                                                          /* U+DC00-U+DFFF */\n# define  TT_UCR_NON_PLANE_0  TT_UCR_SURROGATES\n  /* Bit 58  Phoenician */\n# define  TT_UCR_PHOENICIAN                      (1L << 26) /*U+10900-U+1091F*/\n  /* Bit 59   CJK Unified Ideographs             */\n  /*          CJK Radicals Supplement            */\n  /*          Kangxi Radicals                    */\n  /*          Ideographic Description Characters */\n  /*          CJK Unified Ideographs Extension A */\n  /*          CJK Unified Ideographs Extension B */\n  /*          Kanbun                             */\n# define  TT_UCR_CJK_UNIFIED_IDEOGRAPHS          (1L << 27) /* U+4E00-U+9FFF */\n                                                          /* U+2E80-U+2EFF */\n                                                          /* U+2F00-U+2FDF */\n                                                          /* U+2FF0-U+2FFF */\n                                                          /* U+3400-U+4DB5 */\n                                                          /*U+20000-U+2A6DF*/\n                                                          /* U+3190-U+319F */\n  /* Bit 60   Private Use */\n# define  TT_UCR_PRIVATE_USE                     (1L << 28) /* U+E000-U+F8FF */\n  /* Bit 61   CJK Strokes                             */\n  /*          CJK Compatibility Ideographs            */\n  /*          CJK Compatibility Ideographs Supplement */\n# define  TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS    (1L << 29) /* U+31C0-U+31EF */\n                                                          /* U+F900-U+FAFF */\n                                                          /*U+2F800-U+2FA1F*/\n  /* Bit 62   Alphabetic Presentation Forms */\n# define  TT_UCR_ALPHABETIC_PRESENTATION_FORMS   (1L << 30) /* U+FB00-U+FB4F */\n  /* Bit 63   Arabic Presentation Forms-A */\n# define  TT_UCR_ARABIC_PRESENTATION_FORMS_A     (1L << 31) /* U+FB50-U+FDFF */\n\n  /* ulUnicodeRange3 */\n  /* --------------- */\n\n  /* Bit 64   Combining Half Marks */\n# define  TT_UCR_COMBINING_HALF_MARKS            (1L <<  0) /* U+FE20-U+FE2F */\n  /* Bit 65   Vertical forms          */\n  /*          CJK Compatibility Forms */\n# define  TT_UCR_CJK_COMPATIBILITY_FORMS         (1L <<  1) /* U+FE10-U+FE1F */\n                                                          /* U+FE30-U+FE4F */\n  /* Bit 66   Small Form Variants */\n# define  TT_UCR_SMALL_FORM_VARIANTS             (1L <<  2) /* U+FE50-U+FE6F */\n  /* Bit 67   Arabic Presentation Forms-B */\n# define  TT_UCR_ARABIC_PRESENTATION_FORMS_B     (1L <<  3) /* U+FE70-U+FEFE */\n  /* Bit 68   Halfwidth and Fullwidth Forms */\n# define  TT_UCR_HALFWIDTH_FULLWIDTH_FORMS       (1L <<  4) /* U+FF00-U+FFEF */\n  /* Bit 69   Specials */\n# define  TT_UCR_SPECIALS                        (1L <<  5) /* U+FFF0-U+FFFD */\n  /* Bit 70   Tibetan */\n# define  TT_UCR_TIBETAN                         (1L <<  6) /* U+0F00-U+0FFF */\n  /* Bit 71   Syriac */\n# define  TT_UCR_SYRIAC                          (1L <<  7) /* U+0700-U+074F */\n  /* Bit 72   Thaana */\n# define  TT_UCR_THAANA                          (1L <<  8) /* U+0780-U+07BF */\n  /* Bit 73   Sinhala */\n# define  TT_UCR_SINHALA                         (1L <<  9) /* U+0D80-U+0DFF */\n  /* Bit 74   Myanmar */\n# define  TT_UCR_MYANMAR                         (1L << 10) /* U+1000-U+109F */\n  /* Bit 75   Ethiopic            */\n  /*          Ethiopic Supplement */\n  /*          Ethiopic Extended   */\n# define  TT_UCR_ETHIOPIC                        (1L << 11) /* U+1200-U+137F */\n                                                          /* U+1380-U+139F */\n                                                          /* U+2D80-U+2DDF */\n  /* Bit 76   Cherokee */\n# define  TT_UCR_CHEROKEE                        (1L << 12) /* U+13A0-U+13FF */\n  /* Bit 77   Unified Canadian Aboriginal Syllabics */\n# define  TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS   (1L << 13) /* U+1400-U+167F */\n  /* Bit 78   Ogham */\n# define  TT_UCR_OGHAM                           (1L << 14) /* U+1680-U+169F */\n  /* Bit 79   Runic */\n# define  TT_UCR_RUNIC                           (1L << 15) /* U+16A0-U+16FF */\n  /* Bit 80   Khmer         */\n  /*          Khmer Symbols */\n# define  TT_UCR_KHMER                           (1L << 16) /* U+1780-U+17FF */\n                                                          /* U+19E0-U+19FF */\n  /* Bit 81   Mongolian */\n# define  TT_UCR_MONGOLIAN                       (1L << 17) /* U+1800-U+18AF */\n  /* Bit 82   Braille Patterns */\n# define  TT_UCR_BRAILLE                         (1L << 18) /* U+2800-U+28FF */\n  /* Bit 83   Yi Syllables */\n  /*          Yi Radicals  */\n# define  TT_UCR_YI                              (1L << 19) /* U+A000-U+A48F */\n                                                          /* U+A490-U+A4CF */\n  /* Bit 84   Tagalog  */\n  /*          Hanunoo  */\n  /*          Buhid    */\n  /*          Tagbanwa */\n# define  TT_UCR_PHILIPPINE                      (1L << 20) /* U+1700-U+171F */\n                                                          /* U+1720-U+173F */\n                                                          /* U+1740-U+175F */\n                                                          /* U+1760-U+177F */\n  /* Bit 85   Old Italic */\n# define  TT_UCR_OLD_ITALIC                      (1L << 21) /*U+10300-U+1032F*/\n  /* Bit 86   Gothic */\n# define  TT_UCR_GOTHIC                          (1L << 22) /*U+10330-U+1034F*/\n  /* Bit 87   Deseret */\n# define  TT_UCR_DESERET                         (1L << 23) /*U+10400-U+1044F*/\n  /* Bit 88   Byzantine Musical Symbols      */\n  /*          Musical Symbols                */\n  /*          Ancient Greek Musical Notation */\n# define  TT_UCR_MUSICAL_SYMBOLS                 (1L << 24) /*U+1D000-U+1D0FF*/\n                                                          /*U+1D100-U+1D1FF*/\n                                                          /*U+1D200-U+1D24F*/\n  /* Bit 89   Mathematical Alphanumeric Symbols */\n# define  TT_UCR_MATH_ALPHANUMERIC_SYMBOLS       (1L << 25) /*U+1D400-U+1D7FF*/\n  /* Bit 90   Private Use (plane 15) */\n  /*          Private Use (plane 16) */\n# define  TT_UCR_PRIVATE_USE_SUPPLEMENTARY       (1L << 26) /*U+F0000-U+FFFFD*/\n                                                        /*U+100000-U+10FFFD*/\n  /* Bit 91   Variation Selectors            */\n  /*          Variation Selectors Supplement */\n# define  TT_UCR_VARIATION_SELECTORS             (1L << 27) /* U+FE00-U+FE0F */\n                                                          /*U+E0100-U+E01EF*/\n  /* Bit 92   Tags */\n# define  TT_UCR_TAGS                            (1L << 28) /*U+E0000-U+E007F*/\n  /* Bit 93   Limbu */\n# define  TT_UCR_LIMBU                           (1L << 29) /* U+1900-U+194F */\n  /* Bit 94   Tai Le */\n# define  TT_UCR_TAI_LE                          (1L << 30) /* U+1950-U+197F */\n  /* Bit 95   New Tai Lue */\n# define  TT_UCR_NEW_TAI_LUE                     (1L << 31) /* U+1980-U+19DF */\n\n  /* ulUnicodeRange4 */\n  /* --------------- */\n\n  /* Bit 96   Buginese */\n# define  TT_UCR_BUGINESE                        (1L <<  0) /* U+1A00-U+1A1F */\n  /* Bit 97   Glagolitic */\n# define  TT_UCR_GLAGOLITIC                      (1L <<  1) /* U+2C00-U+2C5F */\n  /* Bit 98   Tifinagh */\n# define  TT_UCR_TIFINAGH                        (1L <<  2) /* U+2D30-U+2D7F */\n  /* Bit 99   Yijing Hexagram Symbols */\n# define  TT_UCR_YIJING                          (1L <<  3) /* U+4DC0-U+4DFF */\n  /* Bit 100  Syloti Nagri */\n# define  TT_UCR_SYLOTI_NAGRI                    (1L <<  4) /* U+A800-U+A82F */\n  /* Bit 101  Linear B Syllabary */\n  /*          Linear B Ideograms */\n  /*          Aegean Numbers     */\n# define  TT_UCR_LINEAR_B                        (1L <<  5) /*U+10000-U+1007F*/\n                                                          /*U+10080-U+100FF*/\n                                                          /*U+10100-U+1013F*/\n  /* Bit 102  Ancient Greek Numbers */\n# define  TT_UCR_ANCIENT_GREEK_NUMBERS           (1L <<  6) /*U+10140-U+1018F*/\n  /* Bit 103  Ugaritic */\n# define  TT_UCR_UGARITIC                        (1L <<  7) /*U+10380-U+1039F*/\n  /* Bit 104  Old Persian */\n# define  TT_UCR_OLD_PERSIAN                     (1L <<  8) /*U+103A0-U+103DF*/\n  /* Bit 105  Shavian */\n# define  TT_UCR_SHAVIAN                         (1L <<  9) /*U+10450-U+1047F*/\n  /* Bit 106  Osmanya */\n# define  TT_UCR_OSMANYA                         (1L << 10) /*U+10480-U+104AF*/\n  /* Bit 107  Cypriot Syllabary */\n# define  TT_UCR_CYPRIOT_SYLLABARY               (1L << 11) /*U+10800-U+1083F*/\n  /* Bit 108  Kharoshthi */\n# define  TT_UCR_KHAROSHTHI                      (1L << 12) /*U+10A00-U+10A5F*/\n  /* Bit 109  Tai Xuan Jing Symbols */\n# define  TT_UCR_TAI_XUAN_JING                   (1L << 13) /*U+1D300-U+1D35F*/\n  /* Bit 110  Cuneiform                         */\n  /*          Cuneiform Numbers and Punctuation */\n# define  TT_UCR_CUNEIFORM                       (1L << 14) /*U+12000-U+123FF*/\n                                                          /*U+12400-U+1247F*/\n  /* Bit 111  Counting Rod Numerals */\n# define  TT_UCR_COUNTING_ROD_NUMERALS           (1L << 15) /*U+1D360-U+1D37F*/\n  /* Bit 112  Sundanese */\n# define  TT_UCR_SUNDANESE                       (1L << 16) /* U+1B80-U+1BBF */\n  /* Bit 113  Lepcha */\n# define  TT_UCR_LEPCHA                          (1L << 17) /* U+1C00-U+1C4F */\n  /* Bit 114  Ol Chiki */\n# define  TT_UCR_OL_CHIKI                        (1L << 18) /* U+1C50-U+1C7F */\n  /* Bit 115  Saurashtra */\n# define  TT_UCR_SAURASHTRA                      (1L << 19) /* U+A880-U+A8DF */\n  /* Bit 116  Kayah Li */\n# define  TT_UCR_KAYAH_LI                        (1L << 20) /* U+A900-U+A92F */\n  /* Bit 117  Rejang */\n# define  TT_UCR_REJANG                          (1L << 21) /* U+A930-U+A95F */\n  /* Bit 118  Cham */\n# define  TT_UCR_CHAM                            (1L << 22) /* U+AA00-U+AA5F */\n  /* Bit 119  Ancient Symbols */\n# define  TT_UCR_ANCIENT_SYMBOLS                 (1L << 23) /*U+10190-U+101CF*/\n  /* Bit 120  Phaistos Disc */\n# define  TT_UCR_PHAISTOS_DISC                   (1L << 24) /*U+101D0-U+101FF*/\n  /* Bit 121  Carian */\n  /*          Lycian */\n  /*          Lydian */\n# define  TT_UCR_OLD_ANATOLIAN                   (1L << 25) /*U+102A0-U+102DF*/\n                                                          /*U+10280-U+1029F*/\n                                                          /*U+10920-U+1093F*/\n  /* Bit 122  Domino Tiles  */\n  /*          Mahjong Tiles */\n# define  TT_UCR_GAME_TILES                      (1L << 26) /*U+1F030-U+1F09F*/\n                                                          /*U+1F000-U+1F02F*/\n  /* Bit 123-127 Reserved for process-internal usage */   Possible bit mask values for the  ulUnicodeRangeX  fields in an SFNT \u2018OS/2\u2019 table.",
            "title": "TT_UCR_XXX"
        },
        {
            "location": "/ft2-type1_tables/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb Type 1 Tables\n\n\n\n\nType 1 Tables\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the definition of Type\u00a01-specific tables, including structures related to other PostScript font formats.\n\n\nPS_FontInfoRec\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  PS_FontInfoRec_\n  {\n    \nFT_String\n*  version;\n    \nFT_String\n*  notice;\n    \nFT_String\n*  full_name;\n    \nFT_String\n*  family_name;\n    \nFT_String\n*  weight;\n    \nFT_Long\n     italic_angle;\n    \nFT_Bool\n     is_fixed_pitch;\n    \nFT_Short\n    underline_position;\n    \nFT_UShort\n   underline_thickness;\n\n  } \nPS_FontInfoRec\n;\n\n\n\n\n\n\nA structure used to model a Type\u00a01 or Type\u00a02 FontInfo dictionary. Note that for Multiple Master fonts, each instance has its own FontInfo dictionary.\n\n\n\n\n\nPS_FontInfo\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n PS_FontInfoRec_*  \nPS_FontInfo\n;\n\n\n\n\n\n\nA handle to a \nPS_FontInfoRec\n structure.\n\n\n\n\n\nPS_PrivateRec\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  PS_PrivateRec_\n  {\n    \nFT_Int\n     unique_id;\n    \nFT_Int\n     lenIV;\n\n    \nFT_Byte\n    num_blue_values;\n    \nFT_Byte\n    num_other_blues;\n    \nFT_Byte\n    num_family_blues;\n    \nFT_Byte\n    num_family_other_blues;\n\n    \nFT_Short\n   blue_values[14];\n    \nFT_Short\n   other_blues[10];\n\n    \nFT_Short\n   family_blues      [14];\n    \nFT_Short\n   family_other_blues[10];\n\n    \nFT_Fixed\n   blue_scale;\n    \nFT_Int\n     blue_shift;\n    \nFT_Int\n     blue_fuzz;\n\n    \nFT_UShort\n  standard_width[1];\n    \nFT_UShort\n  standard_height[1];\n\n    \nFT_Byte\n    num_snap_widths;\n    \nFT_Byte\n    num_snap_heights;\n    \nFT_Bool\n    force_bold;\n    \nFT_Bool\n    round_stem_up;\n\n    \nFT_Short\n   snap_widths [13];  /* including std width  */\n    \nFT_Short\n   snap_heights[13];  /* including std height */\n\n    \nFT_Fixed\n   expansion_factor;\n\n    \nFT_Long\n    language_group;\n    \nFT_Long\n    password;\n\n    \nFT_Short\n   min_feature[2];\n\n  } \nPS_PrivateRec\n;\n\n\n\n\n\n\nA structure used to model a Type\u00a01 or Type\u00a02 private dictionary. Note that for Multiple Master fonts, each instance has its own Private dictionary.\n\n\n\n\n\nPS_Private\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n PS_PrivateRec_*  \nPS_Private\n;\n\n\n\n\n\n\nA handle to a \nPS_PrivateRec\n structure.\n\n\n\n\n\nCID_FaceDictRec\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  CID_FaceDictRec_\n  {\n    \nPS_PrivateRec\n  private_dict;\n\n    \nFT_UInt\n        len_buildchar;\n    \nFT_Fixed\n       forcebold_threshold;\n    \nFT_Pos\n         stroke_width;\n    \nFT_Fixed\n       expansion_factor;\n\n    \nFT_Byte\n        paint_type;\n    \nFT_Byte\n        font_type;\n    \nFT_Matrix\n      font_matrix;\n    \nFT_Vector\n      font_offset;\n\n    \nFT_UInt\n        num_subrs;\n    \nFT_ULong\n       subrmap_offset;\n    \nFT_Int\n         sd_bytes;\n\n  } \nCID_FaceDictRec\n;\n\n\n\n\n\n\nA structure used to represent data in a CID top-level dictionary.\n\n\n\n\n\nCID_FaceDict\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n CID_FaceDictRec_*  \nCID_FaceDict\n;\n\n\n\n\n\n\nA handle to a \nCID_FaceDictRec\n structure.\n\n\n\n\n\nCID_FaceInfoRec\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  CID_FaceInfoRec_\n  {\n    \nFT_String\n*      cid_font_name;\n    \nFT_Fixed\n        cid_version;\n    \nFT_Int\n          cid_font_type;\n\n    \nFT_String\n*      registry;\n    \nFT_String\n*      ordering;\n    \nFT_Int\n          supplement;\n\n    \nPS_FontInfoRec\n  font_info;\n    \nFT_BBox\n         font_bbox;\n    \nFT_ULong\n        uid_base;\n\n    \nFT_Int\n          num_xuid;\n    \nFT_ULong\n        xuid[16];\n\n    \nFT_ULong\n        cidmap_offset;\n    \nFT_Int\n          fd_bytes;\n    \nFT_Int\n          gd_bytes;\n    \nFT_ULong\n        cid_count;\n\n    \nFT_Int\n          num_dicts;\n    \nCID_FaceDict\n    font_dicts;\n\n    \nFT_ULong\n        data_offset;\n\n  } \nCID_FaceInfoRec\n;\n\n\n\n\n\n\nA structure used to represent CID Face information.\n\n\n\n\n\nCID_FaceInfo\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n CID_FaceInfoRec_*  \nCID_FaceInfo\n;\n\n\n\n\n\n\nA handle to a \nCID_FaceInfoRec\n structure.\n\n\n\n\n\nFT_Has_PS_Glyph_Names\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Int\n )\n  \nFT_Has_PS_Glyph_Names\n( \nFT_Face\n  face );\n\n\n\n\n\n\nReturn true if a given face provides reliable PostScript glyph names. This is similar to using the \nFT_HAS_GLYPH_NAMES\n macro, except that certain fonts (mostly TrueType) contain incorrect glyph name tables.\n\n\nWhen this function returns true, the caller is sure that the glyph names returned by \nFT_Get_Glyph_Name\n are reliable.\n\n\ninput\n\n\n\n\n\nface\n\n\nface handle\n\n\n\n\n\n\n\nreturn\n\n\n\nBoolean. True if glyph names are reliable.\n\n\n\n\n\nFT_Get_PS_Font_Info\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_PS_Font_Info\n( \nFT_Face\n      face,\n                       \nPS_FontInfo\n  afont_info );\n\n\n\n\n\n\nRetrieve the \nPS_FontInfoRec\n structure corresponding to a given PostScript font.\n\n\ninput\n\n\n\n\n\nface\n\n\nPostScript face handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nafont_info\n\n\nOutput font info structure pointer.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nString pointers within the \nPS_FontInfoRec\n structure are owned by the face and don't need to be freed by the caller. Missing entries in the font's FontInfo dictionary are represented by NULL pointers.\n\n\nIf the font's format is not PostScript-based, this function will return the \nFT_Err_Invalid_Argument\n error code.\n\n\n\n\n\nFT_Get_PS_Font_Private\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_PS_Font_Private\n( \nFT_Face\n     face,\n                          \nPS_Private\n  afont_private );\n\n\n\n\n\n\nRetrieve the \nPS_PrivateRec\n structure corresponding to a given PostScript font.\n\n\ninput\n\n\n\n\n\nface\n\n\nPostScript face handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nafont_private\n\n\nOutput private dictionary structure pointer.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe string pointers within the \nPS_PrivateRec\n structure are owned by the face and don't need to be freed by the caller.\n\n\nIf the font's format is not PostScript-based, this function returns the \nFT_Err_Invalid_Argument\n error code.\n\n\n\n\n\nFT_Get_PS_Font_Value\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Long\n )\n  \nFT_Get_PS_Font_Value\n( \nFT_Face\n       face,\n                        \nPS_Dict_Keys\n  key,\n                        \nFT_UInt\n       idx,\n                        \nvoid\n         *value,\n                        \nFT_Long\n       value_len );\n\n\n\n\n\n\nRetrieve the value for the supplied key from a PostScript font.\n\n\ninput\n\n\n\n\n\nface\n\n\nPostScript face handle.\n\n\n\n\nkey\n\n\nAn enumeration value representing the dictionary key to retrieve.\n\n\n\n\nidx\n\n\nFor array values, this specifies the index to be returned.\n\n\n\n\nvalue\n\n\nA pointer to memory into which to write the value.\n\n\n\n\nvalen_len\n\n\nThe size, in bytes, of the memory supplied for the value.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nvalue\n\n\nThe value matching the above key, if it exists.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe amount of memory (in bytes) required to hold the requested value (if it exists, -1 otherwise).\n\n\nnote\n\n\n\nThe values returned are not pointers into the internal structures of the face, but are \u2018fresh\u2019 copies, so that the memory containing them belongs to the calling application. This also enforces the \u2018read-only\u2019 nature of these values, i.e., this function cannot be used to manipulate the face.\n\n\n\u2018value\u2019 is a void pointer because the values returned can be of various types.\n\n\nIf either \u2018value\u2019 is NULL or \nvalue_len\n is too small, just the required memory size for the requested entry is returned.\n\n\nThe \u2018idx\u2019 parameter is used, not only to retrieve elements of, for example, the FontMatrix or FontBBox, but also to retrieve name keys from the CharStrings dictionary, and the charstrings themselves. It is ignored for atomic values.\n\n\nPS_DICT_BLUE_SCALE returns a value that is scaled up by 1000. To get the value as in the font stream, you need to divide by 65536000.0 (to remove the FT_Fixed scale, and the x1000 scale).\n\n\nIMPORTANT: Only key/value pairs read by the FreeType interpreter can be retrieved. So, for example, PostScript procedures such as NP, ND, and RD are not available. Arbitrary keys are, obviously, not be available either.\n\n\nIf the font's format is not PostScript-based, this function returns the \nFT_Err_Invalid_Argument\n error code.\n\n\nsince\n\n\n\n2.4.8\n\n\n\n\n\nT1_Blend_Flags\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  T1_Blend_Flags_\n  {\n    /* required fields in a FontInfo blend dictionary */\n    \nT1_BLEND_UNDERLINE_POSITION\n = 0,\n    \nT1_BLEND_UNDERLINE_THICKNESS\n,\n    \nT1_BLEND_ITALIC_ANGLE\n,\n\n    /* required fields in a Private blend dictionary */\n    \nT1_BLEND_BLUE_VALUES\n,\n    \nT1_BLEND_OTHER_BLUES\n,\n    \nT1_BLEND_STANDARD_WIDTH\n,\n    \nT1_BLEND_STANDARD_HEIGHT\n,\n    \nT1_BLEND_STEM_SNAP_WIDTHS\n,\n    \nT1_BLEND_STEM_SNAP_HEIGHTS\n,\n    \nT1_BLEND_BLUE_SCALE\n,\n    \nT1_BLEND_BLUE_SHIFT\n,\n    \nT1_BLEND_FAMILY_BLUES\n,\n    \nT1_BLEND_FAMILY_OTHER_BLUES\n,\n    \nT1_BLEND_FORCE_BOLD\n,\n\n    T1_BLEND_MAX    /* do not remove */\n\n  } \nT1_Blend_Flags\n;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nT1_Blend_Flags\n' values instead                       */\n#\ndefine\n t1_blend_underline_position   \nT1_BLEND_UNDERLINE_POSITION\n\n#\ndefine\n t1_blend_underline_thickness  \nT1_BLEND_UNDERLINE_THICKNESS\n\n#\ndefine\n t1_blend_italic_angle         \nT1_BLEND_ITALIC_ANGLE\n\n#\ndefine\n t1_blend_blue_values          \nT1_BLEND_BLUE_VALUES\n\n#\ndefine\n t1_blend_other_blues          \nT1_BLEND_OTHER_BLUES\n\n#\ndefine\n t1_blend_standard_widths      \nT1_BLEND_STANDARD_WIDTH\n\n#\ndefine\n t1_blend_standard_height      \nT1_BLEND_STANDARD_HEIGHT\n\n#\ndefine\n t1_blend_stem_snap_widths     \nT1_BLEND_STEM_SNAP_WIDTHS\n\n#\ndefine\n t1_blend_stem_snap_heights    \nT1_BLEND_STEM_SNAP_HEIGHTS\n\n#\ndefine\n t1_blend_blue_scale           \nT1_BLEND_BLUE_SCALE\n\n#\ndefine\n t1_blend_blue_shift           \nT1_BLEND_BLUE_SHIFT\n\n#\ndefine\n t1_blend_family_blues         \nT1_BLEND_FAMILY_BLUES\n\n#\ndefine\n t1_blend_family_other_blues   \nT1_BLEND_FAMILY_OTHER_BLUES\n\n#\ndefine\n t1_blend_force_bold           \nT1_BLEND_FORCE_BOLD\n\n#\ndefine\n t1_blend_max                  T1_BLEND_MAX\n\n\n\n\n\n\nA set of flags used to indicate which fields are present in a given blend dictionary (font info or private). Used to support Multiple Masters fonts.\n\n\nvalues\n\n\n\n\n\nT1_BLEND_UNDERLINE_POSITION\n\n\n\n\n\nT1_BLEND_UNDERLINE_THICKNESS\n\n\n\n\n\nT1_BLEND_ITALIC_ANGLE\n\n\n\n\n\nT1_BLEND_BLUE_VALUES\n\n\n\n\n\nT1_BLEND_OTHER_BLUES\n\n\n\n\n\nT1_BLEND_STANDARD_WIDTH\n\n\n\n\n\nT1_BLEND_STANDARD_HEIGHT\n\n\n\n\n\nT1_BLEND_STEM_SNAP_WIDTHS\n\n\n\n\n\nT1_BLEND_STEM_SNAP_HEIGHTS\n\n\n\n\n\nT1_BLEND_BLUE_SCALE\n\n\n\n\n\nT1_BLEND_BLUE_SHIFT\n\n\n\n\n\nT1_BLEND_FAMILY_BLUES\n\n\n\n\n\nT1_BLEND_FAMILY_OTHER_BLUES\n\n\n\n\n\nT1_BLEND_FORCE_BOLD\n\n\n\n\n\n\n\n\n\n\n\nT1_EncodingType\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  T1_EncodingType_\n  {\n    \nT1_ENCODING_TYPE_NONE\n = 0,\n    \nT1_ENCODING_TYPE_ARRAY\n,\n    \nT1_ENCODING_TYPE_STANDARD\n,\n    \nT1_ENCODING_TYPE_ISOLATIN1\n,\n    \nT1_ENCODING_TYPE_EXPERT\n\n\n  } \nT1_EncodingType\n;\n\n\n\n\n\n\nAn enumeration describing the \u2018Encoding\u2019 entry in a Type 1 dictionary.\n\n\nvalues\n\n\n\n\n\nT1_ENCODING_TYPE_NONE\n\n\n\n\n\nT1_ENCODING_TYPE_ARRAY\n\n\n\n\n\nT1_ENCODING_TYPE_STANDARD\n\n\n\n\n\nT1_ENCODING_TYPE_ISOLATIN1\n\n\n\n\n\nT1_ENCODING_TYPE_EXPERT\n\n\n\n\n\n\n\n\nsince\n\n\n\n2.4.8\n\n\n\n\n\nPS_Dict_Keys\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  PS_Dict_Keys_\n  {\n    /* conventionally in the font dictionary */\n    \nPS_DICT_FONT_TYPE\n,              /* \nFT_Byte\n         */\n    \nPS_DICT_FONT_MATRIX\n,            /* \nFT_Fixed\n        */\n    \nPS_DICT_FONT_BBOX\n,              /* \nFT_Fixed\n        */\n    \nPS_DICT_PAINT_TYPE\n,             /* \nFT_Byte\n         */\n    \nPS_DICT_FONT_NAME\n,              /* \nFT_String\n*      */\n    \nPS_DICT_UNIQUE_ID\n,              /* \nFT_Int\n          */\n    \nPS_DICT_NUM_CHAR_STRINGS\n,       /* \nFT_Int\n          */\n    \nPS_DICT_CHAR_STRING_KEY\n,        /* \nFT_String\n*      */\n    \nPS_DICT_CHAR_STRING\n,            /* \nFT_String\n*      */\n    \nPS_DICT_ENCODING_TYPE\n,          /* \nT1_EncodingType\n */\n    \nPS_DICT_ENCODING_ENTRY\n,         /* \nFT_String\n*      */\n\n    /* conventionally in the font Private dictionary */\n    \nPS_DICT_NUM_SUBRS\n,              /* \nFT_Int\n     */\n    \nPS_DICT_SUBR\n,                   /* \nFT_String\n* */\n    \nPS_DICT_STD_HW\n,                 /* \nFT_UShort\n  */\n    \nPS_DICT_STD_VW\n,                 /* \nFT_UShort\n  */\n    \nPS_DICT_NUM_BLUE_VALUES\n,        /* \nFT_Byte\n    */\n    \nPS_DICT_BLUE_VALUE\n,             /* \nFT_Short\n   */\n    \nPS_DICT_BLUE_FUZZ\n,              /* \nFT_Int\n     */\n    \nPS_DICT_NUM_OTHER_BLUES\n,        /* \nFT_Byte\n    */\n    \nPS_DICT_OTHER_BLUE\n,             /* \nFT_Short\n   */\n    \nPS_DICT_NUM_FAMILY_BLUES\n,       /* \nFT_Byte\n    */\n    \nPS_DICT_FAMILY_BLUE\n,            /* \nFT_Short\n   */\n    \nPS_DICT_NUM_FAMILY_OTHER_BLUES\n, /* \nFT_Byte\n    */\n    \nPS_DICT_FAMILY_OTHER_BLUE\n,      /* \nFT_Short\n   */\n    \nPS_DICT_BLUE_SCALE\n,             /* \nFT_Fixed\n   */\n    \nPS_DICT_BLUE_SHIFT\n,             /* \nFT_Int\n     */\n    \nPS_DICT_NUM_STEM_SNAP_H\n,        /* \nFT_Byte\n    */\n    \nPS_DICT_STEM_SNAP_H\n,            /* \nFT_Short\n   */\n    \nPS_DICT_NUM_STEM_SNAP_V\n,        /* \nFT_Byte\n    */\n    \nPS_DICT_STEM_SNAP_V\n,            /* \nFT_Short\n   */\n    \nPS_DICT_FORCE_BOLD\n,             /* \nFT_Bool\n    */\n    \nPS_DICT_RND_STEM_UP\n,            /* \nFT_Bool\n    */\n    \nPS_DICT_MIN_FEATURE\n,            /* \nFT_Short\n   */\n    \nPS_DICT_LEN_IV\n,                 /* \nFT_Int\n     */\n    \nPS_DICT_PASSWORD\n,               /* \nFT_Long\n    */\n    \nPS_DICT_LANGUAGE_GROUP\n,         /* \nFT_Long\n    */\n\n    /* conventionally in the font FontInfo dictionary */\n    \nPS_DICT_VERSION\n,                /* \nFT_String\n* */\n    \nPS_DICT_NOTICE\n,                 /* \nFT_String\n* */\n    \nPS_DICT_FULL_NAME\n,              /* \nFT_String\n* */\n    \nPS_DICT_FAMILY_NAME\n,            /* \nFT_String\n* */\n    \nPS_DICT_WEIGHT\n,                 /* \nFT_String\n* */\n    \nPS_DICT_IS_FIXED_PITCH\n,         /* \nFT_Bool\n    */\n    \nPS_DICT_UNDERLINE_POSITION\n,     /* \nFT_Short\n   */\n    \nPS_DICT_UNDERLINE_THICKNESS\n,    /* \nFT_UShort\n  */\n    \nPS_DICT_FS_TYPE\n,                /* \nFT_UShort\n  */\n    \nPS_DICT_ITALIC_ANGLE\n,           /* \nFT_Long\n    */\n\n    PS_DICT_MAX = \nPS_DICT_ITALIC_ANGLE\n\n\n  } \nPS_Dict_Keys\n;\n\n\n\n\n\n\nAn enumeration used in calls to \nFT_Get_PS_Font_Value\n to identify the Type\u00a01 dictionary entry to retrieve.\n\n\nvalues\n\n\n\n\n\nPS_DICT_FONT_TYPE\n\n\n\n\n\nPS_DICT_FONT_MATRIX\n\n\n\n\n\nPS_DICT_FONT_BBOX\n\n\n\n\n\nPS_DICT_PAINT_TYPE\n\n\n\n\n\nPS_DICT_FONT_NAME\n\n\n\n\n\nPS_DICT_UNIQUE_ID\n\n\n\n\n\nPS_DICT_NUM_CHAR_STRINGS\n\n\n\n\n\nPS_DICT_CHAR_STRING_KEY\n\n\n\n\n\nPS_DICT_CHAR_STRING\n\n\n\n\n\nPS_DICT_ENCODING_TYPE\n\n\n\n\n\nPS_DICT_ENCODING_ENTRY\n\n\n\n\n\nPS_DICT_NUM_SUBRS\n\n\n\n\n\nPS_DICT_SUBR\n\n\n\n\n\nPS_DICT_STD_HW\n\n\n\n\n\nPS_DICT_STD_VW\n\n\n\n\n\nPS_DICT_NUM_BLUE_VALUES\n\n\n\n\n\nPS_DICT_BLUE_VALUE\n\n\n\n\n\nPS_DICT_BLUE_FUZZ\n\n\n\n\n\nPS_DICT_NUM_OTHER_BLUES\n\n\n\n\n\nPS_DICT_OTHER_BLUE\n\n\n\n\n\nPS_DICT_NUM_FAMILY_BLUES\n\n\n\n\n\nPS_DICT_FAMILY_BLUE\n\n\n\n\n\nPS_DICT_NUM_FAMILY_OTHER_BLUES\n\n\n\n\n\nPS_DICT_FAMILY_OTHER_BLUE\n\n\n\n\n\nPS_DICT_BLUE_SCALE\n\n\n\n\n\nPS_DICT_BLUE_SHIFT\n\n\n\n\n\nPS_DICT_NUM_STEM_SNAP_H\n\n\n\n\n\nPS_DICT_STEM_SNAP_H\n\n\n\n\n\nPS_DICT_NUM_STEM_SNAP_V\n\n\n\n\n\nPS_DICT_STEM_SNAP_V\n\n\n\n\n\nPS_DICT_FORCE_BOLD\n\n\n\n\n\nPS_DICT_RND_STEM_UP\n\n\n\n\n\nPS_DICT_MIN_FEATURE\n\n\n\n\n\nPS_DICT_LEN_IV\n\n\n\n\n\nPS_DICT_PASSWORD\n\n\n\n\n\nPS_DICT_LANGUAGE_GROUP\n\n\n\n\n\nPS_DICT_VERSION\n\n\n\n\n\nPS_DICT_NOTICE\n\n\n\n\n\nPS_DICT_FULL_NAME\n\n\n\n\n\nPS_DICT_FAMILY_NAME\n\n\n\n\n\nPS_DICT_WEIGHT\n\n\n\n\n\nPS_DICT_IS_FIXED_PITCH\n\n\n\n\n\nPS_DICT_UNDERLINE_POSITION\n\n\n\n\n\nPS_DICT_UNDERLINE_THICKNESS\n\n\n\n\n\nPS_DICT_FS_TYPE\n\n\n\n\n\nPS_DICT_ITALIC_ANGLE\n\n\n\n\n\n\n\n\nsince\n\n\n\n2.4.8\n\n\n\n\n\nT1_FontInfo\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nPS_FontInfoRec\n  \nT1_FontInfo\n;\n\n\n\n\n\n\nThis type is equivalent to \nPS_FontInfoRec\n. It is deprecated but kept to maintain source compatibility between various versions of FreeType.\n\n\n\n\n\nT1_Private\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nPS_PrivateRec\n  \nT1_Private\n;\n\n\n\n\n\n\nThis type is equivalent to \nPS_PrivateRec\n. It is deprecated but kept to maintain source compatibility between various versions of FreeType.\n\n\n\n\n\nCID_FontDict\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nCID_FaceDictRec\n  \nCID_FontDict\n;\n\n\n\n\n\n\nThis type is equivalent to \nCID_FaceDictRec\n. It is deprecated but kept to maintain source compatibility between various versions of FreeType.\n\n\n\n\n\nCID_Info\n\u00b6\n\n\nDefined in FT_TYPE1_TABLES_H (freetype/t1tables.h).\n\n\n\n\n\n  \ntypedef\n \nCID_FaceInfoRec\n  \nCID_Info\n;\n\n\n\n\n\n\nThis type is equivalent to \nCID_FaceInfoRec\n. It is deprecated but kept to maintain source compatibility between various versions of FreeType.",
            "title": "Type 1 Tables"
        },
        {
            "location": "/ft2-type1_tables/index.html#type-1-tables",
            "text": "",
            "title": "Type 1 Tables"
        },
        {
            "location": "/ft2-type1_tables/index.html#synopsis",
            "text": "This section contains the definition of Type\u00a01-specific tables, including structures related to other PostScript font formats.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-type1_tables/index.html#ps_fontinforec",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct   PS_FontInfoRec_\n  {\n     FT_String *  version;\n     FT_String *  notice;\n     FT_String *  full_name;\n     FT_String *  family_name;\n     FT_String *  weight;\n     FT_Long      italic_angle;\n     FT_Bool      is_fixed_pitch;\n     FT_Short     underline_position;\n     FT_UShort    underline_thickness;\n\n  }  PS_FontInfoRec ;   A structure used to model a Type\u00a01 or Type\u00a02 FontInfo dictionary. Note that for Multiple Master fonts, each instance has its own FontInfo dictionary.",
            "title": "PS_FontInfoRec"
        },
        {
            "location": "/ft2-type1_tables/index.html#ps_fontinfo",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct  PS_FontInfoRec_*   PS_FontInfo ;   A handle to a  PS_FontInfoRec  structure.",
            "title": "PS_FontInfo"
        },
        {
            "location": "/ft2-type1_tables/index.html#ps_privaterec",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct   PS_PrivateRec_\n  {\n     FT_Int      unique_id;\n     FT_Int      lenIV;\n\n     FT_Byte     num_blue_values;\n     FT_Byte     num_other_blues;\n     FT_Byte     num_family_blues;\n     FT_Byte     num_family_other_blues;\n\n     FT_Short    blue_values[14];\n     FT_Short    other_blues[10];\n\n     FT_Short    family_blues      [14];\n     FT_Short    family_other_blues[10];\n\n     FT_Fixed    blue_scale;\n     FT_Int      blue_shift;\n     FT_Int      blue_fuzz;\n\n     FT_UShort   standard_width[1];\n     FT_UShort   standard_height[1];\n\n     FT_Byte     num_snap_widths;\n     FT_Byte     num_snap_heights;\n     FT_Bool     force_bold;\n     FT_Bool     round_stem_up;\n\n     FT_Short    snap_widths [13];  /* including std width  */\n     FT_Short    snap_heights[13];  /* including std height */\n\n     FT_Fixed    expansion_factor;\n\n     FT_Long     language_group;\n     FT_Long     password;\n\n     FT_Short    min_feature[2];\n\n  }  PS_PrivateRec ;   A structure used to model a Type\u00a01 or Type\u00a02 private dictionary. Note that for Multiple Master fonts, each instance has its own Private dictionary.",
            "title": "PS_PrivateRec"
        },
        {
            "location": "/ft2-type1_tables/index.html#ps_private",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct  PS_PrivateRec_*   PS_Private ;   A handle to a  PS_PrivateRec  structure.",
            "title": "PS_Private"
        },
        {
            "location": "/ft2-type1_tables/index.html#cid_facedictrec",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct   CID_FaceDictRec_\n  {\n     PS_PrivateRec   private_dict;\n\n     FT_UInt         len_buildchar;\n     FT_Fixed        forcebold_threshold;\n     FT_Pos          stroke_width;\n     FT_Fixed        expansion_factor;\n\n     FT_Byte         paint_type;\n     FT_Byte         font_type;\n     FT_Matrix       font_matrix;\n     FT_Vector       font_offset;\n\n     FT_UInt         num_subrs;\n     FT_ULong        subrmap_offset;\n     FT_Int          sd_bytes;\n\n  }  CID_FaceDictRec ;   A structure used to represent data in a CID top-level dictionary.",
            "title": "CID_FaceDictRec"
        },
        {
            "location": "/ft2-type1_tables/index.html#cid_facedict",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct  CID_FaceDictRec_*   CID_FaceDict ;   A handle to a  CID_FaceDictRec  structure.",
            "title": "CID_FaceDict"
        },
        {
            "location": "/ft2-type1_tables/index.html#cid_faceinforec",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct   CID_FaceInfoRec_\n  {\n     FT_String *      cid_font_name;\n     FT_Fixed         cid_version;\n     FT_Int           cid_font_type;\n\n     FT_String *      registry;\n     FT_String *      ordering;\n     FT_Int           supplement;\n\n     PS_FontInfoRec   font_info;\n     FT_BBox          font_bbox;\n     FT_ULong         uid_base;\n\n     FT_Int           num_xuid;\n     FT_ULong         xuid[16];\n\n     FT_ULong         cidmap_offset;\n     FT_Int           fd_bytes;\n     FT_Int           gd_bytes;\n     FT_ULong         cid_count;\n\n     FT_Int           num_dicts;\n     CID_FaceDict     font_dicts;\n\n     FT_ULong         data_offset;\n\n  }  CID_FaceInfoRec ;   A structure used to represent CID Face information.",
            "title": "CID_FaceInfoRec"
        },
        {
            "location": "/ft2-type1_tables/index.html#cid_faceinfo",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   struct  CID_FaceInfoRec_*   CID_FaceInfo ;   A handle to a  CID_FaceInfoRec  structure.",
            "title": "CID_FaceInfo"
        },
        {
            "location": "/ft2-type1_tables/index.html#ft_has_ps_glyph_names",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n  FT_EXPORT(  FT_Int  )\n   FT_Has_PS_Glyph_Names (  FT_Face   face );   Return true if a given face provides reliable PostScript glyph names. This is similar to using the  FT_HAS_GLYPH_NAMES  macro, except that certain fonts (mostly TrueType) contain incorrect glyph name tables.  When this function returns true, the caller is sure that the glyph names returned by  FT_Get_Glyph_Name  are reliable.",
            "title": "FT_Has_PS_Glyph_Names"
        },
        {
            "location": "/ft2-type1_tables/index.html#ft_get_ps_font_info",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_PS_Font_Info (  FT_Face       face,\n                        PS_FontInfo   afont_info );   Retrieve the  PS_FontInfoRec  structure corresponding to a given PostScript font.",
            "title": "FT_Get_PS_Font_Info"
        },
        {
            "location": "/ft2-type1_tables/index.html#ft_get_ps_font_private",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_PS_Font_Private (  FT_Face      face,\n                           PS_Private   afont_private );   Retrieve the  PS_PrivateRec  structure corresponding to a given PostScript font.",
            "title": "FT_Get_PS_Font_Private"
        },
        {
            "location": "/ft2-type1_tables/index.html#ft_get_ps_font_value",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n  FT_EXPORT(  FT_Long  )\n   FT_Get_PS_Font_Value (  FT_Face        face,\n                         PS_Dict_Keys   key,\n                         FT_UInt        idx,\n                         void          *value,\n                         FT_Long        value_len );   Retrieve the value for the supplied key from a PostScript font.",
            "title": "FT_Get_PS_Font_Value"
        },
        {
            "location": "/ft2-type1_tables/index.html#t1_blend_flags",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   enum   T1_Blend_Flags_\n  {\n    /* required fields in a FontInfo blend dictionary */\n     T1_BLEND_UNDERLINE_POSITION  = 0,\n     T1_BLEND_UNDERLINE_THICKNESS ,\n     T1_BLEND_ITALIC_ANGLE ,\n\n    /* required fields in a Private blend dictionary */\n     T1_BLEND_BLUE_VALUES ,\n     T1_BLEND_OTHER_BLUES ,\n     T1_BLEND_STANDARD_WIDTH ,\n     T1_BLEND_STANDARD_HEIGHT ,\n     T1_BLEND_STEM_SNAP_WIDTHS ,\n     T1_BLEND_STEM_SNAP_HEIGHTS ,\n     T1_BLEND_BLUE_SCALE ,\n     T1_BLEND_BLUE_SHIFT ,\n     T1_BLEND_FAMILY_BLUES ,\n     T1_BLEND_FAMILY_OTHER_BLUES ,\n     T1_BLEND_FORCE_BOLD ,\n\n    T1_BLEND_MAX    /* do not remove */\n\n  }  T1_Blend_Flags ;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` T1_Blend_Flags ' values instead                       */\n# define  t1_blend_underline_position    T1_BLEND_UNDERLINE_POSITION \n# define  t1_blend_underline_thickness   T1_BLEND_UNDERLINE_THICKNESS \n# define  t1_blend_italic_angle          T1_BLEND_ITALIC_ANGLE \n# define  t1_blend_blue_values           T1_BLEND_BLUE_VALUES \n# define  t1_blend_other_blues           T1_BLEND_OTHER_BLUES \n# define  t1_blend_standard_widths       T1_BLEND_STANDARD_WIDTH \n# define  t1_blend_standard_height       T1_BLEND_STANDARD_HEIGHT \n# define  t1_blend_stem_snap_widths      T1_BLEND_STEM_SNAP_WIDTHS \n# define  t1_blend_stem_snap_heights     T1_BLEND_STEM_SNAP_HEIGHTS \n# define  t1_blend_blue_scale            T1_BLEND_BLUE_SCALE \n# define  t1_blend_blue_shift            T1_BLEND_BLUE_SHIFT \n# define  t1_blend_family_blues          T1_BLEND_FAMILY_BLUES \n# define  t1_blend_family_other_blues    T1_BLEND_FAMILY_OTHER_BLUES \n# define  t1_blend_force_bold            T1_BLEND_FORCE_BOLD \n# define  t1_blend_max                  T1_BLEND_MAX   A set of flags used to indicate which fields are present in a given blend dictionary (font info or private). Used to support Multiple Masters fonts.",
            "title": "T1_Blend_Flags"
        },
        {
            "location": "/ft2-type1_tables/index.html#t1_encodingtype",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   enum   T1_EncodingType_\n  {\n     T1_ENCODING_TYPE_NONE  = 0,\n     T1_ENCODING_TYPE_ARRAY ,\n     T1_ENCODING_TYPE_STANDARD ,\n     T1_ENCODING_TYPE_ISOLATIN1 ,\n     T1_ENCODING_TYPE_EXPERT \n\n  }  T1_EncodingType ;   An enumeration describing the \u2018Encoding\u2019 entry in a Type 1 dictionary.",
            "title": "T1_EncodingType"
        },
        {
            "location": "/ft2-type1_tables/index.html#ps_dict_keys",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   enum   PS_Dict_Keys_\n  {\n    /* conventionally in the font dictionary */\n     PS_DICT_FONT_TYPE ,              /*  FT_Byte          */\n     PS_DICT_FONT_MATRIX ,            /*  FT_Fixed         */\n     PS_DICT_FONT_BBOX ,              /*  FT_Fixed         */\n     PS_DICT_PAINT_TYPE ,             /*  FT_Byte          */\n     PS_DICT_FONT_NAME ,              /*  FT_String *      */\n     PS_DICT_UNIQUE_ID ,              /*  FT_Int           */\n     PS_DICT_NUM_CHAR_STRINGS ,       /*  FT_Int           */\n     PS_DICT_CHAR_STRING_KEY ,        /*  FT_String *      */\n     PS_DICT_CHAR_STRING ,            /*  FT_String *      */\n     PS_DICT_ENCODING_TYPE ,          /*  T1_EncodingType  */\n     PS_DICT_ENCODING_ENTRY ,         /*  FT_String *      */\n\n    /* conventionally in the font Private dictionary */\n     PS_DICT_NUM_SUBRS ,              /*  FT_Int      */\n     PS_DICT_SUBR ,                   /*  FT_String * */\n     PS_DICT_STD_HW ,                 /*  FT_UShort   */\n     PS_DICT_STD_VW ,                 /*  FT_UShort   */\n     PS_DICT_NUM_BLUE_VALUES ,        /*  FT_Byte     */\n     PS_DICT_BLUE_VALUE ,             /*  FT_Short    */\n     PS_DICT_BLUE_FUZZ ,              /*  FT_Int      */\n     PS_DICT_NUM_OTHER_BLUES ,        /*  FT_Byte     */\n     PS_DICT_OTHER_BLUE ,             /*  FT_Short    */\n     PS_DICT_NUM_FAMILY_BLUES ,       /*  FT_Byte     */\n     PS_DICT_FAMILY_BLUE ,            /*  FT_Short    */\n     PS_DICT_NUM_FAMILY_OTHER_BLUES , /*  FT_Byte     */\n     PS_DICT_FAMILY_OTHER_BLUE ,      /*  FT_Short    */\n     PS_DICT_BLUE_SCALE ,             /*  FT_Fixed    */\n     PS_DICT_BLUE_SHIFT ,             /*  FT_Int      */\n     PS_DICT_NUM_STEM_SNAP_H ,        /*  FT_Byte     */\n     PS_DICT_STEM_SNAP_H ,            /*  FT_Short    */\n     PS_DICT_NUM_STEM_SNAP_V ,        /*  FT_Byte     */\n     PS_DICT_STEM_SNAP_V ,            /*  FT_Short    */\n     PS_DICT_FORCE_BOLD ,             /*  FT_Bool     */\n     PS_DICT_RND_STEM_UP ,            /*  FT_Bool     */\n     PS_DICT_MIN_FEATURE ,            /*  FT_Short    */\n     PS_DICT_LEN_IV ,                 /*  FT_Int      */\n     PS_DICT_PASSWORD ,               /*  FT_Long     */\n     PS_DICT_LANGUAGE_GROUP ,         /*  FT_Long     */\n\n    /* conventionally in the font FontInfo dictionary */\n     PS_DICT_VERSION ,                /*  FT_String * */\n     PS_DICT_NOTICE ,                 /*  FT_String * */\n     PS_DICT_FULL_NAME ,              /*  FT_String * */\n     PS_DICT_FAMILY_NAME ,            /*  FT_String * */\n     PS_DICT_WEIGHT ,                 /*  FT_String * */\n     PS_DICT_IS_FIXED_PITCH ,         /*  FT_Bool     */\n     PS_DICT_UNDERLINE_POSITION ,     /*  FT_Short    */\n     PS_DICT_UNDERLINE_THICKNESS ,    /*  FT_UShort   */\n     PS_DICT_FS_TYPE ,                /*  FT_UShort   */\n     PS_DICT_ITALIC_ANGLE ,           /*  FT_Long     */\n\n    PS_DICT_MAX =  PS_DICT_ITALIC_ANGLE \n\n  }  PS_Dict_Keys ;   An enumeration used in calls to  FT_Get_PS_Font_Value  to identify the Type\u00a01 dictionary entry to retrieve.",
            "title": "PS_Dict_Keys"
        },
        {
            "location": "/ft2-type1_tables/index.html#t1_fontinfo",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   PS_FontInfoRec    T1_FontInfo ;   This type is equivalent to  PS_FontInfoRec . It is deprecated but kept to maintain source compatibility between various versions of FreeType.",
            "title": "T1_FontInfo"
        },
        {
            "location": "/ft2-type1_tables/index.html#t1_private",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   PS_PrivateRec    T1_Private ;   This type is equivalent to  PS_PrivateRec . It is deprecated but kept to maintain source compatibility between various versions of FreeType.",
            "title": "T1_Private"
        },
        {
            "location": "/ft2-type1_tables/index.html#cid_fontdict",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   CID_FaceDictRec    CID_FontDict ;   This type is equivalent to  CID_FaceDictRec . It is deprecated but kept to maintain source compatibility between various versions of FreeType.",
            "title": "CID_FontDict"
        },
        {
            "location": "/ft2-type1_tables/index.html#cid_info",
            "text": "Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).   \n   typedef   CID_FaceInfoRec    CID_Info ;   This type is equivalent to  CID_FaceInfoRec . It is deprecated but kept to maintain source compatibility between various versions of FreeType.",
            "title": "CID_Info"
        },
        {
            "location": "/ft2-sfnt_names/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb SFNT Names\n\n\n\n\nSFNT Names\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe TrueType and OpenType specifications allow the inclusion of a special names table (\u2018name\u2019) in font files. This table contains textual (and internationalized) information regarding the font, like family name, copyright, version, etc.\n\n\nThe definitions below are used to access them if available.\n\n\nNote that this has nothing to do with glyph names!\n\n\nFT_SfntName\n\u00b6\n\n\nDefined in FT_SFNT_NAMES_H (freetype/ftsnames.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_SfntName_\n  {\n    \nFT_UShort\n  platform_id;\n    \nFT_UShort\n  encoding_id;\n    \nFT_UShort\n  language_id;\n    \nFT_UShort\n  name_id;\n\n    \nFT_Byte\n*   string;      /* this string is *not* null-terminated! */\n    \nFT_UInt\n    string_len;  /* in bytes                              */\n\n  } \nFT_SfntName\n;\n\n\n\n\n\n\nA structure used to model an SFNT \u2018name\u2019 table entry.\n\n\nfields\n\n\n\n\n\nplatform_id\n\n\nThe platform ID for \u2018string\u2019. See \nTT_PLATFORM_XXX\n for possible values.\n\n\n\n\nencoding_id\n\n\nThe encoding ID for \u2018string\u2019. See \nTT_APPLE_ID_XXX\n, \nTT_MAC_ID_XXX\n, \nTT_ISO_ID_XXX\n, \nTT_MS_ID_XXX\n, and \nTT_ADOBE_ID_XXX\n for possible values.\n\n\n\n\nlanguage_id\n\n\nThe language ID for \u2018string\u2019. See \nTT_MAC_LANGID_XXX\n and \nTT_MS_LANGID_XXX\n for possible values.\nRegistered OpenType values for \nlanguage_id\n are always smaller than 0x8000; values equal or larger than 0x8000 usually indicate a language tag string (introduced in OpenType version 1.6). Use function \nFT_Get_Sfnt_LangTag\n with \nlanguage_id\n as its argument to retrieve the associated language tag.\n\n\n\n\nname_id\n\n\nAn identifier for \u2018string\u2019. See \nTT_NAME_ID_XXX\n for possible values.\n\n\n\n\nstring\n\n\nThe \u2018name\u2019 string. Note that its format differs depending on the (platform,encoding) pair, being either a string of bytes (without a terminating NULL byte) or containing UTF-16BE entities.\n\n\n\n\nstring_len\n\n\nThe length of \u2018string\u2019 in bytes.\n\n\n\n\n\n\n\nnote\n\n\n\nPlease refer to the TrueType or OpenType specification for more details.\n\n\n\n\n\nFT_Get_Sfnt_Name_Count\n\u00b6\n\n\nDefined in FT_SFNT_NAMES_H (freetype/ftsnames.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFT_Get_Sfnt_Name_Count\n( \nFT_Face\n  face );\n\n\n\n\n\n\nRetrieve the number of name strings in the SFNT \u2018name\u2019 table.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe number of strings in the \u2018name\u2019 table.\n\n\nnote\n\n\n\nThis function always returns an error if the config macro \nTT_CONFIG_OPTION_SFNT_NAMES\n is not defined in \nftoption.h\n.\n\n\n\n\n\nFT_Get_Sfnt_Name\n\u00b6\n\n\nDefined in FT_SFNT_NAMES_H (freetype/ftsnames.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Sfnt_Name\n( \nFT_Face\n       face,\n                    \nFT_UInt\n       idx,\n                    \nFT_SfntName\n  *aname );\n\n\n\n\n\n\nRetrieve a string of the SFNT \u2018name\u2019 table for a given index.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\nidx\n\n\nThe index of the \u2018name\u2019 string.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naname\n\n\nThe indexed \nFT_SfntName\n structure.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe \u2018string\u2019 array returned in the \u2018aname\u2019 structure is not null-terminated. Note that you don't have to deallocate \u2018string\u2019 by yourself; FreeType takes care of it if you call \nFT_Done_Face\n.\n\n\nUse \nFT_Get_Sfnt_Name_Count\n to get the total number of available \u2018name\u2019 table entries, then do a loop until you get the right platform, encoding, and name ID.\n\n\n\u2018name\u2019 table format\u00a01 entries can use language tags also, see \nFT_Get_Sfnt_LangTag\n.\n\n\nThis function always returns an error if the config macro \nTT_CONFIG_OPTION_SFNT_NAMES\n is not defined in \nftoption.h\n.\n\n\n\n\n\nFT_SfntLangTag\n\u00b6\n\n\nDefined in FT_SFNT_NAMES_H (freetype/ftsnames.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_SfntLangTag_\n  {\n    \nFT_Byte\n*  string;      /* this string is *not* null-terminated! */\n    \nFT_UInt\n   string_len;  /* in bytes                              */\n\n  } \nFT_SfntLangTag\n;\n\n\n\n\n\n\nA structure to model a language tag entry from an SFNT \u2018name\u2019 table.\n\n\nfields\n\n\n\n\n\nstring\n\n\nThe language tag string, encoded in UTF-16BE (without trailing NULL bytes).\n\n\n\n\nstring_len\n\n\nThe length of \u2018string\u2019 in \nbytes\n.\n\n\n\n\n\n\n\nnote\n\n\n\nPlease refer to the TrueType or OpenType specification for more details.\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_Get_Sfnt_LangTag\n\u00b6\n\n\nDefined in FT_SFNT_NAMES_H (freetype/ftsnames.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Sfnt_LangTag\n( \nFT_Face\n          face,\n                       \nFT_UInt\n          langID,\n                       \nFT_SfntLangTag\n  *alangTag );\n\n\n\n\n\n\nRetrieve the language tag associated with a language ID of an SFNT \u2018name\u2019 table entry.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the source face.\n\n\n\n\nlangID\n\n\nThe language ID, as returned by \nFT_Get_Sfnt_Name\n. This is always a value larger than 0x8000.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nalangTag\n\n\nThe language tag associated with the \u2018name\u2019 table entry's language ID.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe \u2018string\u2019 array returned in the \nalangTag\n structure is not null-terminated. Note that you don't have to deallocate \u2018string\u2019 by yourself; FreeType takes care of it if you call \nFT_Done_Face\n.\n\n\nOnly \u2018name\u2019 table format\u00a01 supports language tags. For format\u00a00 tables, this function always returns FT_Err_Invalid_Table. For invalid format\u00a01 language ID values, FT_Err_Invalid_Argument is returned.\n\n\nThis function always returns an error if the config macro \nTT_CONFIG_OPTION_SFNT_NAMES\n is not defined in \nftoption.h\n.\n\n\nsince\n\n\n\n2.8",
            "title": "SFNT Names"
        },
        {
            "location": "/ft2-sfnt_names/index.html#sfnt-names",
            "text": "",
            "title": "SFNT Names"
        },
        {
            "location": "/ft2-sfnt_names/index.html#synopsis",
            "text": "The TrueType and OpenType specifications allow the inclusion of a special names table (\u2018name\u2019) in font files. This table contains textual (and internationalized) information regarding the font, like family name, copyright, version, etc.  The definitions below are used to access them if available.  Note that this has nothing to do with glyph names!",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-sfnt_names/index.html#ft_sfntname",
            "text": "Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).   \n   typedef   struct   FT_SfntName_\n  {\n     FT_UShort   platform_id;\n     FT_UShort   encoding_id;\n     FT_UShort   language_id;\n     FT_UShort   name_id;\n\n     FT_Byte *   string;      /* this string is *not* null-terminated! */\n     FT_UInt     string_len;  /* in bytes                              */\n\n  }  FT_SfntName ;   A structure used to model an SFNT \u2018name\u2019 table entry.",
            "title": "FT_SfntName"
        },
        {
            "location": "/ft2-sfnt_names/index.html#ft_get_sfnt_name_count",
            "text": "Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).   \n  FT_EXPORT(  FT_UInt  )\n   FT_Get_Sfnt_Name_Count (  FT_Face   face );   Retrieve the number of name strings in the SFNT \u2018name\u2019 table.",
            "title": "FT_Get_Sfnt_Name_Count"
        },
        {
            "location": "/ft2-sfnt_names/index.html#ft_get_sfnt_name",
            "text": "Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Sfnt_Name (  FT_Face        face,\n                     FT_UInt        idx,\n                     FT_SfntName   *aname );   Retrieve a string of the SFNT \u2018name\u2019 table for a given index.",
            "title": "FT_Get_Sfnt_Name"
        },
        {
            "location": "/ft2-sfnt_names/index.html#ft_sfntlangtag",
            "text": "Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).   \n   typedef   struct   FT_SfntLangTag_\n  {\n     FT_Byte *  string;      /* this string is *not* null-terminated! */\n     FT_UInt    string_len;  /* in bytes                              */\n\n  }  FT_SfntLangTag ;   A structure to model a language tag entry from an SFNT \u2018name\u2019 table.",
            "title": "FT_SfntLangTag"
        },
        {
            "location": "/ft2-sfnt_names/index.html#ft_get_sfnt_langtag",
            "text": "Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Sfnt_LangTag (  FT_Face           face,\n                        FT_UInt           langID,\n                        FT_SfntLangTag   *alangTag );   Retrieve the language tag associated with a language ID of an SFNT \u2018name\u2019 table entry.",
            "title": "FT_Get_Sfnt_LangTag"
        },
        {
            "location": "/ft2-bdf_fonts/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb BDF and PCF Files\n\n\n\n\nBDF and PCF Files\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of functions specific to BDF and PCF fonts.\n\n\nBDF_PropertyType\n\u00b6\n\n\nDefined in FT_BDF_H (freetype/ftbdf.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  BDF_PropertyType_\n  {\n    \nBDF_PROPERTY_TYPE_NONE\n     = 0,\n    \nBDF_PROPERTY_TYPE_ATOM\n     = 1,\n    \nBDF_PROPERTY_TYPE_INTEGER\n  = 2,\n    \nBDF_PROPERTY_TYPE_CARDINAL\n = 3\n\n  } \nBDF_PropertyType\n;\n\n\n\n\n\n\nA list of BDF property types.\n\n\nvalues\n\n\n\n\n\nBDF_PROPERTY_TYPE_NONE\n\n\nValue\u00a00 is used to indicate a missing property.\n\n\n\n\nBDF_PROPERTY_TYPE_ATOM\n\n\nProperty is a string atom.\n\n\n\n\nBDF_PROPERTY_TYPE_INTEGER\n\n\nProperty is a 32-bit signed integer.\n\n\n\n\nBDF_PROPERTY_TYPE_CARDINAL\n\n\nProperty is a 32-bit unsigned integer.\n\n\n\n\n\n\n\n\n\n\nBDF_Property\n\u00b6\n\n\nDefined in FT_BDF_H (freetype/ftbdf.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n BDF_PropertyRec_*  \nBDF_Property\n;\n\n\n\n\n\n\nA handle to a \nBDF_PropertyRec\n structure to model a given BDF/PCF property.\n\n\n\n\n\nBDF_PropertyRec\n\u00b6\n\n\nDefined in FT_BDF_H (freetype/ftbdf.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  BDF_PropertyRec_\n  {\n    \nBDF_PropertyType\n  type;\n    \nunion\n {\n      \nconst\n \nchar\n*     atom;\n      \nFT_Int32\n        integer;\n      \nFT_UInt32\n       cardinal;\n\n    } u;\n\n  } \nBDF_PropertyRec\n;\n\n\n\n\n\n\nThis structure models a given BDF/PCF property.\n\n\nfields\n\n\n\n\n\ntype\n\n\nThe property type.\n\n\n\n\nu.atom\n\n\nThe atom string, if type is \nBDF_PROPERTY_TYPE_ATOM\n. May be NULL, indicating an empty string.\n\n\n\n\nu.integer\n\n\nA signed integer, if type is \nBDF_PROPERTY_TYPE_INTEGER\n.\n\n\n\n\nu.cardinal\n\n\nAn unsigned integer, if type is \nBDF_PROPERTY_TYPE_CARDINAL\n.\n\n\n\n\n\n\n\n\n\n\nFT_Get_BDF_Charset_ID\n\u00b6\n\n\nDefined in FT_BDF_H (freetype/ftbdf.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_BDF_Charset_ID\n( \nFT_Face\n       face,\n                         \nconst\n \nchar\n*  *acharset_encoding,\n                         \nconst\n \nchar\n*  *acharset_registry );\n\n\n\n\n\n\nRetrieve a BDF font character set identity, according to the BDF specification.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nacharset_encoding\n\n\nCharset encoding, as a C\u00a0string, owned by the face.\n\n\n\n\nacharset_registry\n\n\nCharset registry, as a C\u00a0string, owned by the face.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with BDF faces, returning an error otherwise.\n\n\n\n\n\nFT_Get_BDF_Property\n\u00b6\n\n\nDefined in FT_BDF_H (freetype/ftbdf.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_BDF_Property\n( \nFT_Face\n           face,\n                       \nconst\n \nchar\n*       prop_name,\n                       \nBDF_PropertyRec\n  *aproperty );\n\n\n\n\n\n\nRetrieve a BDF property from a BDF or PCF font file.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\nname\n\n\nThe property name.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naproperty\n\n\nThe property.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function works with BDF \nand\n PCF fonts. It returns an error otherwise. It also returns an error if the property is not in the font.\n\n\nA \u2018property\u2019 is a either key-value pair within the STARTPROPERTIES ... ENDPROPERTIES block of a BDF font or a key-value pair from the \ninfo->props\n array within a \u2018FontRec\u2019 structure of a PCF font.\n\n\nInteger properties are always stored as \u2018signed\u2019 within PCF fonts; consequently, \nBDF_PROPERTY_TYPE_CARDINAL\n is a possible return value for BDF fonts only.\n\n\nIn case of error, \naproperty->type\n is always set to \nBDF_PROPERTY_TYPE_NONE\n.",
            "title": "BDF and PCF Files"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#bdf-and-pcf-files",
            "text": "",
            "title": "BDF and PCF Files"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#synopsis",
            "text": "This section contains the declaration of functions specific to BDF and PCF fonts.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#bdf_propertytype",
            "text": "Defined in FT_BDF_H (freetype/ftbdf.h).   \n   typedef   enum   BDF_PropertyType_\n  {\n     BDF_PROPERTY_TYPE_NONE      = 0,\n     BDF_PROPERTY_TYPE_ATOM      = 1,\n     BDF_PROPERTY_TYPE_INTEGER   = 2,\n     BDF_PROPERTY_TYPE_CARDINAL  = 3\n\n  }  BDF_PropertyType ;   A list of BDF property types.",
            "title": "BDF_PropertyType"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#bdf_property",
            "text": "Defined in FT_BDF_H (freetype/ftbdf.h).   \n   typedef   struct  BDF_PropertyRec_*   BDF_Property ;   A handle to a  BDF_PropertyRec  structure to model a given BDF/PCF property.",
            "title": "BDF_Property"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#bdf_propertyrec",
            "text": "Defined in FT_BDF_H (freetype/ftbdf.h).   \n   typedef   struct   BDF_PropertyRec_\n  {\n     BDF_PropertyType   type;\n     union  {\n       const   char *     atom;\n       FT_Int32         integer;\n       FT_UInt32        cardinal;\n\n    } u;\n\n  }  BDF_PropertyRec ;   This structure models a given BDF/PCF property.",
            "title": "BDF_PropertyRec"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#ft_get_bdf_charset_id",
            "text": "Defined in FT_BDF_H (freetype/ftbdf.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_BDF_Charset_ID (  FT_Face        face,\n                          const   char *  *acharset_encoding,\n                          const   char *  *acharset_registry );   Retrieve a BDF font character set identity, according to the BDF specification.",
            "title": "FT_Get_BDF_Charset_ID"
        },
        {
            "location": "/ft2-bdf_fonts/index.html#ft_get_bdf_property",
            "text": "Defined in FT_BDF_H (freetype/ftbdf.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_BDF_Property (  FT_Face            face,\n                        const   char *       prop_name,\n                        BDF_PropertyRec   *aproperty );   Retrieve a BDF property from a BDF or PCF font file.",
            "title": "FT_Get_BDF_Property"
        },
        {
            "location": "/ft2-cid_fonts/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb CID Fonts\n\n\n\n\nCID Fonts\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of CID-keyed font-specific functions.\n\n\nFT_Get_CID_Registry_Ordering_Supplement\n\u00b6\n\n\nDefined in FT_CID_H (freetype/ftcid.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_CID_Registry_Ordering_Supplement\n( \nFT_Face\n       face,\n                                           \nconst\n \nchar\n*  *registry,\n                                           \nconst\n \nchar\n*  *ordering,\n                                           \nFT_Int\n       *supplement );\n\n\n\n\n\n\nRetrieve the Registry/Ordering/Supplement triple (also known as the \"R/O/S\") from a CID-keyed font.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nregistry\n\n\nThe registry, as a C\u00a0string, owned by the face.\n\n\n\n\nordering\n\n\nThe ordering, as a C\u00a0string, owned by the face.\n\n\n\n\nsupplement\n\n\nThe supplement.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with CID faces, returning an error otherwise.\n\n\nsince\n\n\n\n2.3.6\n\n\n\n\n\nFT_Get_CID_Is_Internally_CID_Keyed\n\u00b6\n\n\nDefined in FT_CID_H (freetype/ftcid.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_CID_Is_Internally_CID_Keyed\n( \nFT_Face\n   face,\n                                      \nFT_Bool\n  *is_cid );\n\n\n\n\n\n\nRetrieve the type of the input face, CID keyed or not. In contrast to the \nFT_IS_CID_KEYED\n macro this function returns successfully also for CID-keyed fonts in an SFNT wrapper.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nis_cid\n\n\nThe type of the face as an \nFT_Bool\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with CID faces and OpenType fonts, returning an error otherwise.\n\n\nsince\n\n\n\n2.3.9\n\n\n\n\n\nFT_Get_CID_From_Glyph_Index\n\u00b6\n\n\nDefined in FT_CID_H (freetype/ftcid.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_CID_From_Glyph_Index\n( \nFT_Face\n   face,\n                               \nFT_UInt\n   glyph_index,\n                               \nFT_UInt\n  *cid );\n\n\n\n\n\n\nRetrieve the CID of the input glyph index.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\nglyph_index\n\n\nThe input glyph index.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ncid\n\n\nThe CID as an \nFT_UInt\n.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with CID faces and OpenType fonts, returning an error otherwise.\n\n\nsince\n\n\n\n2.3.9",
            "title": "CID Fonts"
        },
        {
            "location": "/ft2-cid_fonts/index.html#cid-fonts",
            "text": "",
            "title": "CID Fonts"
        },
        {
            "location": "/ft2-cid_fonts/index.html#synopsis",
            "text": "This section contains the declaration of CID-keyed font-specific functions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-cid_fonts/index.html#ft_get_cid_registry_ordering_supplement",
            "text": "Defined in FT_CID_H (freetype/ftcid.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_CID_Registry_Ordering_Supplement (  FT_Face        face,\n                                            const   char *  *registry,\n                                            const   char *  *ordering,\n                                            FT_Int        *supplement );   Retrieve the Registry/Ordering/Supplement triple (also known as the \"R/O/S\") from a CID-keyed font.",
            "title": "FT_Get_CID_Registry_Ordering_Supplement"
        },
        {
            "location": "/ft2-cid_fonts/index.html#ft_get_cid_is_internally_cid_keyed",
            "text": "Defined in FT_CID_H (freetype/ftcid.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_CID_Is_Internally_CID_Keyed (  FT_Face    face,\n                                       FT_Bool   *is_cid );   Retrieve the type of the input face, CID keyed or not. In contrast to the  FT_IS_CID_KEYED  macro this function returns successfully also for CID-keyed fonts in an SFNT wrapper.",
            "title": "FT_Get_CID_Is_Internally_CID_Keyed"
        },
        {
            "location": "/ft2-cid_fonts/index.html#ft_get_cid_from_glyph_index",
            "text": "Defined in FT_CID_H (freetype/ftcid.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_CID_From_Glyph_Index (  FT_Face    face,\n                                FT_UInt    glyph_index,\n                                FT_UInt   *cid );   Retrieve the CID of the input glyph index.",
            "title": "FT_Get_CID_From_Glyph_Index"
        },
        {
            "location": "/ft2-pfr_fonts/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb PFR Fonts\n\n\n\n\nPFR Fonts\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of PFR-specific functions.\n\n\nFT_Get_PFR_Metrics\n\u00b6\n\n\nDefined in FT_PFR_H (freetype/ftpfr.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_PFR_Metrics\n( \nFT_Face\n    face,\n                      \nFT_UInt\n   *aoutline_resolution,\n                      \nFT_UInt\n   *ametrics_resolution,\n                      \nFT_Fixed\n  *ametrics_x_scale,\n                      \nFT_Fixed\n  *ametrics_y_scale );\n\n\n\n\n\n\nReturn the outline and metrics resolutions of a given PFR face.\n\n\ninput\n\n\n\n\n\nface\n\n\nHandle to the input face. It can be a non-PFR face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naoutline_resolution\n\n\nOutline resolution. This is equivalent to \nface->units_per_EM\n for non-PFR fonts. Optional (parameter can be NULL).\n\n\n\n\nametrics_resolution\n\n\nMetrics resolution. This is equivalent to \noutline_resolution\n for non-PFR fonts. Optional (parameter can be NULL).\n\n\n\n\nametrics_x_scale\n\n\nA 16.16 fixed-point number used to scale distance expressed in metrics units to device subpixels. This is equivalent to \nface->size->x_scale\n, but for metrics only. Optional (parameter can be NULL).\n\n\n\n\nametrics_y_scale\n\n\nSame as \nametrics_x_scale\n but for the vertical direction. optional (parameter can be NULL).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf the input face is not a PFR, this function will return an error. However, in all cases, it will return valid values.\n\n\n\n\n\nFT_Get_PFR_Kerning\n\u00b6\n\n\nDefined in FT_PFR_H (freetype/ftpfr.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_PFR_Kerning\n( \nFT_Face\n     face,\n                      \nFT_UInt\n     left,\n                      \nFT_UInt\n     right,\n                      \nFT_Vector\n  *avector );\n\n\n\n\n\n\nReturn the kerning pair corresponding to two glyphs in a PFR face. The distance is expressed in metrics units, unlike the result of \nFT_Get_Kerning\n.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\nleft\n\n\nIndex of the left glyph.\n\n\n\n\nright\n\n\nIndex of the right glyph.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\navector\n\n\nA kerning vector.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function always return distances in original PFR metrics units. This is unlike \nFT_Get_Kerning\n with the \nFT_KERNING_UNSCALED\n mode, which always returns distances converted to outline units.\n\n\nYou can use the value of the \nx_scale\n and \ny_scale\n parameters returned by \nFT_Get_PFR_Metrics\n to scale these to device subpixels.\n\n\n\n\n\nFT_Get_PFR_Advance\n\u00b6\n\n\nDefined in FT_PFR_H (freetype/ftpfr.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_PFR_Advance\n( \nFT_Face\n   face,\n                      \nFT_UInt\n   gindex,\n                      \nFT_Pos\n   *aadvance );\n\n\n\n\n\n\nReturn a given glyph advance, expressed in original metrics units, from a PFR font.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\ngindex\n\n\nThe glyph index.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naadvance\n\n\nThe glyph advance in metrics units.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou can use the \nx_scale\n or \ny_scale\n results of \nFT_Get_PFR_Metrics\n to convert the advance to device subpixels (i.e., 1/64\nth\n of pixels).",
            "title": "PFR Fonts"
        },
        {
            "location": "/ft2-pfr_fonts/index.html#pfr-fonts",
            "text": "",
            "title": "PFR Fonts"
        },
        {
            "location": "/ft2-pfr_fonts/index.html#synopsis",
            "text": "This section contains the declaration of PFR-specific functions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-pfr_fonts/index.html#ft_get_pfr_metrics",
            "text": "Defined in FT_PFR_H (freetype/ftpfr.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_PFR_Metrics (  FT_Face     face,\n                       FT_UInt    *aoutline_resolution,\n                       FT_UInt    *ametrics_resolution,\n                       FT_Fixed   *ametrics_x_scale,\n                       FT_Fixed   *ametrics_y_scale );   Return the outline and metrics resolutions of a given PFR face.",
            "title": "FT_Get_PFR_Metrics"
        },
        {
            "location": "/ft2-pfr_fonts/index.html#ft_get_pfr_kerning",
            "text": "Defined in FT_PFR_H (freetype/ftpfr.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_PFR_Kerning (  FT_Face      face,\n                       FT_UInt      left,\n                       FT_UInt      right,\n                       FT_Vector   *avector );   Return the kerning pair corresponding to two glyphs in a PFR face. The distance is expressed in metrics units, unlike the result of  FT_Get_Kerning .",
            "title": "FT_Get_PFR_Kerning"
        },
        {
            "location": "/ft2-pfr_fonts/index.html#ft_get_pfr_advance",
            "text": "Defined in FT_PFR_H (freetype/ftpfr.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_PFR_Advance (  FT_Face    face,\n                       FT_UInt    gindex,\n                       FT_Pos    *aadvance );   Return a given glyph advance, expressed in original metrics units, from a PFR font.",
            "title": "FT_Get_PFR_Advance"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb Window FNT Files\n\n\n\n\nWindow FNT Files\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of Windows FNT-specific functions.\n\n\nFT_WinFNT_ID_XXX\n\u00b6\n\n\nDefined in FT_WINFONTS_H (freetype/ftwinfnt.h).\n\n\n\n\n\n#\ndefine\n \nFT_WinFNT_ID_CP1252\n    0\n#\ndefine\n \nFT_WinFNT_ID_DEFAULT\n   1\n#\ndefine\n \nFT_WinFNT_ID_SYMBOL\n    2\n#\ndefine\n \nFT_WinFNT_ID_MAC\n      77\n#\ndefine\n \nFT_WinFNT_ID_CP932\n   128\n#\ndefine\n \nFT_WinFNT_ID_CP949\n   129\n#\ndefine\n \nFT_WinFNT_ID_CP1361\n  130\n#\ndefine\n \nFT_WinFNT_ID_CP936\n   134\n#\ndefine\n \nFT_WinFNT_ID_CP950\n   136\n#\ndefine\n \nFT_WinFNT_ID_CP1253\n  161\n#\ndefine\n \nFT_WinFNT_ID_CP1254\n  162\n#\ndefine\n \nFT_WinFNT_ID_CP1258\n  163\n#\ndefine\n \nFT_WinFNT_ID_CP1255\n  177\n#\ndefine\n \nFT_WinFNT_ID_CP1256\n  178\n#\ndefine\n \nFT_WinFNT_ID_CP1257\n  186\n#\ndefine\n \nFT_WinFNT_ID_CP1251\n  204\n#\ndefine\n \nFT_WinFNT_ID_CP874\n   222\n#\ndefine\n \nFT_WinFNT_ID_CP1250\n  238\n#\ndefine\n \nFT_WinFNT_ID_OEM\n     255\n\n\n\n\n\n\nA list of valid values for the \u2018charset\u2019 byte in \nFT_WinFNT_HeaderRec\n. Exact mapping tables for the various cpXXXX encodings (except for cp1361) can be found at \nftp://ftp.unicode.org/Public\n in the MAPPINGS/VENDORS/MICSFT/WINDOWS subdirectory. cp1361 is roughly a superset of MAPPINGS/OBSOLETE/EASTASIA/KSC/JOHAB.TXT.\n\n\nvalues\n\n\n\n\n\nFT_WinFNT_ID_DEFAULT\n\n\nThis is used for font enumeration and font creation as a \u2018don't care\u2019 value. Valid font files don't contain this value. When querying for information about the character set of the font that is currently selected into a specified device context, this return value (of the related Windows API) simply denotes failure.\n\n\n\n\nFT_WinFNT_ID_SYMBOL\n\n\nThere is no known mapping table available.\n\n\n\n\nFT_WinFNT_ID_MAC\n\n\nMac Roman encoding.\n\n\n\n\nFT_WinFNT_ID_OEM\n\n\nFrom Michael Poettgen <michael@poettgen.de>:\nThe \u2018Windows Font Mapping\u2019 article says that FT_WinFNT_ID_OEM is used for the charset of vector fonts, like \nmodern.fon\n, \nroman.fon\n, and \nscript.fon\n on Windows.\nThe \u2018CreateFont\u2019 documentation says: The FT_WinFNT_ID_OEM value specifies a character set that is operating-system dependent.\nThe \u2018IFIMETRICS\u2019 documentation from the \u2018Windows Driver Development Kit\u2019 says: This font supports an OEM-specific character set. The OEM character set is system dependent.\nIn general OEM, as opposed to ANSI (i.e., cp1252), denotes the second default codepage that most international versions of Windows have. It is one of the OEM codepages from\n\nhttps://msdn.microsoft.com/en-us/goglobal/bb964655\n,\nand is used for the \u2018DOS boxes\u2019, to support legacy applications. A German Windows version for example usually uses ANSI codepage 1252 and OEM codepage 850.\n\n\n\n\nFT_WinFNT_ID_CP874\n\n\nA superset of Thai TIS 620 and ISO 8859-11.\n\n\n\n\nFT_WinFNT_ID_CP932\n\n\nA superset of Japanese Shift-JIS (with minor deviations).\n\n\n\n\nFT_WinFNT_ID_CP936\n\n\nA superset of simplified Chinese GB 2312-1980 (with different ordering and minor deviations).\n\n\n\n\nFT_WinFNT_ID_CP949\n\n\nA superset of Korean Hangul KS\u00a0C 5601-1987 (with different ordering and minor deviations).\n\n\n\n\nFT_WinFNT_ID_CP950\n\n\nA superset of traditional Chinese Big\u00a05 ETen (with different ordering and minor deviations).\n\n\n\n\nFT_WinFNT_ID_CP1250\n\n\nA superset of East European ISO 8859-2 (with slightly different ordering).\n\n\n\n\nFT_WinFNT_ID_CP1251\n\n\nA superset of Russian ISO 8859-5 (with different ordering).\n\n\n\n\nFT_WinFNT_ID_CP1252\n\n\nANSI encoding. A superset of ISO 8859-1.\n\n\n\n\nFT_WinFNT_ID_CP1253\n\n\nA superset of Greek ISO 8859-7 (with minor modifications).\n\n\n\n\nFT_WinFNT_ID_CP1254\n\n\nA superset of Turkish ISO 8859-9.\n\n\n\n\nFT_WinFNT_ID_CP1255\n\n\nA superset of Hebrew ISO 8859-8 (with some modifications).\n\n\n\n\nFT_WinFNT_ID_CP1256\n\n\nA superset of Arabic ISO 8859-6 (with different ordering).\n\n\n\n\nFT_WinFNT_ID_CP1257\n\n\nA superset of Baltic ISO 8859-13 (with some deviations).\n\n\n\n\nFT_WinFNT_ID_CP1258\n\n\nFor Vietnamese. This encoding doesn't cover all necessary characters.\n\n\n\n\nFT_WinFNT_ID_CP1361\n\n\nKorean (Johab).\n\n\n\n\n\n\n\n\n\n\nFT_WinFNT_HeaderRec\n\u00b6\n\n\nDefined in FT_WINFONTS_H (freetype/ftwinfnt.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_WinFNT_HeaderRec_\n  {\n    \nFT_UShort\n  version;\n    \nFT_ULong\n   file_size;\n    \nFT_Byte\n    copyright[60];\n    \nFT_UShort\n  file_type;\n    \nFT_UShort\n  nominal_point_size;\n    \nFT_UShort\n  vertical_resolution;\n    \nFT_UShort\n  horizontal_resolution;\n    \nFT_UShort\n  ascent;\n    \nFT_UShort\n  internal_leading;\n    \nFT_UShort\n  external_leading;\n    \nFT_Byte\n    italic;\n    \nFT_Byte\n    underline;\n    \nFT_Byte\n    strike_out;\n    \nFT_UShort\n  weight;\n    \nFT_Byte\n    charset;\n    \nFT_UShort\n  pixel_width;\n    \nFT_UShort\n  pixel_height;\n    \nFT_Byte\n    pitch_and_family;\n    \nFT_UShort\n  avg_width;\n    \nFT_UShort\n  max_width;\n    \nFT_Byte\n    first_char;\n    \nFT_Byte\n    last_char;\n    \nFT_Byte\n    default_char;\n    \nFT_Byte\n    break_char;\n    \nFT_UShort\n  bytes_per_row;\n    \nFT_ULong\n   device_offset;\n    \nFT_ULong\n   face_name_offset;\n    \nFT_ULong\n   bits_pointer;\n    \nFT_ULong\n   bits_offset;\n    \nFT_Byte\n    reserved;\n    \nFT_ULong\n   flags;\n    \nFT_UShort\n  A_space;\n    \nFT_UShort\n  B_space;\n    \nFT_UShort\n  C_space;\n    \nFT_UShort\n  color_table_offset;\n    \nFT_ULong\n   reserved1[4];\n\n  } \nFT_WinFNT_HeaderRec\n;\n\n\n\n\n\n\nWindows FNT Header info.\n\n\n\n\n\nFT_WinFNT_Header\n\u00b6\n\n\nDefined in FT_WINFONTS_H (freetype/ftwinfnt.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_WinFNT_HeaderRec_*  \nFT_WinFNT_Header\n;\n\n\n\n\n\n\nA handle to an \nFT_WinFNT_HeaderRec\n structure.\n\n\n\n\n\nFT_Get_WinFNT_Header\n\u00b6\n\n\nDefined in FT_WINFONTS_H (freetype/ftwinfnt.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_WinFNT_Header\n( \nFT_Face\n               face,\n                        \nFT_WinFNT_HeaderRec\n  *aheader );\n\n\n\n\n\n\nRetrieve a Windows FNT font info header.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naheader\n\n\nThe WinFNT header.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with Windows FNT faces, returning an error otherwise.",
            "title": "Window FNT Files"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html#window-fnt-files",
            "text": "",
            "title": "Window FNT Files"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html#synopsis",
            "text": "This section contains the declaration of Windows FNT-specific functions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html#ft_winfnt_id_xxx",
            "text": "Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).   \n# define   FT_WinFNT_ID_CP1252     0\n# define   FT_WinFNT_ID_DEFAULT    1\n# define   FT_WinFNT_ID_SYMBOL     2\n# define   FT_WinFNT_ID_MAC       77\n# define   FT_WinFNT_ID_CP932    128\n# define   FT_WinFNT_ID_CP949    129\n# define   FT_WinFNT_ID_CP1361   130\n# define   FT_WinFNT_ID_CP936    134\n# define   FT_WinFNT_ID_CP950    136\n# define   FT_WinFNT_ID_CP1253   161\n# define   FT_WinFNT_ID_CP1254   162\n# define   FT_WinFNT_ID_CP1258   163\n# define   FT_WinFNT_ID_CP1255   177\n# define   FT_WinFNT_ID_CP1256   178\n# define   FT_WinFNT_ID_CP1257   186\n# define   FT_WinFNT_ID_CP1251   204\n# define   FT_WinFNT_ID_CP874    222\n# define   FT_WinFNT_ID_CP1250   238\n# define   FT_WinFNT_ID_OEM      255   A list of valid values for the \u2018charset\u2019 byte in  FT_WinFNT_HeaderRec . Exact mapping tables for the various cpXXXX encodings (except for cp1361) can be found at  ftp://ftp.unicode.org/Public  in the MAPPINGS/VENDORS/MICSFT/WINDOWS subdirectory. cp1361 is roughly a superset of MAPPINGS/OBSOLETE/EASTASIA/KSC/JOHAB.TXT.",
            "title": "FT_WinFNT_ID_XXX"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html#ft_winfnt_headerrec",
            "text": "Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).   \n   typedef   struct   FT_WinFNT_HeaderRec_\n  {\n     FT_UShort   version;\n     FT_ULong    file_size;\n     FT_Byte     copyright[60];\n     FT_UShort   file_type;\n     FT_UShort   nominal_point_size;\n     FT_UShort   vertical_resolution;\n     FT_UShort   horizontal_resolution;\n     FT_UShort   ascent;\n     FT_UShort   internal_leading;\n     FT_UShort   external_leading;\n     FT_Byte     italic;\n     FT_Byte     underline;\n     FT_Byte     strike_out;\n     FT_UShort   weight;\n     FT_Byte     charset;\n     FT_UShort   pixel_width;\n     FT_UShort   pixel_height;\n     FT_Byte     pitch_and_family;\n     FT_UShort   avg_width;\n     FT_UShort   max_width;\n     FT_Byte     first_char;\n     FT_Byte     last_char;\n     FT_Byte     default_char;\n     FT_Byte     break_char;\n     FT_UShort   bytes_per_row;\n     FT_ULong    device_offset;\n     FT_ULong    face_name_offset;\n     FT_ULong    bits_pointer;\n     FT_ULong    bits_offset;\n     FT_Byte     reserved;\n     FT_ULong    flags;\n     FT_UShort   A_space;\n     FT_UShort   B_space;\n     FT_UShort   C_space;\n     FT_UShort   color_table_offset;\n     FT_ULong    reserved1[4];\n\n  }  FT_WinFNT_HeaderRec ;   Windows FNT Header info.",
            "title": "FT_WinFNT_HeaderRec"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html#ft_winfnt_header",
            "text": "Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).   \n   typedef   struct  FT_WinFNT_HeaderRec_*   FT_WinFNT_Header ;   A handle to an  FT_WinFNT_HeaderRec  structure.",
            "title": "FT_WinFNT_Header"
        },
        {
            "location": "/ft2-winfnt_fonts/index.html#ft_get_winfnt_header",
            "text": "Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_WinFNT_Header (  FT_Face                face,\n                         FT_WinFNT_HeaderRec   *aheader );   Retrieve a Windows FNT font info header.",
            "title": "FT_Get_WinFNT_Header"
        },
        {
            "location": "/ft2-font_formats/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb Font Formats\n\n\n\n\nFont Formats\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe single function in this section can be used to get the font format. Note that this information is not needed normally; however, there are special cases (like in PDF devices) where it is important to differentiate, in spite of FreeType's uniform API.\n\n\nFT_Get_Font_Format\n\u00b6\n\n\nDefined in FT_FONT_FORMATS_H (freetype/ftfntfmt.h).\n\n\n\n\n\n  FT_EXPORT( \nconst\n \nchar\n* )\n  \nFT_Get_Font_Format\n( \nFT_Face\n  face );\n\n  /* deprecated */\n  FT_EXPORT( \nconst\n \nchar\n* )\n  FT_Get_X11_Font_Format( \nFT_Face\n  face );\n\n\n\n\n\n\nReturn a string describing the format of a given face. Possible values are \u2018TrueType\u2019, \u2018Type\u00a01\u2019, \u2018BDF\u2019, \u2018PCF\u2019, \u2018Type\u00a042\u2019, \u2018CID\u00a0Type\u00a01\u2019, \u2018CFF\u2019, \u2018PFR\u2019, and \u2018Windows\u00a0FNT\u2019.\n\n\nThe return value is suitable to be used as an X11 FONT_PROPERTY.\n\n\ninput\n\n\n\n\n\nface\n\n\nInput face handle.\n\n\n\n\n\n\n\nreturn\n\n\n\nFont format string. NULL in case of error.\n\n\nnote\n\n\n\nA deprecated name for the same function is \nFT_Get_X11_Font_Format\n.",
            "title": "Font Formats"
        },
        {
            "location": "/ft2-font_formats/index.html#font-formats",
            "text": "",
            "title": "Font Formats"
        },
        {
            "location": "/ft2-font_formats/index.html#synopsis",
            "text": "The single function in this section can be used to get the font format. Note that this information is not needed normally; however, there are special cases (like in PDF devices) where it is important to differentiate, in spite of FreeType's uniform API.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-font_formats/index.html#ft_get_font_format",
            "text": "Defined in FT_FONT_FORMATS_H (freetype/ftfntfmt.h).   \n  FT_EXPORT(  const   char * )\n   FT_Get_Font_Format (  FT_Face   face );\n\n  /* deprecated */\n  FT_EXPORT(  const   char * )\n  FT_Get_X11_Font_Format(  FT_Face   face );   Return a string describing the format of a given face. Possible values are \u2018TrueType\u2019, \u2018Type\u00a01\u2019, \u2018BDF\u2019, \u2018PCF\u2019, \u2018Type\u00a042\u2019, \u2018CID\u00a0Type\u00a01\u2019, \u2018CFF\u2019, \u2018PFR\u2019, and \u2018Windows\u00a0FNT\u2019.  The return value is suitable to be used as an X11 FONT_PROPERTY.",
            "title": "FT_Get_Font_Format"
        },
        {
            "location": "/ft2-gasp_table/index.html",
            "text": "Docs\n \u00bb \nFormat-Specific API\n \u00bb Gasp Table\n\n\n\n\nGasp Table\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe function \nFT_Get_Gasp\n can be used to query a TrueType or OpenType font for specific entries in its \u2018gasp\u2019 table, if any. This is mainly useful when implementing native TrueType hinting with the bytecode interpreter to duplicate the Windows text rendering results.\n\n\nFT_GASP_XXX\n\u00b6\n\n\nDefined in FT_GASP_H (freetype/ftgasp.h).\n\n\n\n\n\n#\ndefine\n \nFT_GASP_NO_TABLE\n               -1\n#\ndefine\n \nFT_GASP_DO_GRIDFIT\n           0x01\n#\ndefine\n \nFT_GASP_DO_GRAY\n              0x02\n#\ndefine\n \nFT_GASP_SYMMETRIC_GRIDFIT\n    0x04\n#\ndefine\n \nFT_GASP_SYMMETRIC_SMOOTHING\n  0x08\n\n\n\n\n\n\nA list of values and/or bit-flags returned by the \nFT_Get_Gasp\n function.\n\n\nvalues\n\n\n\n\n\nFT_GASP_NO_TABLE\n\n\nThis special value means that there is no GASP table in this face. It is up to the client to decide what to do.\n\n\n\n\nFT_GASP_DO_GRIDFIT\n\n\nGrid-fitting and hinting should be performed at the specified ppem. This \nreally\n means TrueType bytecode interpretation. If this bit is not set, no hinting gets applied.\n\n\n\n\nFT_GASP_DO_GRAY\n\n\nAnti-aliased rendering should be performed at the specified ppem. If not set, do monochrome rendering.\n\n\n\n\nFT_GASP_SYMMETRIC_SMOOTHING\n\n\nIf set, smoothing along multiple axes must be used with ClearType.\n\n\n\n\nFT_GASP_SYMMETRIC_GRIDFIT\n\n\nGrid-fitting must be used with ClearType's symmetric smoothing.\n\n\n\n\n\n\n\nnote\n\n\n\nThe bit-flags \nFT_GASP_DO_GRIDFIT\n and \nFT_GASP_DO_GRAY\n are to be used for standard font rasterization only. Independently of that, \nFT_GASP_SYMMETRIC_SMOOTHING\n and \nFT_GASP_SYMMETRIC_GRIDFIT\n are to be used if ClearType is enabled (and \nFT_GASP_DO_GRIDFIT\n and \nFT_GASP_DO_GRAY\n are consequently ignored).\n\n\n\u2018ClearType\u2019 is Microsoft's implementation of LCD rendering, partly protected by patents.\n\n\nsince\n\n\n\n2.3.0\n\n\n\n\n\nFT_Get_Gasp\n\u00b6\n\n\nDefined in FT_GASP_H (freetype/ftgasp.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Int\n )\n  \nFT_Get_Gasp\n( \nFT_Face\n  face,\n               \nFT_UInt\n  ppem );\n\n\n\n\n\n\nFor a TrueType or OpenType font file, return the rasterizer behaviour flags from the font's \u2018gasp\u2019 table corresponding to a given character pixel size.\n\n\ninput\n\n\n\n\n\nface\n\n\nThe source face handle.\n\n\n\n\nppem\n\n\nThe vertical character pixel size.\n\n\n\n\n\n\n\nreturn\n\n\n\nBit flags (see \nFT_GASP_XXX\n), or \nFT_GASP_NO_TABLE\n if there is no \u2018gasp\u2019 table in the face.\n\n\nnote\n\n\n\nIf you want to use the MM functionality of OpenType variation fonts (i.e., using \nFT_Set_Var_Design_Coordinates\n and friends), call this function \nafter\n setting an instance since the return values can change.\n\n\nsince\n\n\n\n2.3.0",
            "title": "Gasp Table"
        },
        {
            "location": "/ft2-gasp_table/index.html#gasp-table",
            "text": "",
            "title": "Gasp Table"
        },
        {
            "location": "/ft2-gasp_table/index.html#synopsis",
            "text": "The function  FT_Get_Gasp  can be used to query a TrueType or OpenType font for specific entries in its \u2018gasp\u2019 table, if any. This is mainly useful when implementing native TrueType hinting with the bytecode interpreter to duplicate the Windows text rendering results.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-gasp_table/index.html#ft_gasp_xxx",
            "text": "Defined in FT_GASP_H (freetype/ftgasp.h).   \n# define   FT_GASP_NO_TABLE                -1\n# define   FT_GASP_DO_GRIDFIT            0x01\n# define   FT_GASP_DO_GRAY               0x02\n# define   FT_GASP_SYMMETRIC_GRIDFIT     0x04\n# define   FT_GASP_SYMMETRIC_SMOOTHING   0x08   A list of values and/or bit-flags returned by the  FT_Get_Gasp  function.",
            "title": "FT_GASP_XXX"
        },
        {
            "location": "/ft2-gasp_table/index.html#ft_get_gasp",
            "text": "Defined in FT_GASP_H (freetype/ftgasp.h).   \n  FT_EXPORT(  FT_Int  )\n   FT_Get_Gasp (  FT_Face   face,\n                FT_UInt   ppem );   For a TrueType or OpenType font file, return the rasterizer behaviour flags from the font's \u2018gasp\u2019 table corresponding to a given character pixel size.",
            "title": "FT_Get_Gasp"
        },
        {
            "location": "/ft2-auto_hinter/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb The auto-hinter\n\n\n\n\nThe auto-hinter\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nWhile FreeType's auto-hinter doesn't expose API functions by itself, it is possible to control its behaviour with \nFT_Property_Set\n and \nFT_Property_Get\n. The following lists the available properties together with the necessary macros and structures.\n\n\nNote that the auto-hinter's module name is \u2018autofitter\u2019 for historical reasons.\n\n\nAvailable properties are \nincrease-x-height\n, \nno-stem-darkening\n (experimental), \ndarkening-parameters\n (experimental), \nwarping\n (experimental), \nglyph-to-script-map\n (experimental), \nfallback-script\n (experimental), and \ndefault-script\n (experimental), as documented in the \u2018\nDriver properties\n\u2019 section.",
            "title": "The auto-hinter"
        },
        {
            "location": "/ft2-auto_hinter/index.html#the-auto-hinter",
            "text": "",
            "title": "The auto-hinter"
        },
        {
            "location": "/ft2-auto_hinter/index.html#synopsis",
            "text": "While FreeType's auto-hinter doesn't expose API functions by itself, it is possible to control its behaviour with  FT_Property_Set  and  FT_Property_Get . The following lists the available properties together with the necessary macros and structures.  Note that the auto-hinter's module name is \u2018autofitter\u2019 for historical reasons.  Available properties are  increase-x-height ,  no-stem-darkening  (experimental),  darkening-parameters  (experimental),  warping  (experimental),  glyph-to-script-map  (experimental),  fallback-script  (experimental), and  default-script  (experimental), as documented in the \u2018 Driver properties \u2019 section.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-cff_driver/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb The CFF driver\n\n\n\n\nThe CFF driver\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nWhile FreeType's CFF driver doesn't expose API functions by itself, it is possible to control its behaviour with \nFT_Property_Set\n and \nFT_Property_Get\n.\n\n\nThe CFF driver's module name is \u2018cff\u2019.\n\n\nAvailable properties are \nhinting-engine\n, \nno-stem-darkening\n, \ndarkening-parameters\n, and \nrandom-seed\n, as documented in the \u2018\nDriver properties\n\u2019 section.\n\n\nHinting and antialiasing principles of the new engine\n\n\nThe rasterizer is positioning horizontal features (e.g., ascender height & x-height, or crossbars) on the pixel grid and minimizing the amount of antialiasing applied to them, while placing vertical features (vertical stems) on the pixel grid without hinting, thus representing the stem position and weight accurately. Sometimes the vertical stems may be only partially black. In this context, \u2018antialiasing\u2019 means that stems are not positioned exactly on pixel borders, causing a fuzzy appearance.\n\n\nThere are two principles behind this approach.\n\n\n1) No hinting in the horizontal direction: Unlike \u2018superhinted\u2019 TrueType, which changes glyph widths to accommodate regular inter-glyph spacing, Adobe's approach is \u2018faithful to the design\u2019 in representing both the glyph width and the inter-glyph spacing designed for the font. This makes the screen display as close as it can be to the result one would get with infinite resolution, while preserving what is considered the key characteristics of each glyph. Note that the distances between unhinted and grid-fitted positions at small sizes are comparable to kerning values and thus would be noticeable (and distracting) while reading if hinting were applied.\n\n\nOne of the reasons to not hint horizontally is antialiasing for LCD screens: The pixel geometry of modern displays supplies three vertical subpixels as the eye moves horizontally across each visible pixel. On devices where we can be certain this characteristic is present a rasterizer can take advantage of the subpixels to add increments of weight. In Western writing systems this turns out to be the more critical direction anyway; the weights and spacing of vertical stems (see above) are central to Armenian, Cyrillic, Greek, and Latin type designs. Even when the rasterizer uses greyscale antialiasing instead of color (a necessary compromise when one doesn't know the screen characteristics), the unhinted vertical features preserve the design's weight and spacing much better than aliased type would.\n\n\n2) Alignment in the vertical direction: Weights and spacing along the y\u00a0axis are less critical; what is much more important is the visual alignment of related features (like cap-height and x-height). The sense of alignment for these is enhanced by the sharpness of grid-fit edges, while the cruder vertical resolution (full pixels instead of \u2153 pixels) is less of a problem.\n\n\nOn the technical side, horizontal alignment zones for ascender, x-height, and other important height values (traditionally called \u2018blue zones\u2019) as defined in the font are positioned independently, each being rounded to the nearest pixel edge, taking care of overshoot suppression at small sizes, stem darkening, and scaling.\n\n\nHstems (this is, hint values defined in the font to help align horizontal features) that fall within a blue zone are said to be \u2018captured\u2019 and are aligned to that zone. Uncaptured stems are moved in one of four ways, top edge up or down, bottom edge up or down. Unless there are conflicting hstems, the smallest movement is taken to minimize distortion.",
            "title": "The CFF driver"
        },
        {
            "location": "/ft2-cff_driver/index.html#the-cff-driver",
            "text": "",
            "title": "The CFF driver"
        },
        {
            "location": "/ft2-cff_driver/index.html#synopsis",
            "text": "While FreeType's CFF driver doesn't expose API functions by itself, it is possible to control its behaviour with  FT_Property_Set  and  FT_Property_Get .  The CFF driver's module name is \u2018cff\u2019.  Available properties are  hinting-engine ,  no-stem-darkening ,  darkening-parameters , and  random-seed , as documented in the \u2018 Driver properties \u2019 section.  Hinting and antialiasing principles of the new engine  The rasterizer is positioning horizontal features (e.g., ascender height & x-height, or crossbars) on the pixel grid and minimizing the amount of antialiasing applied to them, while placing vertical features (vertical stems) on the pixel grid without hinting, thus representing the stem position and weight accurately. Sometimes the vertical stems may be only partially black. In this context, \u2018antialiasing\u2019 means that stems are not positioned exactly on pixel borders, causing a fuzzy appearance.  There are two principles behind this approach.  1) No hinting in the horizontal direction: Unlike \u2018superhinted\u2019 TrueType, which changes glyph widths to accommodate regular inter-glyph spacing, Adobe's approach is \u2018faithful to the design\u2019 in representing both the glyph width and the inter-glyph spacing designed for the font. This makes the screen display as close as it can be to the result one would get with infinite resolution, while preserving what is considered the key characteristics of each glyph. Note that the distances between unhinted and grid-fitted positions at small sizes are comparable to kerning values and thus would be noticeable (and distracting) while reading if hinting were applied.  One of the reasons to not hint horizontally is antialiasing for LCD screens: The pixel geometry of modern displays supplies three vertical subpixels as the eye moves horizontally across each visible pixel. On devices where we can be certain this characteristic is present a rasterizer can take advantage of the subpixels to add increments of weight. In Western writing systems this turns out to be the more critical direction anyway; the weights and spacing of vertical stems (see above) are central to Armenian, Cyrillic, Greek, and Latin type designs. Even when the rasterizer uses greyscale antialiasing instead of color (a necessary compromise when one doesn't know the screen characteristics), the unhinted vertical features preserve the design's weight and spacing much better than aliased type would.  2) Alignment in the vertical direction: Weights and spacing along the y\u00a0axis are less critical; what is much more important is the visual alignment of related features (like cap-height and x-height). The sense of alignment for these is enhanced by the sharpness of grid-fit edges, while the cruder vertical resolution (full pixels instead of \u2153 pixels) is less of a problem.  On the technical side, horizontal alignment zones for ascender, x-height, and other important height values (traditionally called \u2018blue zones\u2019) as defined in the font are positioned independently, each being rounded to the nearest pixel edge, taking care of overshoot suppression at small sizes, stem darkening, and scaling.  Hstems (this is, hint values defined in the font to help align horizontal features) that fall within a blue zone are said to be \u2018captured\u2019 and are aligned to that zone. Uncaptured stems are moved in one of four ways, top edge up or down, bottom edge up or down. Unless there are conflicting hstems, the smallest movement is taken to minimize distortion.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-t1_cid_driver/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb The Type 1 and CID drivers\n\n\n\n\nThe Type 1 and CID drivers\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nIt is possible to control the behaviour of FreeType's Type\u00a01 and Type\u00a01 CID drivers with \nFT_Property_Set\n and \nFT_Property_Get\n.\n\n\nBehind the scenes, both drivers use the Adobe CFF engine for hinting; however, the used properties must be specified separately.\n\n\nThe Type\u00a01 driver's module name is \u2018type1\u2019; the CID driver's module name is \u2018t1cid\u2019.\n\n\nAvailable properties are \nhinting-engine\n, \nno-stem-darkening\n, \ndarkening-parameters\n, and \nrandom-seed\n, as documented in the \u2018\nDriver properties\n\u2019 section.\n\n\nPlease see the \u2018\nThe CFF driver\n\u2019 section for more details on the new hinting engine.",
            "title": "The Type 1 and CID drivers"
        },
        {
            "location": "/ft2-t1_cid_driver/index.html#the-type-1-and-cid-drivers",
            "text": "",
            "title": "The Type 1 and CID drivers"
        },
        {
            "location": "/ft2-t1_cid_driver/index.html#synopsis",
            "text": "It is possible to control the behaviour of FreeType's Type\u00a01 and Type\u00a01 CID drivers with  FT_Property_Set  and  FT_Property_Get .  Behind the scenes, both drivers use the Adobe CFF engine for hinting; however, the used properties must be specified separately.  The Type\u00a01 driver's module name is \u2018type1\u2019; the CID driver's module name is \u2018t1cid\u2019.  Available properties are  hinting-engine ,  no-stem-darkening ,  darkening-parameters , and  random-seed , as documented in the \u2018 Driver properties \u2019 section.  Please see the \u2018 The CFF driver \u2019 section for more details on the new hinting engine.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-tt_driver/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb The TrueType driver\n\n\n\n\nThe TrueType driver\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nWhile FreeType's TrueType driver doesn't expose API functions by itself, it is possible to control its behaviour with \nFT_Property_Set\n and \nFT_Property_Get\n. The following lists the available properties together with the necessary macros and structures.\n\n\nThe TrueType driver's module name is \u2018truetype\u2019.\n\n\nA single property \ninterpreter-version\n is available, as documented in the \u2018\nDriver properties\n\u2019 section.\n\n\nWe start with a list of definitions, kindly provided by Greg Hitchcock.\n\n\nBi-Level Rendering\n\n\nMonochromatic rendering, exclusively used in the early days of TrueType by both Apple and Microsoft. Microsoft's GDI interface supported hinting of the right-side bearing point, such that the advance width could be non-linear. Most often this was done to achieve some level of glyph symmetry. To enable reasonable performance (e.g., not having to run hinting on all glyphs just to get the widths) there was a bit in the head table indicating if the side bearing was hinted, and additional tables, \u2018hdmx\u2019 and \u2018LTSH\u2019, to cache hinting widths across multiple sizes and device aspect ratios.\n\n\nFont Smoothing\n\n\nMicrosoft's GDI implementation of anti-aliasing. Not traditional anti-aliasing as the outlines were hinted before the sampling. The widths matched the bi-level rendering.\n\n\nClearType Rendering\n\n\nTechnique that uses physical subpixels to improve rendering on LCD (and other) displays. Because of the higher resolution, many methods of improving symmetry in glyphs through hinting the right-side bearing were no longer necessary. This lead to what GDI calls \u2018natural widths\u2019 ClearType, see \nhttp://www.beatstamm.com/typography/RTRCh4.htm#Sec21\n. Since hinting has extra resolution, most non-linearity went away, but it is still possible for hints to change the advance widths in this mode.\n\n\nClearType Compatible Widths\n\n\nOne of the earliest challenges with ClearType was allowing the implementation in GDI to be selected without requiring all UI and documents to reflow. To address this, a compatible method of rendering ClearType was added where the font hints are executed once to determine the width in bi-level rendering, and then re-run in ClearType, with the difference in widths being absorbed in the font hints for ClearType (mostly in the white space of hints); see \nhttp://www.beatstamm.com/typography/RTRCh4.htm#Sec20\n. Somewhat by definition, compatible width ClearType allows for non-linear widths, but only when the bi-level version has non-linear widths.\n\n\nClearType Subpixel Positioning\n\n\nOne of the nice benefits of ClearType is the ability to more crisply display fractional widths; unfortunately, the GDI model of integer bitmaps did not support this. However, the WPF and Direct Write frameworks do support fractional widths. DWrite calls this \u2018natural mode\u2019, not to be confused with GDI's \u2018natural widths\u2019. Subpixel positioning, in the current implementation of Direct Write, unfortunately does not support hinted advance widths, see \nhttp://www.beatstamm.com/typography/RTRCh4.htm#Sec22\n. Note that the TrueType interpreter fully allows the advance width to be adjusted in this mode, just the DWrite client will ignore those changes.\n\n\nClearType Backward Compatibility\n\n\nThis is a set of exceptions made in the TrueType interpreter to minimize hinting techniques that were problematic with the extra resolution of ClearType; see \nhttp://www.beatstamm.com/typography/RTRCh4.htm#Sec1\n and \nhttps://www.microsoft.com/typography/cleartype/truetypecleartype.aspx\n. This technique is not to be confused with ClearType compatible widths. ClearType backward compatibility has no direct impact on changing advance widths, but there might be an indirect impact on disabling some deltas. This could be worked around in backward compatibility mode.\n\n\nNative ClearType Mode\n\n\n(Not to be confused with \u2018natural widths\u2019.) This mode removes all the exceptions in the TrueType interpreter when running with ClearType. Any issues on widths would still apply, though.",
            "title": "The TrueType driver"
        },
        {
            "location": "/ft2-tt_driver/index.html#the-truetype-driver",
            "text": "",
            "title": "The TrueType driver"
        },
        {
            "location": "/ft2-tt_driver/index.html#synopsis",
            "text": "While FreeType's TrueType driver doesn't expose API functions by itself, it is possible to control its behaviour with  FT_Property_Set  and  FT_Property_Get . The following lists the available properties together with the necessary macros and structures.  The TrueType driver's module name is \u2018truetype\u2019.  A single property  interpreter-version  is available, as documented in the \u2018 Driver properties \u2019 section.  We start with a list of definitions, kindly provided by Greg Hitchcock.  Bi-Level Rendering  Monochromatic rendering, exclusively used in the early days of TrueType by both Apple and Microsoft. Microsoft's GDI interface supported hinting of the right-side bearing point, such that the advance width could be non-linear. Most often this was done to achieve some level of glyph symmetry. To enable reasonable performance (e.g., not having to run hinting on all glyphs just to get the widths) there was a bit in the head table indicating if the side bearing was hinted, and additional tables, \u2018hdmx\u2019 and \u2018LTSH\u2019, to cache hinting widths across multiple sizes and device aspect ratios.  Font Smoothing  Microsoft's GDI implementation of anti-aliasing. Not traditional anti-aliasing as the outlines were hinted before the sampling. The widths matched the bi-level rendering.  ClearType Rendering  Technique that uses physical subpixels to improve rendering on LCD (and other) displays. Because of the higher resolution, many methods of improving symmetry in glyphs through hinting the right-side bearing were no longer necessary. This lead to what GDI calls \u2018natural widths\u2019 ClearType, see  http://www.beatstamm.com/typography/RTRCh4.htm#Sec21 . Since hinting has extra resolution, most non-linearity went away, but it is still possible for hints to change the advance widths in this mode.  ClearType Compatible Widths  One of the earliest challenges with ClearType was allowing the implementation in GDI to be selected without requiring all UI and documents to reflow. To address this, a compatible method of rendering ClearType was added where the font hints are executed once to determine the width in bi-level rendering, and then re-run in ClearType, with the difference in widths being absorbed in the font hints for ClearType (mostly in the white space of hints); see  http://www.beatstamm.com/typography/RTRCh4.htm#Sec20 . Somewhat by definition, compatible width ClearType allows for non-linear widths, but only when the bi-level version has non-linear widths.  ClearType Subpixel Positioning  One of the nice benefits of ClearType is the ability to more crisply display fractional widths; unfortunately, the GDI model of integer bitmaps did not support this. However, the WPF and Direct Write frameworks do support fractional widths. DWrite calls this \u2018natural mode\u2019, not to be confused with GDI's \u2018natural widths\u2019. Subpixel positioning, in the current implementation of Direct Write, unfortunately does not support hinted advance widths, see  http://www.beatstamm.com/typography/RTRCh4.htm#Sec22 . Note that the TrueType interpreter fully allows the advance width to be adjusted in this mode, just the DWrite client will ignore those changes.  ClearType Backward Compatibility  This is a set of exceptions made in the TrueType interpreter to minimize hinting techniques that were problematic with the extra resolution of ClearType; see  http://www.beatstamm.com/typography/RTRCh4.htm#Sec1  and  https://www.microsoft.com/typography/cleartype/truetypecleartype.aspx . This technique is not to be confused with ClearType compatible widths. ClearType backward compatibility has no direct impact on changing advance widths, but there might be an indirect impact on disabling some deltas. This could be worked around in backward compatibility mode.  Native ClearType Mode  (Not to be confused with \u2018natural widths\u2019.) This mode removes all the exceptions in the TrueType interpreter when running with ClearType. Any issues on widths would still apply, though.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-pcf_driver/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb The PCF driver\n\n\n\n\nThe PCF driver\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nWhile FreeType's PCF driver doesn't expose API functions by itself, it is possible to control its behaviour with \nFT_Property_Set\n and \nFT_Property_Get\n. Right now, there is a single property \nno-long-family-names\n available if FreeType is compiled with PCF_CONFIG_OPTION_LONG_FAMILY_NAMES.\n\n\nThe PCF driver's module name is \u2018pcf\u2019.",
            "title": "The PCF driver"
        },
        {
            "location": "/ft2-pcf_driver/index.html#the-pcf-driver",
            "text": "",
            "title": "The PCF driver"
        },
        {
            "location": "/ft2-pcf_driver/index.html#synopsis",
            "text": "While FreeType's PCF driver doesn't expose API functions by itself, it is possible to control its behaviour with  FT_Property_Set  and  FT_Property_Get . Right now, there is a single property  no-long-family-names  available if FreeType is compiled with PCF_CONFIG_OPTION_LONG_FAMILY_NAMES.  The PCF driver's module name is \u2018pcf\u2019.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-properties/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb Driver properties\n\n\n\n\nDriver properties\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nDriver modules can be controlled by setting and unsetting properties, using the functions \nFT_Property_Set\n and \nFT_Property_Get\n. This section documents the available properties, together with auxiliary macros and structures.\n\n\nFT_HINTING_XXX\n\u00b6\n\n\nDefined in FT_DRIVER_H (freetype/ftdriver.h).\n\n\n\n\n\n#\ndefine\n \nFT_HINTING_FREETYPE\n  0\n#\ndefine\n \nFT_HINTING_ADOBE\n     1\n\n  /* these constants (introduced in 2.4.12) are deprecated */\n#\ndefine\n FT_CFF_HINTING_FREETYPE  \nFT_HINTING_FREETYPE\n\n#\ndefine\n FT_CFF_HINTING_ADOBE     \nFT_HINTING_ADOBE\n\n\n\n\n\n\n\nA list of constants used for the \nhinting-engine\n property to select the hinting engine for CFF, Type\u00a01, and CID fonts.\n\n\nvalues\n\n\n\n\n\nFT_HINTING_FREETYPE\n\n\nUse the old FreeType hinting engine.\n\n\n\n\nFT_HINTING_ADOBE\n\n\nUse the hinting engine contributed by Adobe.\n\n\n\n\n\n\n\nsince\n\n\n\n2.9\n\n\n\n\n\nhinting-engine\n\u00b6\n\n\nThanks to Adobe, which contributed a new hinting (and parsing) engine, an application can select between \u2018freetype\u2019 and \u2018adobe\u2019 if compiled with CFF_CONFIG_OPTION_OLD_ENGINE. If this configuration macro isn't defined, \u2018hinting-engine\u2019 does nothing.\n\n\nThe same holds for the Type\u00a01 and CID modules if compiled with T1_CONFIG_OPTION_OLD_ENGINE.\n\n\nFor the \u2018cff\u2019 module, the default engine is \u2018freetype\u2019 if CFF_CONFIG_OPTION_OLD_ENGINE is defined, and \u2018adobe\u2019 otherwise.\n\n\nFor both the \u2018type1\u2019 and \u2018t1cid\u2019 modules, the default engine is \u2018freetype\u2019 if T1_CONFIG_OPTION_OLD_ENGINE is defined, and \u2018adobe\u2019 otherwise.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable (using values \u2018adobe\u2019 or \u2018freetype\u2019).\n\n\nexample\n\n\n\nThe following example code demonstrates how to select Adobe's hinting engine for the \u2018cff\u2019 module (omitting the error handling).\n\n  FT_Library  library;\n  FT_UInt     hinting_engine = FT_CFF_HINTING_ADOBE;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"cff\",\n                            \"hinting-engine\", &hinting_engine );\n\n\n\nsince\n\n\n\n2.4.12 (for \u2018cff\u2019 module)\n\n\n2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)\n\n\n\n\n\nno-stem-darkening\n\u00b6\n\n\nAll glyphs that pass through the auto-hinter will be emboldened unless this property is set to TRUE. The same is true for the CFF, Type\u00a01, and CID font modules if the \u2018Adobe\u2019 engine is selected (which is the default).\n\n\nStem darkening emboldens glyphs at smaller sizes to make them more readable on common low-DPI screens when using linear alpha blending and gamma correction, see \nFT_Render_Glyph\n. When not using linear alpha blending and gamma correction, glyphs will appear heavy and fuzzy!\n\n\nGamma correction essentially lightens fonts since shades of grey are shifted to higher pixel values (=\u00a0higher brightness) to match the original intention to the reality of our screens. The side-effect is that glyphs \u2018thin out\u2019. Mac OS\u00a0X and Adobe's proprietary font rendering library implement a counter-measure: stem darkening at smaller sizes where shades of gray dominate. By emboldening a glyph slightly in relation to its pixel size, individual pixels get higher coverage of filled-in outlines and are therefore \u2018blacker\u2019. This counteracts the \u2018thinning out\u2019 of glyphs, making text remain readable at smaller sizes.\n\n\nBy default, the Adobe engines for CFF, Type\u00a01, and CID fonts darken stems at smaller sizes, regardless of hinting, to enhance contrast. Setting this property, stem darkening gets switched off.\n\n\nFor the auto-hinter, stem-darkening is experimental currently and thus switched off by default (this is, \u2018no-stem-darkening\u2019 is set to TRUE by default). Total consistency with the CFF driver is not achieved right now because the emboldening method differs and glyphs must be scaled down on the Y-axis to keep outline points inside their precomputed blue zones. The smaller the size (especially 9ppem and down), the higher the loss of emboldening versus the CFF driver.\n\n\nNote that stem darkening is never applied if \nFT_LOAD_NO_SCALE\n is set.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable (using values 1 and 0 for \u2018on\u2019 and \u2018off\u2019, respectively). It can also be set per face using \nFT_Face_Properties\n with \nFT_PARAM_TAG_STEM_DARKENING\n.\n\n\nexample\n\n\n\n  FT_Library  library;\n  FT_Bool     no_stem_darkening = TRUE;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"cff\",\n                            \"no-stem-darkening\", &no_stem_darkening );\n\n\n\n\nsince\n\n\n\n2.4.12 (for \u2018cff\u2019 module)\n\n\n2.6.2 (for \u2018autofitter\u2019 module)\n\n\n2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)\n\n\n\n\n\ndarkening-parameters\n\u00b6\n\n\nBy default, the Adobe hinting engine, as used by the CFF, Type\u00a01, and CID font drivers, darkens stems as follows (if the \u2018no-stem-darkening\u2019 property isn't set):\n\n  stem width <= 0.5px:   darkening amount = 0.4px\n  stem width  = 1px:     darkening amount = 0.275px\n  stem width  = 1.667px: darkening amount = 0.275px\n  stem width >= 2.333px: darkening amount = 0px\n\n\n\nand piecewise linear in-between. At configuration time, these four control points can be set with the macro \nCFF_CONFIG_OPTION_DARKENING_PARAMETERS\n; the CFF, Type\u00a01, and CID drivers share these values. At runtime, the control points can be changed using the \u2018darkening-parameters\u2019 property (see the example below that demonstrates this for the Type\u00a01 driver).\n\n\nThe x\u00a0values give the stem width, and the y\u00a0values the darkening amount. The unit is 1000\nth\n of pixels. All coordinate values must be positive; the x\u00a0values must be monotonically increasing; the y\u00a0values must be monotonically decreasing and smaller than or equal to 500 (corresponding to half a pixel); the slope of each linear piece must be shallower than -1 (e.g., -.4).\n\n\nThe auto-hinter provides this property, too, as an experimental feature. See \nno-stem-darkening\n for more.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable, using eight comma-separated integers without spaces. Here the above example, using \u2018\\\u2019 to break the line for readability.\n\n  FREETYPE_PROPERTIES=\\\n  type1:darkening-parameters=500,300,1000,200,1500,100,2000,0\n\n\n\nexample\n\n\n\n  FT_Library  library;\n  FT_Int      darken_params[8] = {  500, 300,   // x1, y1\n                                   1000, 200,   // x2, y2\n                                   1500, 100,   // x3, y3\n                                   2000,   0 }; // x4, y4\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"type1\",\n                            \"darkening-parameters\", darken_params );\n\n\n\n\nsince\n\n\n\n2.5.1 (for \u2018cff\u2019 module)\n\n\n2.6.2 (for \u2018autofitter\u2019 module)\n\n\n2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)\n\n\n\n\n\nrandom-seed\n\u00b6\n\n\nBy default, the seed value for the CFF \u2018random\u2019 operator and the similar \u20180 28 callothersubr pop\u2019 command for the Type\u00a01 and CID drivers is set to a random value. However, mainly for debugging purposes, it is often necessary to use a known value as a seed so that the pseudo-random number sequences generated by \u2018random\u2019 are repeatable.\n\n\nThe \u2018random-seed\u2019 property does that. Its argument is a signed 32bit integer; if the value is zero or negative, the seed given by the \nintitialRandomSeed\n private DICT operator in a CFF file gets used (or a default value if there is no such operator). If the value is positive, use it instead of \ninitialRandomSeed\n, which is consequently ignored.\n\n\nnote\n\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable. It can also be set per face using \nFT_Face_Properties\n with \nFT_PARAM_TAG_RANDOM_SEED\n.\n\n\nsince\n\n\n\n2.8 (for \u2018cff\u2019 module)\n\n\n2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)\n\n\n\n\n\nno-long-family-names\n\u00b6\n\n\nIf PCF_CONFIG_OPTION_LONG_FAMILY_NAMES is active while compiling FreeType, the PCF driver constructs long family names.\n\n\nThere are many PCF fonts just called \u2018Fixed\u2019 which look completely different, and which have nothing to do with each other. When selecting \u2018Fixed\u2019 in KDE or Gnome one gets results that appear rather random, the style changes often if one changes the size and one cannot select some fonts at all. The improve this situation, the PCF module prepends the foundry name (plus a space) to the family name. It also checks whether there are \u2018wide\u2019 characters; all put together, family names like \u2018Sony Fixed\u2019 or \u2018Misc Fixed Wide\u2019 are constructed.\n\n\nIf \u2018no-long-family-names\u2019 is set, this feature gets switched off.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable (using values 1 and 0 for \u2018on\u2019 and \u2018off\u2019, respectively).\n\n\nexample\n\n\n\n  FT_Library  library;\n  FT_Bool     no_long_family_names = TRUE;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"pcf\",\n                            \"no-long-family-names\",\n                            &no_long_family_names );\n\n\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nTT_INTERPRETER_VERSION_XXX\n\u00b6\n\n\nDefined in FT_DRIVER_H (freetype/ftdriver.h).\n\n\n\n\n\n#\ndefine\n \nTT_INTERPRETER_VERSION_35\n  35\n#\ndefine\n \nTT_INTERPRETER_VERSION_38\n  38\n#\ndefine\n \nTT_INTERPRETER_VERSION_40\n  40\n\n\n\n\n\n\nA list of constants used for the \ninterpreter-version\n property to select the hinting engine for Truetype fonts.\n\n\nThe numeric value in the constant names represents the version number as returned by the \u2018GETINFO\u2019 bytecode instruction.\n\n\nvalues\n\n\n\n\n\nTT_INTERPRETER_VERSION_35\n\n\nVersion\u00a035 corresponds to MS rasterizer v.1.7 as used e.g. in Windows\u00a098; only grayscale and B/W rasterizing is supported.\n\n\n\n\nTT_INTERPRETER_VERSION_38\n\n\nVersion\u00a038 corresponds to MS rasterizer v.1.9; it is roughly equivalent to the hinting provided by DirectWrite ClearType (as can be found, for example, in the Internet Explorer\u00a09 running on Windows\u00a07). It is used in FreeType to select the \u2018Infinality\u2019 subpixel hinting code. The code may be removed in a future version.\n\n\n\n\nTT_INTERPRETER_VERSION_40\n\n\nVersion\u00a040 corresponds to MS rasterizer v.2.1; it is roughly equivalent to the hinting provided by DirectWrite ClearType (as can be found, for example, in Microsoft's Edge Browser on Windows\u00a010). It is used in FreeType to select the \u2018minimal\u2019 subpixel hinting code, a stripped-down and higher performance version of the \u2018Infinality\u2019 code.\n\n\n\n\n\n\n\nnote\n\n\n\nThis property controls the behaviour of the bytecode interpreter and thus how outlines get hinted. It does \nnot\n control how glyph get rasterized! In particular, it does not control subpixel color filtering.\n\n\nIf FreeType has not been compiled with the configuration option TT_CONFIG_OPTION_SUBPIXEL_HINTING, selecting version\u00a038 or\u00a040 causes an \nFT_Err_Unimplemented_Feature\n error.\n\n\nDepending on the graphics framework, Microsoft uses different bytecode and rendering engines. As a consequence, the version numbers returned by a call to the \u2018GETINFO\u2019 bytecode instruction are more convoluted than desired.\n\n\nHere are two tables that try to shed some light on the possible values for the MS rasterizer engine, together with the additional features introduced by it.\n\n  GETINFO framework               version feature\n  -------------------------------------------------------------------\n      3   GDI (Win 3.1),            v1.0  16-bit, first version\n          TrueImage\n     33   GDI (Win NT 3.1),         v1.5  32-bit\n          HP Laserjet\n     34   GDI (Win 95)              v1.6  font smoothing,\n                                          new SCANTYPE opcode\n     35   GDI (Win 98/2000)         v1.7  (UN)SCALED_COMPONENT_OFFSET\n                                            bits in composite glyphs\n     36   MGDI (Win CE 2)           v1.6+ classic ClearType\n     37   GDI (XP and later),       v1.8  ClearType\n          GDI+ old (before Vista)\n     38   GDI+ old (Vista, Win 7),  v1.9  subpixel ClearType,\n          WPF                             Y-direction ClearType,\n                                          additional error checking\n     39   DWrite (before Win 8)     v2.0  subpixel ClearType flags\n                                            in GETINFO opcode,\n                                          bug fixes\n     40   GDI+ (after Win 7),       v2.1  Y-direction ClearType flag\n          DWrite (Win 8)                    in GETINFO opcode,\n                                          Gray ClearType\n\n\n\nThe \u2018version\u2019 field gives a rough orientation only, since some applications provided certain features much earlier (as an example, Microsoft Reader used subpixel and Y-direction ClearType already in Windows 2000). Similarly, updates to a given framework might include improved hinting support.\n\n   version   sampling          rendering        comment\n            x        y       x           y\n  --------------------------------------------------------------\n    v1.0   normal  normal  B/W           B/W    bi-level\n    v1.6   high    high    gray          gray   grayscale\n    v1.8   high    normal  color-filter  B/W    (GDI) ClearType\n    v1.9   high    high    color-filter  gray   Color ClearType\n    v2.1   high    normal  gray          B/W    Gray ClearType\n    v2.1   high    high    gray          gray   Gray ClearType\n\n\n\nColor and Gray ClearType are the two available variants of \u2018Y-direction ClearType\u2019, meaning grayscale rasterization along the Y-direction; the name used in the TrueType specification for this feature is \u2018symmetric smoothing\u2019. \u2018Classic ClearType\u2019 is the original algorithm used before introducing a modified version in Win\u00a0XP. Another name for v1.6's grayscale rendering is \u2018font smoothing\u2019, and \u2018Color ClearType\u2019 is sometimes also called \u2018DWrite ClearType\u2019. To differentiate between today's Color ClearType and the earlier ClearType variant with B/W rendering along the vertical axis, the latter is sometimes called \u2018GDI ClearType\u2019.\n\n\n\u2018Normal\u2019 and \u2018high\u2019 sampling describe the (virtual) resolution to access the rasterized outline after the hinting process. \u2018Normal\u2019 means 1 sample per grid line (i.e., B/W). In the current Microsoft implementation, \u2018high\u2019 means an extra virtual resolution of 16x16 (or 16x1) grid lines per pixel for bytecode instructions like \u2018MIRP\u2019. After hinting, these 16 grid lines are mapped to 6x5 (or 6x1) grid lines for color filtering if Color ClearType is activated.\n\n\nNote that \u2018Gray ClearType\u2019 is essentially the same as v1.6's grayscale rendering. However, the GETINFO instruction handles it differently: v1.6 returns bit\u00a012 (hinting for grayscale), while v2.1 returns bits\u00a013 (hinting for ClearType), 18 (symmetrical smoothing), and\u00a019 (Gray ClearType). Also, this mode respects bits 2 and\u00a03 for the version\u00a01 gasp table exclusively (like Color ClearType), while v1.6 only respects the values of version\u00a00 (bits 0 and\u00a01).\n\n\nKeep in mind that the features of the above interpreter versions might not map exactly to FreeType features or behavior because it is a fundamentally different library with different internals.\n\n\n\n\n\ninterpreter-version\n\u00b6\n\n\nCurrently, three versions are available, two representing the bytecode interpreter with subpixel hinting support (old \u2018Infinality\u2019 code and new stripped-down and higher performance \u2018minimal\u2019 code) and one without, respectively. The default is subpixel support if TT_CONFIG_OPTION_SUBPIXEL_HINTING is defined, and no subpixel support otherwise (since it isn't available then).\n\n\nIf subpixel hinting is on, many TrueType bytecode instructions behave differently compared to B/W or grayscale rendering (except if \u2018native ClearType\u2019 is selected by the font). Microsoft's main idea is to render at a much increased horizontal resolution, then sampling down the created output to subpixel precision. However, many older fonts are not suited to this and must be specially taken care of by applying (hardcoded) tweaks in Microsoft's interpreter.\n\n\nDetails on subpixel hinting and some of the necessary tweaks can be found in Greg Hitchcock's whitepaper at \u2018\nhttps://www.microsoft.com/typography/cleartype/truetypecleartype.aspx\n\u2019. Note that FreeType currently doesn't really \u2018subpixel hint\u2019 (6x1, 6x2, or 6x5 supersampling) like discussed in the paper. Depending on the chosen interpreter, it simply ignores instructions on vertical stems to arrive at very similar results.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable (using values \u201835\u2019, \u201838\u2019, or \u201840\u2019).\n\n\nexample\n\n\n\nThe following example code demonstrates how to deactivate subpixel hinting (omitting the error handling).\n\n  FT_Library  library;\n  FT_Face     face;\n  FT_UInt     interpreter_version = TT_INTERPRETER_VERSION_35;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"truetype\",\n                            \"interpreter-version\",\n                            &interpreter_version );\n\n\n\nsince\n\n\n\n2.5\n\n\n\n\n\nglyph-to-script-map\n\u00b6\n\n\nExperimental only\n\n\nThe auto-hinter provides various script modules to hint glyphs. Examples of supported scripts are Latin or CJK. Before a glyph is auto-hinted, the Unicode character map of the font gets examined, and the script is then determined based on Unicode character ranges, see below.\n\n\nOpenType fonts, however, often provide much more glyphs than character codes (small caps, superscripts, ligatures, swashes, etc.), to be controlled by so-called \u2018features\u2019. Handling OpenType features can be quite complicated and thus needs a separate library on top of FreeType.\n\n\nThe mapping between glyph indices and scripts (in the auto-hinter sense, see the \nFT_AUTOHINTER_SCRIPT_XXX\n values) is stored as an array with \nnum_glyphs\n elements, as found in the font's \nFT_Face\n structure. The \u2018glyph-to-script-map\u2019 property returns a pointer to this array, which can be modified as needed. Note that the modification should happen before the first glyph gets processed by the auto-hinter so that the global analysis of the font shapes actually uses the modified mapping.\n\n\nexample\n\n\n\nThe following example code demonstrates how to access it (omitting the error handling).\n\n  FT_Library                library;\n  FT_Face                   face;\n  FT_Prop_GlyphToScriptMap  prop;\n\n\n  FT_Init_FreeType( &library );\n  FT_New_Face( library, \"foo.ttf\", 0, &face );\n\n  prop.face = face;\n\n  FT_Property_Get( library, \"autofitter\",\n                            \"glyph-to-script-map\", &prop );\n\n  // adjust `prop.map' as needed right here\n\n  FT_Load_Glyph( face, ..., FT_LOAD_FORCE_AUTOHINT );\n\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\nFT_AUTOHINTER_SCRIPT_XXX\n\u00b6\n\n\nDefined in FT_DRIVER_H (freetype/ftdriver.h).\n\n\n\n\n\n#\ndefine\n \nFT_AUTOHINTER_SCRIPT_NONE\n   0\n#\ndefine\n \nFT_AUTOHINTER_SCRIPT_LATIN\n  1\n#\ndefine\n \nFT_AUTOHINTER_SCRIPT_CJK\n    2\n#\ndefine\n \nFT_AUTOHINTER_SCRIPT_INDIC\n  3\n\n\n\n\n\n\nExperimental only\n\n\nA list of constants used for the \nglyph-to-script-map\n property to specify the script submodule the auto-hinter should use for hinting a particular glyph.\n\n\nvalues\n\n\n\n\n\nFT_AUTOHINTER_SCRIPT_NONE\n\n\nDon't auto-hint this glyph.\n\n\n\n\nFT_AUTOHINTER_SCRIPT_LATIN\n\n\nApply the latin auto-hinter. For the auto-hinter, \u2018latin\u2019 is a very broad term, including Cyrillic and Greek also since characters from those scripts share the same design constraints.\nBy default, characters from the following Unicode ranges are assigned to this submodule.\n\n\n  U+0020 - U+007F  // Basic Latin (no control characters)\n  U+00A0 - U+00FF  // Latin-1 Supplement (no control characters)\n  U+0100 - U+017F  // Latin Extended-A\n  U+0180 - U+024F  // Latin Extended-B\n  U+0250 - U+02AF  // IPA Extensions\n  U+02B0 - U+02FF  // Spacing Modifier Letters\n  U+0300 - U+036F  // Combining Diacritical Marks\n  U+0370 - U+03FF  // Greek and Coptic\n  U+0400 - U+04FF  // Cyrillic\n  U+0500 - U+052F  // Cyrillic Supplement\n  U+1D00 - U+1D7F  // Phonetic Extensions\n  U+1D80 - U+1DBF  // Phonetic Extensions Supplement\n  U+1DC0 - U+1DFF  // Combining Diacritical Marks Supplement\n  U+1E00 - U+1EFF  // Latin Extended Additional\n  U+1F00 - U+1FFF  // Greek Extended\n  U+2000 - U+206F  // General Punctuation\n  U+2070 - U+209F  // Superscripts and Subscripts\n  U+20A0 - U+20CF  // Currency Symbols\n  U+2150 - U+218F  // Number Forms\n  U+2460 - U+24FF  // Enclosed Alphanumerics\n  U+2C60 - U+2C7F  // Latin Extended-C\n  U+2DE0 - U+2DFF  // Cyrillic Extended-A\n  U+2E00 - U+2E7F  // Supplemental Punctuation\n  U+A640 - U+A69F  // Cyrillic Extended-B\n  U+A720 - U+A7FF  // Latin Extended-D\n  U+FB00 - U+FB06  // Alphab. Present. Forms (Latin Ligatures)\n U+1D400 - U+1D7FF // Mathematical Alphanumeric Symbols\n U+1F100 - U+1F1FF // Enclosed Alphanumeric Supplement\n\n\n\n\n\nFT_AUTOHINTER_SCRIPT_CJK\n\n\nApply the CJK auto-hinter, covering Chinese, Japanese, Korean, old Vietnamese, and some other scripts.\nBy default, characters from the following Unicode ranges are assigned to this submodule.\n\n\n  U+1100 - U+11FF  // Hangul Jamo\n  U+2E80 - U+2EFF  // CJK Radicals Supplement\n  U+2F00 - U+2FDF  // Kangxi Radicals\n  U+2FF0 - U+2FFF  // Ideographic Description Characters\n  U+3000 - U+303F  // CJK Symbols and Punctuation\n  U+3040 - U+309F  // Hiragana\n  U+30A0 - U+30FF  // Katakana\n  U+3100 - U+312F  // Bopomofo\n  U+3130 - U+318F  // Hangul Compatibility Jamo\n  U+3190 - U+319F  // Kanbun\n  U+31A0 - U+31BF  // Bopomofo Extended\n  U+31C0 - U+31EF  // CJK Strokes\n  U+31F0 - U+31FF  // Katakana Phonetic Extensions\n  U+3200 - U+32FF  // Enclosed CJK Letters and Months\n  U+3300 - U+33FF  // CJK Compatibility\n  U+3400 - U+4DBF  // CJK Unified Ideographs Extension A\n  U+4DC0 - U+4DFF  // Yijing Hexagram Symbols\n  U+4E00 - U+9FFF  // CJK Unified Ideographs\n  U+A960 - U+A97F  // Hangul Jamo Extended-A\n  U+AC00 - U+D7AF  // Hangul Syllables\n  U+D7B0 - U+D7FF  // Hangul Jamo Extended-B\n  U+F900 - U+FAFF  // CJK Compatibility Ideographs\n  U+FE10 - U+FE1F  // Vertical forms\n  U+FE30 - U+FE4F  // CJK Compatibility Forms\n  U+FF00 - U+FFEF  // Halfwidth and Fullwidth Forms\n U+1B000 - U+1B0FF // Kana Supplement\n U+1D300 - U+1D35F // Tai Xuan Hing Symbols\n U+1F200 - U+1F2FF // Enclosed Ideographic Supplement\n U+20000 - U+2A6DF // CJK Unified Ideographs Extension B\n U+2A700 - U+2B73F // CJK Unified Ideographs Extension C\n U+2B740 - U+2B81F // CJK Unified Ideographs Extension D\n U+2F800 - U+2FA1F // CJK Compatibility Ideographs Supplement\n\n\n\n\n\nFT_AUTOHINTER_SCRIPT_INDIC\n\n\nApply the indic auto-hinter, covering all major scripts from the Indian sub-continent and some other related scripts like Thai, Lao, or Tibetan.\nBy default, characters from the following Unicode ranges are assigned to this submodule.\n\n\n  U+0900 - U+0DFF  // Indic Range\n  U+0F00 - U+0FFF  // Tibetan\n  U+1900 - U+194F  // Limbu\n  U+1B80 - U+1BBF  // Sundanese\n  U+A800 - U+A82F  // Syloti Nagri\n  U+ABC0 - U+ABFF  // Meetei Mayek\n U+11800 - U+118DF // Sharada\n\n\n\nNote that currently Indic support is rudimentary only, missing blue zone support.\n\n\n\n\n\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\nFT_Prop_GlyphToScriptMap\n\u00b6\n\n\nDefined in FT_DRIVER_H (freetype/ftdriver.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Prop_GlyphToScriptMap_\n  {\n    \nFT_Face\n     face;\n    \nFT_UShort\n*  map;\n\n  } \nFT_Prop_GlyphToScriptMap\n;\n\n\n\n\n\n\nExperimental only\n\n\nThe data exchange structure for the \nglyph-to-script-map\n property.\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\nfallback-script\n\u00b6\n\n\nExperimental only\n\n\nIf no auto-hinter script module can be assigned to a glyph, a fallback script gets assigned to it (see also the \nglyph-to-script-map\n property). By default, this is \nFT_AUTOHINTER_SCRIPT_CJK\n. Using the \u2018fallback-script\u2019 property, this fallback value can be changed.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nIt's important to use the right timing for changing this value: The creation of the glyph-to-script map that eventually uses the fallback script value gets triggered either by setting or reading a face-specific property like \nglyph-to-script-map\n, or by auto-hinting any glyph from that face. In particular, if you have already created an \nFT_Face\n structure but not loaded any glyph (using the auto-hinter), a change of the fallback script will affect this face.\n\n\nexample\n\n\n\n  FT_Library  library;\n  FT_UInt     fallback_script = FT_AUTOHINTER_SCRIPT_NONE;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"autofitter\",\n                            \"fallback-script\", &fallback_script );\n\n\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\ndefault-script\n\u00b6\n\n\nExperimental only\n\n\nIf FreeType gets compiled with FT_CONFIG_OPTION_USE_HARFBUZZ to make the HarfBuzz library access OpenType features for getting better glyph coverages, this property sets the (auto-fitter) script to be used for the default (OpenType) script data of a font's GSUB table. Features for the default script are intended for all scripts not explicitly handled in GSUB; an example is a \u2018dlig\u2019 feature, containing the combination of the characters \u2018T\u2019, \u2018E\u2019, and \u2018L\u2019 to form a \u2018TEL\u2019 ligature.\n\n\nBy default, this is \nFT_AUTOHINTER_SCRIPT_LATIN\n. Using the \u2018default-script\u2019 property, this default value can be changed.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nIt's important to use the right timing for changing this value: The creation of the glyph-to-script map that eventually uses the default script value gets triggered either by setting or reading a face-specific property like \nglyph-to-script-map\n, or by auto-hinting any glyph from that face. In particular, if you have already created an \nFT_Face\n structure but not loaded any glyph (using the auto-hinter), a change of the default script will affect this face.\n\n\nexample\n\n\n\n  FT_Library  library;\n  FT_UInt     default_script = FT_AUTOHINTER_SCRIPT_NONE;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"autofitter\",\n                            \"default-script\", &default_script );\n\n\n\n\nsince\n\n\n\n2.5.3\n\n\n\n\n\nincrease-x-height\n\u00b6\n\n\nFor ppem values in the range 6\u00a0<= ppem <= \u2018increase-x-height\u2019, round up the font's x\u00a0height much more often than normally. If the value is set to\u00a00, which is the default, this feature is switched off. Use this property to improve the legibility of small font sizes if necessary.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nSet this value right after calling \nFT_Set_Char_Size\n, but before loading any glyph (using the auto-hinter).\n\n\nexample\n\n\n\n  FT_Library               library;\n  FT_Face                  face;\n  FT_Prop_IncreaseXHeight  prop;\n\n\n  FT_Init_FreeType( &library );\n  FT_New_Face( library, \"foo.ttf\", 0, &face );\n  FT_Set_Char_Size( face, 10 * 64, 0, 72, 0 );\n\n  prop.face  = face;\n  prop.limit = 14;\n\n  FT_Property_Set( library, \"autofitter\",\n                            \"increase-x-height\", &prop );\n\n\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\nFT_Prop_IncreaseXHeight\n\u00b6\n\n\nDefined in FT_DRIVER_H (freetype/ftdriver.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Prop_IncreaseXHeight_\n  {\n    \nFT_Face\n  face;\n    \nFT_UInt\n  limit;\n\n  } \nFT_Prop_IncreaseXHeight\n;\n\n\n\n\n\n\nThe data exchange structure for the \nincrease-x-height\n property.\n\n\n\n\n\nwarping\n\u00b6\n\n\nExperimental only\n\n\nIf FreeType gets compiled with option AF_CONFIG_OPTION_USE_WARPER to activate the warp hinting code in the auto-hinter, this property switches warping on and off.\n\n\nWarping only works in \u2018normal\u2019 auto-hinting mode replacing it. The idea of the code is to slightly scale and shift a glyph along the non-hinted dimension (which is usually the horizontal axis) so that as much of its segments are aligned (more or less) to the grid. To find out a glyph's optimal scaling and shifting value, various parameter combinations are tried and scored.\n\n\nBy default, warping is off.\n\n\nnote\n\n\n\nThis property can be used with \nFT_Property_Get\n also.\n\n\nThis property can be set via the \nFREETYPE_PROPERTIES\n environment variable (using values 1 and 0 for \u2018on\u2019 and \u2018off\u2019, respectively).\n\n\nThe warping code can also change advance widths. Have a look at the \nlsb_delta\n and \nrsb_delta\n fields in the \nFT_GlyphSlotRec\n structure for details on improving inter-glyph distances while rendering.\n\n\nSince warping is a global property of the auto-hinter it is best to change its value before rendering any face. Otherwise, you should reload all faces that get auto-hinted in \u2018normal\u2019 hinting mode.\n\n\nexample\n\n\n\nThis example shows how to switch on warping (omitting the error handling).\n\n  FT_Library  library;\n  FT_Bool     warping = 1;\n\n\n  FT_Init_FreeType( &library );\n\n  FT_Property_Set( library, \"autofitter\", \"warping\", &warping );\n\n\n\nsince\n\n\n\n2.6",
            "title": "Driver properties"
        },
        {
            "location": "/ft2-properties/index.html#driver-properties",
            "text": "",
            "title": "Driver properties"
        },
        {
            "location": "/ft2-properties/index.html#synopsis",
            "text": "Driver modules can be controlled by setting and unsetting properties, using the functions  FT_Property_Set  and  FT_Property_Get . This section documents the available properties, together with auxiliary macros and structures.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-properties/index.html#ft_hinting_xxx",
            "text": "Defined in FT_DRIVER_H (freetype/ftdriver.h).   \n# define   FT_HINTING_FREETYPE   0\n# define   FT_HINTING_ADOBE      1\n\n  /* these constants (introduced in 2.4.12) are deprecated */\n# define  FT_CFF_HINTING_FREETYPE   FT_HINTING_FREETYPE \n# define  FT_CFF_HINTING_ADOBE      FT_HINTING_ADOBE    A list of constants used for the  hinting-engine  property to select the hinting engine for CFF, Type\u00a01, and CID fonts.",
            "title": "FT_HINTING_XXX"
        },
        {
            "location": "/ft2-properties/index.html#hinting-engine",
            "text": "Thanks to Adobe, which contributed a new hinting (and parsing) engine, an application can select between \u2018freetype\u2019 and \u2018adobe\u2019 if compiled with CFF_CONFIG_OPTION_OLD_ENGINE. If this configuration macro isn't defined, \u2018hinting-engine\u2019 does nothing.  The same holds for the Type\u00a01 and CID modules if compiled with T1_CONFIG_OPTION_OLD_ENGINE.  For the \u2018cff\u2019 module, the default engine is \u2018freetype\u2019 if CFF_CONFIG_OPTION_OLD_ENGINE is defined, and \u2018adobe\u2019 otherwise.  For both the \u2018type1\u2019 and \u2018t1cid\u2019 modules, the default engine is \u2018freetype\u2019 if T1_CONFIG_OPTION_OLD_ENGINE is defined, and \u2018adobe\u2019 otherwise.",
            "title": "hinting-engine"
        },
        {
            "location": "/ft2-properties/index.html#no-stem-darkening",
            "text": "All glyphs that pass through the auto-hinter will be emboldened unless this property is set to TRUE. The same is true for the CFF, Type\u00a01, and CID font modules if the \u2018Adobe\u2019 engine is selected (which is the default).  Stem darkening emboldens glyphs at smaller sizes to make them more readable on common low-DPI screens when using linear alpha blending and gamma correction, see  FT_Render_Glyph . When not using linear alpha blending and gamma correction, glyphs will appear heavy and fuzzy!  Gamma correction essentially lightens fonts since shades of grey are shifted to higher pixel values (=\u00a0higher brightness) to match the original intention to the reality of our screens. The side-effect is that glyphs \u2018thin out\u2019. Mac OS\u00a0X and Adobe's proprietary font rendering library implement a counter-measure: stem darkening at smaller sizes where shades of gray dominate. By emboldening a glyph slightly in relation to its pixel size, individual pixels get higher coverage of filled-in outlines and are therefore \u2018blacker\u2019. This counteracts the \u2018thinning out\u2019 of glyphs, making text remain readable at smaller sizes.  By default, the Adobe engines for CFF, Type\u00a01, and CID fonts darken stems at smaller sizes, regardless of hinting, to enhance contrast. Setting this property, stem darkening gets switched off.  For the auto-hinter, stem-darkening is experimental currently and thus switched off by default (this is, \u2018no-stem-darkening\u2019 is set to TRUE by default). Total consistency with the CFF driver is not achieved right now because the emboldening method differs and glyphs must be scaled down on the Y-axis to keep outline points inside their precomputed blue zones. The smaller the size (especially 9ppem and down), the higher the loss of emboldening versus the CFF driver.  Note that stem darkening is never applied if  FT_LOAD_NO_SCALE  is set.",
            "title": "no-stem-darkening"
        },
        {
            "location": "/ft2-properties/index.html#darkening-parameters",
            "text": "By default, the Adobe hinting engine, as used by the CFF, Type\u00a01, and CID font drivers, darkens stems as follows (if the \u2018no-stem-darkening\u2019 property isn't set):   stem width <= 0.5px:   darkening amount = 0.4px\n  stem width  = 1px:     darkening amount = 0.275px\n  stem width  = 1.667px: darkening amount = 0.275px\n  stem width >= 2.333px: darkening amount = 0px  and piecewise linear in-between. At configuration time, these four control points can be set with the macro  CFF_CONFIG_OPTION_DARKENING_PARAMETERS ; the CFF, Type\u00a01, and CID drivers share these values. At runtime, the control points can be changed using the \u2018darkening-parameters\u2019 property (see the example below that demonstrates this for the Type\u00a01 driver).  The x\u00a0values give the stem width, and the y\u00a0values the darkening amount. The unit is 1000 th  of pixels. All coordinate values must be positive; the x\u00a0values must be monotonically increasing; the y\u00a0values must be monotonically decreasing and smaller than or equal to 500 (corresponding to half a pixel); the slope of each linear piece must be shallower than -1 (e.g., -.4).  The auto-hinter provides this property, too, as an experimental feature. See  no-stem-darkening  for more.",
            "title": "darkening-parameters"
        },
        {
            "location": "/ft2-properties/index.html#random-seed",
            "text": "By default, the seed value for the CFF \u2018random\u2019 operator and the similar \u20180 28 callothersubr pop\u2019 command for the Type\u00a01 and CID drivers is set to a random value. However, mainly for debugging purposes, it is often necessary to use a known value as a seed so that the pseudo-random number sequences generated by \u2018random\u2019 are repeatable.  The \u2018random-seed\u2019 property does that. Its argument is a signed 32bit integer; if the value is zero or negative, the seed given by the  intitialRandomSeed  private DICT operator in a CFF file gets used (or a default value if there is no such operator). If the value is positive, use it instead of  initialRandomSeed , which is consequently ignored.",
            "title": "random-seed"
        },
        {
            "location": "/ft2-properties/index.html#no-long-family-names",
            "text": "If PCF_CONFIG_OPTION_LONG_FAMILY_NAMES is active while compiling FreeType, the PCF driver constructs long family names.  There are many PCF fonts just called \u2018Fixed\u2019 which look completely different, and which have nothing to do with each other. When selecting \u2018Fixed\u2019 in KDE or Gnome one gets results that appear rather random, the style changes often if one changes the size and one cannot select some fonts at all. The improve this situation, the PCF module prepends the foundry name (plus a space) to the family name. It also checks whether there are \u2018wide\u2019 characters; all put together, family names like \u2018Sony Fixed\u2019 or \u2018Misc Fixed Wide\u2019 are constructed.  If \u2018no-long-family-names\u2019 is set, this feature gets switched off.",
            "title": "no-long-family-names"
        },
        {
            "location": "/ft2-properties/index.html#tt_interpreter_version_xxx",
            "text": "Defined in FT_DRIVER_H (freetype/ftdriver.h).   \n# define   TT_INTERPRETER_VERSION_35   35\n# define   TT_INTERPRETER_VERSION_38   38\n# define   TT_INTERPRETER_VERSION_40   40   A list of constants used for the  interpreter-version  property to select the hinting engine for Truetype fonts.  The numeric value in the constant names represents the version number as returned by the \u2018GETINFO\u2019 bytecode instruction.",
            "title": "TT_INTERPRETER_VERSION_XXX"
        },
        {
            "location": "/ft2-properties/index.html#interpreter-version",
            "text": "Currently, three versions are available, two representing the bytecode interpreter with subpixel hinting support (old \u2018Infinality\u2019 code and new stripped-down and higher performance \u2018minimal\u2019 code) and one without, respectively. The default is subpixel support if TT_CONFIG_OPTION_SUBPIXEL_HINTING is defined, and no subpixel support otherwise (since it isn't available then).  If subpixel hinting is on, many TrueType bytecode instructions behave differently compared to B/W or grayscale rendering (except if \u2018native ClearType\u2019 is selected by the font). Microsoft's main idea is to render at a much increased horizontal resolution, then sampling down the created output to subpixel precision. However, many older fonts are not suited to this and must be specially taken care of by applying (hardcoded) tweaks in Microsoft's interpreter.  Details on subpixel hinting and some of the necessary tweaks can be found in Greg Hitchcock's whitepaper at \u2018 https://www.microsoft.com/typography/cleartype/truetypecleartype.aspx \u2019. Note that FreeType currently doesn't really \u2018subpixel hint\u2019 (6x1, 6x2, or 6x5 supersampling) like discussed in the paper. Depending on the chosen interpreter, it simply ignores instructions on vertical stems to arrive at very similar results.",
            "title": "interpreter-version"
        },
        {
            "location": "/ft2-properties/index.html#glyph-to-script-map",
            "text": "Experimental only  The auto-hinter provides various script modules to hint glyphs. Examples of supported scripts are Latin or CJK. Before a glyph is auto-hinted, the Unicode character map of the font gets examined, and the script is then determined based on Unicode character ranges, see below.  OpenType fonts, however, often provide much more glyphs than character codes (small caps, superscripts, ligatures, swashes, etc.), to be controlled by so-called \u2018features\u2019. Handling OpenType features can be quite complicated and thus needs a separate library on top of FreeType.  The mapping between glyph indices and scripts (in the auto-hinter sense, see the  FT_AUTOHINTER_SCRIPT_XXX  values) is stored as an array with  num_glyphs  elements, as found in the font's  FT_Face  structure. The \u2018glyph-to-script-map\u2019 property returns a pointer to this array, which can be modified as needed. Note that the modification should happen before the first glyph gets processed by the auto-hinter so that the global analysis of the font shapes actually uses the modified mapping.",
            "title": "glyph-to-script-map"
        },
        {
            "location": "/ft2-properties/index.html#ft_autohinter_script_xxx",
            "text": "Defined in FT_DRIVER_H (freetype/ftdriver.h).   \n# define   FT_AUTOHINTER_SCRIPT_NONE    0\n# define   FT_AUTOHINTER_SCRIPT_LATIN   1\n# define   FT_AUTOHINTER_SCRIPT_CJK     2\n# define   FT_AUTOHINTER_SCRIPT_INDIC   3   Experimental only  A list of constants used for the  glyph-to-script-map  property to specify the script submodule the auto-hinter should use for hinting a particular glyph.",
            "title": "FT_AUTOHINTER_SCRIPT_XXX"
        },
        {
            "location": "/ft2-properties/index.html#ft_prop_glyphtoscriptmap",
            "text": "Defined in FT_DRIVER_H (freetype/ftdriver.h).   \n   typedef   struct   FT_Prop_GlyphToScriptMap_\n  {\n     FT_Face      face;\n     FT_UShort *  map;\n\n  }  FT_Prop_GlyphToScriptMap ;   Experimental only  The data exchange structure for the  glyph-to-script-map  property.",
            "title": "FT_Prop_GlyphToScriptMap"
        },
        {
            "location": "/ft2-properties/index.html#fallback-script",
            "text": "Experimental only  If no auto-hinter script module can be assigned to a glyph, a fallback script gets assigned to it (see also the  glyph-to-script-map  property). By default, this is  FT_AUTOHINTER_SCRIPT_CJK . Using the \u2018fallback-script\u2019 property, this fallback value can be changed.",
            "title": "fallback-script"
        },
        {
            "location": "/ft2-properties/index.html#default-script",
            "text": "Experimental only  If FreeType gets compiled with FT_CONFIG_OPTION_USE_HARFBUZZ to make the HarfBuzz library access OpenType features for getting better glyph coverages, this property sets the (auto-fitter) script to be used for the default (OpenType) script data of a font's GSUB table. Features for the default script are intended for all scripts not explicitly handled in GSUB; an example is a \u2018dlig\u2019 feature, containing the combination of the characters \u2018T\u2019, \u2018E\u2019, and \u2018L\u2019 to form a \u2018TEL\u2019 ligature.  By default, this is  FT_AUTOHINTER_SCRIPT_LATIN . Using the \u2018default-script\u2019 property, this default value can be changed.",
            "title": "default-script"
        },
        {
            "location": "/ft2-properties/index.html#increase-x-height",
            "text": "For ppem values in the range 6\u00a0<= ppem <= \u2018increase-x-height\u2019, round up the font's x\u00a0height much more often than normally. If the value is set to\u00a00, which is the default, this feature is switched off. Use this property to improve the legibility of small font sizes if necessary.",
            "title": "increase-x-height"
        },
        {
            "location": "/ft2-properties/index.html#ft_prop_increasexheight",
            "text": "Defined in FT_DRIVER_H (freetype/ftdriver.h).   \n   typedef   struct   FT_Prop_IncreaseXHeight_\n  {\n     FT_Face   face;\n     FT_UInt   limit;\n\n  }  FT_Prop_IncreaseXHeight ;   The data exchange structure for the  increase-x-height  property.",
            "title": "FT_Prop_IncreaseXHeight"
        },
        {
            "location": "/ft2-properties/index.html#warping",
            "text": "Experimental only  If FreeType gets compiled with option AF_CONFIG_OPTION_USE_WARPER to activate the warp hinting code in the auto-hinter, this property switches warping on and off.  Warping only works in \u2018normal\u2019 auto-hinting mode replacing it. The idea of the code is to slightly scale and shift a glyph along the non-hinted dimension (which is usually the horizontal axis) so that as much of its segments are aligned (more or less) to the grid. To find out a glyph's optimal scaling and shifting value, various parameter combinations are tried and scored.  By default, warping is off.",
            "title": "warping"
        },
        {
            "location": "/ft2-parameter_tags/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb Parameter Tags\n\n\n\n\nParameter Tags\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains macros for the \nFT_Parameter\n structure that are used with various functions to activate some special functionality or different behaviour of various components of FreeType.\n\n\nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY\n \\\n          \nFT_MAKE_TAG\n( 'i', 'g', 'p', 'f' )\n\n  /* this constant is deprecated */\n#\ndefine\n FT_PARAM_TAG_IGNORE_PREFERRED_FAMILY \\\n          \nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY\n\n\n\n\n\n\n\nA tag for \nFT_Parameter\n to make \nFT_Open_Face\n ignore typographic family names in the \u2018name\u2019 table (introduced in OpenType version 1.4). Use this for backward compatibility with legacy systems that have a four-faces-per-family restriction.\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY\n \\\n          \nFT_MAKE_TAG\n( 'i', 'g', 'p', 's' )\n\n  /* this constant is deprecated */\n#\ndefine\n FT_PARAM_TAG_IGNORE_PREFERRED_SUBFAMILY \\\n          \nFT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY\n\n\n\n\n\n\n\nA tag for \nFT_Parameter\n to make \nFT_Open_Face\n ignore typographic subfamily names in the \u2018name\u2019 table (introduced in OpenType version 1.4). Use this for backward compatibility with legacy systems that have a four-faces-per-family restriction.\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_PARAM_TAG_INCREMENTAL\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_INCREMENTAL\n \\\n          \nFT_MAKE_TAG\n( 'i', 'n', 'c', 'r' )\n\n\n\n\n\n\nAn \nFT_Parameter\n tag to be used with \nFT_Open_Face\n to indicate incremental glyph loading.\n\n\n\n\n\nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\n \\\n          \nFT_MAKE_TAG\n( 'l', 'c', 'd', 'f' )\n\n\n\n\n\n\nAn \nFT_Parameter\n tag to be used with \nFT_Face_Properties\n. The corresponding argument specifies the five LCD filter weights for a given face (if using \nFT_LOAD_TARGET_LCD\n, for example), overriding the global default values or the values set up with \nFT_Library_SetLcdFilterWeights\n.\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_PARAM_TAG_RANDOM_SEED\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_RANDOM_SEED\n \\\n          \nFT_MAKE_TAG\n( 's', 'e', 'e', 'd' )\n\n\n\n\n\n\nAn \nFT_Parameter\n tag to be used with \nFT_Face_Properties\n. The corresponding 32bit signed integer argument overrides the font driver's random seed value with a face-specific one; see \nrandom-seed\n.\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_PARAM_TAG_STEM_DARKENING\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_STEM_DARKENING\n \\\n          \nFT_MAKE_TAG\n( 'd', 'a', 'r', 'k' )\n\n\n\n\n\n\nAn \nFT_Parameter\n tag to be used with \nFT_Face_Properties\n. The corresponding Boolean argument specifies whether to apply stem darkening, overriding the global default values or the values set up with \nFT_Property_Set\n (see \nno-stem-darkening\n).\n\n\nThis is a passive setting that only takes effect if the font driver or autohinter honors it, which the CFF, Type\u00a01, and CID drivers always do, but the autohinter only in \u2018light\u2019 hinting mode (as of version 2.9).\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_PARAM_TAG_UNPATENTED_HINTING\n\u00b6\n\n\n\n\n\n#\ndefine\n \nFT_PARAM_TAG_UNPATENTED_HINTING\n \\\n          \nFT_MAKE_TAG\n( 'u', 'n', 'p', 'a' )\n\n\n\n\n\n\nDeprecated, no effect.\n\n\nPreviously: A constant used as the tag of an \nFT_Parameter\n structure to indicate that unpatented methods only should be used by the TrueType bytecode interpreter for a typeface opened by \nFT_Open_Face\n.",
            "title": "Parameter Tags"
        },
        {
            "location": "/ft2-parameter_tags/index.html#parameter-tags",
            "text": "",
            "title": "Parameter Tags"
        },
        {
            "location": "/ft2-parameter_tags/index.html#synopsis",
            "text": "This section contains macros for the  FT_Parameter  structure that are used with various functions to activate some special functionality or different behaviour of various components of FreeType.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_ignore_typographic_family",
            "text": "# define   FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY  \\\n           FT_MAKE_TAG ( 'i', 'g', 'p', 'f' )\n\n  /* this constant is deprecated */\n# define  FT_PARAM_TAG_IGNORE_PREFERRED_FAMILY \\\n           FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY    A tag for  FT_Parameter  to make  FT_Open_Face  ignore typographic family names in the \u2018name\u2019 table (introduced in OpenType version 1.4). Use this for backward compatibility with legacy systems that have a four-faces-per-family restriction.",
            "title": "FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_ignore_typographic_subfamily",
            "text": "# define   FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY  \\\n           FT_MAKE_TAG ( 'i', 'g', 'p', 's' )\n\n  /* this constant is deprecated */\n# define  FT_PARAM_TAG_IGNORE_PREFERRED_SUBFAMILY \\\n           FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY    A tag for  FT_Parameter  to make  FT_Open_Face  ignore typographic subfamily names in the \u2018name\u2019 table (introduced in OpenType version 1.4). Use this for backward compatibility with legacy systems that have a four-faces-per-family restriction.",
            "title": "FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_incremental",
            "text": "# define   FT_PARAM_TAG_INCREMENTAL  \\\n           FT_MAKE_TAG ( 'i', 'n', 'c', 'r' )   An  FT_Parameter  tag to be used with  FT_Open_Face  to indicate incremental glyph loading.",
            "title": "FT_PARAM_TAG_INCREMENTAL"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_lcd_filter_weights",
            "text": "# define   FT_PARAM_TAG_LCD_FILTER_WEIGHTS  \\\n           FT_MAKE_TAG ( 'l', 'c', 'd', 'f' )   An  FT_Parameter  tag to be used with  FT_Face_Properties . The corresponding argument specifies the five LCD filter weights for a given face (if using  FT_LOAD_TARGET_LCD , for example), overriding the global default values or the values set up with  FT_Library_SetLcdFilterWeights .",
            "title": "FT_PARAM_TAG_LCD_FILTER_WEIGHTS"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_random_seed",
            "text": "# define   FT_PARAM_TAG_RANDOM_SEED  \\\n           FT_MAKE_TAG ( 's', 'e', 'e', 'd' )   An  FT_Parameter  tag to be used with  FT_Face_Properties . The corresponding 32bit signed integer argument overrides the font driver's random seed value with a face-specific one; see  random-seed .",
            "title": "FT_PARAM_TAG_RANDOM_SEED"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_stem_darkening",
            "text": "# define   FT_PARAM_TAG_STEM_DARKENING  \\\n           FT_MAKE_TAG ( 'd', 'a', 'r', 'k' )   An  FT_Parameter  tag to be used with  FT_Face_Properties . The corresponding Boolean argument specifies whether to apply stem darkening, overriding the global default values or the values set up with  FT_Property_Set  (see  no-stem-darkening ).  This is a passive setting that only takes effect if the font driver or autohinter honors it, which the CFF, Type\u00a01, and CID drivers always do, but the autohinter only in \u2018light\u2019 hinting mode (as of version 2.9).",
            "title": "FT_PARAM_TAG_STEM_DARKENING"
        },
        {
            "location": "/ft2-parameter_tags/index.html#ft_param_tag_unpatented_hinting",
            "text": "# define   FT_PARAM_TAG_UNPATENTED_HINTING  \\\n           FT_MAKE_TAG ( 'u', 'n', 'p', 'a' )   Deprecated, no effect.  Previously: A constant used as the tag of an  FT_Parameter  structure to indicate that unpatented methods only should be used by the TrueType bytecode interpreter for a typeface opened by  FT_Open_Face .",
            "title": "FT_PARAM_TAG_UNPATENTED_HINTING"
        },
        {
            "location": "/ft2-lcd_rendering/index.html",
            "text": "Docs\n \u00bb \nControlling FreeType Modules\n \u00bb Subpixel Rendering\n\n\n\n\nSubpixel Rendering\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nFreeType provides two alternative subpixel rendering technologies. Should you #define FT_CONFIG_OPTION_SUBPIXEL_RENDERING in your \nftoption.h\n, this enables patented ClearType-style rendering. Otherwise, Harmony LCD rendering is enabled. These technologies are controlled differently and API described below, although always available, performs its function when appropriate method is enabled and does nothing otherwise.\n\n\nClearType-style LCD rendering exploits the color-striped structure of LCD pixels, increasing the available resolution in the direction of the stripe (usually horizontal RGB) by a factor of\u00a03. Using the subpixels coverages unfiltered can create severe color fringes especially when rendering thin features. Indeed, to produce black-on-white text, the nearby color subpixels must be dimmed equally.\n\n\nA good 5-tap FIR filter should be applied to subpixel coverages regardless of pixel boundaries and should have these properties:\n\n\n1) It should be symmetrical, like {\u00a0a, b, c, b, a\u00a0}, to avoid any shifts in appearance.\n\n\n2) It should be color-balanced, meaning a\u00a0+ b\u00a0=\u00a0c, to reduce color fringes by distributing the computed coverage for one subpixel to all subpixels equally.\n\n\n3) It should be normalized, meaning 2a\u00a0+ 2b\u00a0+ c\u00a0=\u00a01.0 to maintain overall brightness.\n\n\nBoxy 3-tap filter {0, \u2153, \u2153, \u2153, 0} is sharper but is less forgiving of non-ideal gamma curves of a screen (and viewing angles), beveled filters are fuzzier but more tolerant.\n\n\nUse the \nFT_Library_SetLcdFilter\n or \nFT_Library_SetLcdFilterWeights\n API to specify a low-pass filter, which is then applied to subpixel-rendered bitmaps generated through \nFT_Render_Glyph\n.\n\n\nHarmony LCD rendering is suitable to panels with any regular subpixel structure, not just monitors with 3 color striped subpixels, as long as the color subpixels have fixed positions relative to the pixel center. In this case, each color channel is then rendered separately after shifting the outline opposite to the subpixel shift so that the coverage maps are aligned. This method is immune to color fringes because the shifts do not change integral coverage.\n\n\nThe subpixel geometry must be specified by xy-coordinates for each subpixel. By convention they may come in the RGB order: {{-\u2153, 0}, {0, 0}, {\u2153, 0}} for standard RGB striped panel or {{-\u2159, \u00bc}, {-\u2159, -\u00bc}, {\u2153, 0}} for a certain PenTile panel.\n\n\nUse the \nFT_Library_SetLcdGeometry\n API to specify subpixel positions. If one follows the RGB order convention, the same order applies to the resulting \nFT_PIXEL_MODE_LCD\n and \nFT_PIXEL_MODE_LCD_V\n bitmaps. Note, however, that the coordinate frame for the latter must be rotated clockwise. Harmony with default LCD geometry is equivalent to ClearType with light filter.\n\n\nAs a result of ClearType filtering or Harmony rendering, the dimensions of LCD bitmaps can be either wider or taller than the dimensions of the corresponding outline with regard to the pixel grid. For example, for \nFT_RENDER_MODE_LCD\n, the filter adds 2\u00a0subpixels to the left, and 2\u00a0subpixels to the right. The bitmap offset values are adjusted accordingly, so clients shouldn't need to modify their layout and glyph positioning code when enabling the filter.\n\n\nThe ClearType and Harmony rendering is applicable to glyph bitmaps rendered through \nFT_Render_Glyph\n, \nFT_Load_Glyph\n, \nFT_Load_Char\n, and \nFT_Glyph_To_Bitmap\n, when \nFT_RENDER_MODE_LCD\n or \nFT_RENDER_MODE_LCD_V\n is specified. This API does not control \nFT_Outline_Render\n and \nFT_Outline_Get_Bitmap\n.\n\n\nThe described algorithms can completely remove color artefacts when combined with gamma-corrected alpha blending in linear space. Each of the 3\u00a0alpha values (subpixels) must by independently used to blend one color channel. That is, red alpha blends the red channel of the text color with the red channel of the background pixel.\n\n\nFT_LcdFilter\n\u00b6\n\n\nDefined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_LcdFilter_\n  {\n    \nFT_LCD_FILTER_NONE\n    = 0,\n    \nFT_LCD_FILTER_DEFAULT\n = 1,\n    \nFT_LCD_FILTER_LIGHT\n   = 2,\n    \nFT_LCD_FILTER_LEGACY1\n = 3,\n    \nFT_LCD_FILTER_LEGACY\n  = 16,\n\n    FT_LCD_FILTER_MAX   /* do not remove */\n\n  } \nFT_LcdFilter\n;\n\n\n\n\n\n\nA list of values to identify various types of LCD filters.\n\n\nvalues\n\n\n\n\n\nFT_LCD_FILTER_NONE\n\n\nDo not perform filtering. When used with subpixel rendering, this results in sometimes severe color fringes.\n\n\n\n\nFT_LCD_FILTER_DEFAULT\n\n\nThis is a beveled, normalized, and color-balanced five-tap filter with weights of [0x08 0x4D 0x56 0x4D 0x08] in 1/256th units.\n\n\n\n\nFT_LCD_FILTER_LIGHT\n\n\nthis is a boxy, normalized, and color-balanced three-tap filter with weights of [0x00 0x55 0x56 0x55 0x00] in 1/256th units.\n\n\n\n\nFT_LCD_FILTER_LEGACY\n\n\n\n\n\nFT_LCD_FILTER_LEGACY1\n\n\nThis filter corresponds to the original libXft color filter. It provides high contrast output but can exhibit really bad color fringes if glyphs are not extremely well hinted to the pixel grid. This filter is only provided for comparison purposes, and might be disabled or stay unsupported in the future. The second value is provided for compatibility with FontConfig, which historically used different enumeration, sometimes incorrectly forwarded to FreeType.\n\n\n\n\n\n\n\nsince\n\n\n\n2.3.0 (\nFT_LCD_FILTER_LEGACY1\n since 2.6.2)\n\n\n\n\n\nFT_Library_SetLcdFilter\n\u00b6\n\n\nDefined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Library_SetLcdFilter\n( \nFT_Library\n    library,\n                           \nFT_LcdFilter\n  filter );\n\n\n\n\n\n\nThis function is used to apply color filtering to LCD decimated bitmaps, like the ones used when calling \nFT_Render_Glyph\n with \nFT_RENDER_MODE_LCD\n or \nFT_RENDER_MODE_LCD_V\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the target library instance.\n\n\n\n\nfilter\n\n\nThe filter type.\nYou can use \nFT_LCD_FILTER_NONE\n here to disable this feature, or \nFT_LCD_FILTER_DEFAULT\n to use a default filter that should work well on most LCD screens.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis feature is always disabled by default. Clients must make an explicit call to this function with a \u2018filter\u2019 value other than \nFT_LCD_FILTER_NONE\n in order to enable it.\n\n\nDue to \nPATENTS\n covering subpixel rendering, this function doesn't do anything except returning \nFT_Err_Unimplemented_Feature\n if the configuration macro FT_CONFIG_OPTION_SUBPIXEL_RENDERING is not defined in your build of the library, which should correspond to all default builds of FreeType.\n\n\nsince\n\n\n\n2.3.0\n\n\n\n\n\nFT_Library_SetLcdFilterWeights\n\u00b6\n\n\nDefined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Library_SetLcdFilterWeights\n( \nFT_Library\n      library,\n                                  \nunsigned\n \nchar\n  *weights );\n\n\n\n\n\n\nThis function can be used to enable LCD filter with custom weights, instead of using presets in \nFT_Library_SetLcdFilter\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the target library instance.\n\n\n\n\nweights\n\n\nA pointer to an array; the function copies the first five bytes and uses them to specify the filter weights in 1/256th units.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nDue to \nPATENTS\n covering subpixel rendering, this function doesn't do anything except returning \nFT_Err_Unimplemented_Feature\n if the configuration macro FT_CONFIG_OPTION_SUBPIXEL_RENDERING is not defined in your build of the library, which should correspond to all default builds of FreeType.\n\n\nLCD filter weights can also be set per face using \nFT_Face_Properties\n with \nFT_PARAM_TAG_LCD_FILTER_WEIGHTS\n.\n\n\nsince\n\n\n\n2.4.0\n\n\n\n\n\nFT_LcdFiveTapFilter\n\u00b6\n\n\nDefined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).\n\n\n\n\n\n#\ndefine\n FT_LCD_FILTER_FIVE_TAPS  5\n\n  \ntypedef\n \nFT_Byte\n  \nFT_LcdFiveTapFilter\n[FT_LCD_FILTER_FIVE_TAPS];\n\n\n\n\n\n\nA typedef for passing the five LCD filter weights to \nFT_Face_Properties\n within an \nFT_Parameter\n structure.\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_Library_SetLcdGeometry\n\u00b6\n\n\nDefined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Library_SetLcdGeometry\n( \nFT_Library\n  library,\n                             \nFT_Vector\n   sub[3] );\n\n\n\n\n\n\nThis function can be used to modify default positions of color subpixels, which controls Harmony LCD rendering.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the target library instance.\n\n\n\n\nsub\n\n\nA pointer to an array of 3 vectors in 26.6 fractional pixel format; the function modifies the default values, see the note below.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nSubpixel geometry examples:\n\n\n\n\n\n\n{{-21, 0}, {0, 0}, {21, 0}} is the default, corresponding to 3 color stripes shifted by a third of a pixel. This could be an RGB panel.\n\n\n\n\n\n\n{{21, 0}, {0, 0}, {-21, 0}} looks the same as the default but can specify a BGR panel instead, while keeping the bitmap in the same RGB888 format.\n\n\n\n\n\n\n{{0, 21}, {0, 0}, {0, -21}} is the vertical RGB, but the bitmap stays RGB888 as a result.\n\n\n\n\n\n\n{{-11, 16}, {-11, -16}, {22, 0}} is a certain PenTile arrangement.\n\n\n\n\n\n\nThis function does nothing and returns \nFT_Err_Unimplemented_Feature\n in the context of ClearType-style subpixel rendering when FT_CONFIG_OPTION_SUBPIXEL_RENDERING is defined in your build of the library.\n\n\nsince\n\n\n\n2.10.0",
            "title": "Subpixel Rendering"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#subpixel-rendering",
            "text": "",
            "title": "Subpixel Rendering"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#synopsis",
            "text": "FreeType provides two alternative subpixel rendering technologies. Should you #define FT_CONFIG_OPTION_SUBPIXEL_RENDERING in your  ftoption.h , this enables patented ClearType-style rendering. Otherwise, Harmony LCD rendering is enabled. These technologies are controlled differently and API described below, although always available, performs its function when appropriate method is enabled and does nothing otherwise.  ClearType-style LCD rendering exploits the color-striped structure of LCD pixels, increasing the available resolution in the direction of the stripe (usually horizontal RGB) by a factor of\u00a03. Using the subpixels coverages unfiltered can create severe color fringes especially when rendering thin features. Indeed, to produce black-on-white text, the nearby color subpixels must be dimmed equally.  A good 5-tap FIR filter should be applied to subpixel coverages regardless of pixel boundaries and should have these properties:  1) It should be symmetrical, like {\u00a0a, b, c, b, a\u00a0}, to avoid any shifts in appearance.  2) It should be color-balanced, meaning a\u00a0+ b\u00a0=\u00a0c, to reduce color fringes by distributing the computed coverage for one subpixel to all subpixels equally.  3) It should be normalized, meaning 2a\u00a0+ 2b\u00a0+ c\u00a0=\u00a01.0 to maintain overall brightness.  Boxy 3-tap filter {0, \u2153, \u2153, \u2153, 0} is sharper but is less forgiving of non-ideal gamma curves of a screen (and viewing angles), beveled filters are fuzzier but more tolerant.  Use the  FT_Library_SetLcdFilter  or  FT_Library_SetLcdFilterWeights  API to specify a low-pass filter, which is then applied to subpixel-rendered bitmaps generated through  FT_Render_Glyph .  Harmony LCD rendering is suitable to panels with any regular subpixel structure, not just monitors with 3 color striped subpixels, as long as the color subpixels have fixed positions relative to the pixel center. In this case, each color channel is then rendered separately after shifting the outline opposite to the subpixel shift so that the coverage maps are aligned. This method is immune to color fringes because the shifts do not change integral coverage.  The subpixel geometry must be specified by xy-coordinates for each subpixel. By convention they may come in the RGB order: {{-\u2153, 0}, {0, 0}, {\u2153, 0}} for standard RGB striped panel or {{-\u2159, \u00bc}, {-\u2159, -\u00bc}, {\u2153, 0}} for a certain PenTile panel.  Use the  FT_Library_SetLcdGeometry  API to specify subpixel positions. If one follows the RGB order convention, the same order applies to the resulting  FT_PIXEL_MODE_LCD  and  FT_PIXEL_MODE_LCD_V  bitmaps. Note, however, that the coordinate frame for the latter must be rotated clockwise. Harmony with default LCD geometry is equivalent to ClearType with light filter.  As a result of ClearType filtering or Harmony rendering, the dimensions of LCD bitmaps can be either wider or taller than the dimensions of the corresponding outline with regard to the pixel grid. For example, for  FT_RENDER_MODE_LCD , the filter adds 2\u00a0subpixels to the left, and 2\u00a0subpixels to the right. The bitmap offset values are adjusted accordingly, so clients shouldn't need to modify their layout and glyph positioning code when enabling the filter.  The ClearType and Harmony rendering is applicable to glyph bitmaps rendered through  FT_Render_Glyph ,  FT_Load_Glyph ,  FT_Load_Char , and  FT_Glyph_To_Bitmap , when  FT_RENDER_MODE_LCD  or  FT_RENDER_MODE_LCD_V  is specified. This API does not control  FT_Outline_Render  and  FT_Outline_Get_Bitmap .  The described algorithms can completely remove color artefacts when combined with gamma-corrected alpha blending in linear space. Each of the 3\u00a0alpha values (subpixels) must by independently used to blend one color channel. That is, red alpha blends the red channel of the text color with the red channel of the background pixel.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#ft_lcdfilter",
            "text": "Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).   \n   typedef   enum   FT_LcdFilter_\n  {\n     FT_LCD_FILTER_NONE     = 0,\n     FT_LCD_FILTER_DEFAULT  = 1,\n     FT_LCD_FILTER_LIGHT    = 2,\n     FT_LCD_FILTER_LEGACY1  = 3,\n     FT_LCD_FILTER_LEGACY   = 16,\n\n    FT_LCD_FILTER_MAX   /* do not remove */\n\n  }  FT_LcdFilter ;   A list of values to identify various types of LCD filters.",
            "title": "FT_LcdFilter"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#ft_library_setlcdfilter",
            "text": "Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Library_SetLcdFilter (  FT_Library     library,\n                            FT_LcdFilter   filter );   This function is used to apply color filtering to LCD decimated bitmaps, like the ones used when calling  FT_Render_Glyph  with  FT_RENDER_MODE_LCD  or  FT_RENDER_MODE_LCD_V .",
            "title": "FT_Library_SetLcdFilter"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#ft_library_setlcdfilterweights",
            "text": "Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Library_SetLcdFilterWeights (  FT_Library       library,\n                                   unsigned   char   *weights );   This function can be used to enable LCD filter with custom weights, instead of using presets in  FT_Library_SetLcdFilter .",
            "title": "FT_Library_SetLcdFilterWeights"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#ft_lcdfivetapfilter",
            "text": "Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).   \n# define  FT_LCD_FILTER_FIVE_TAPS  5\n\n   typedef   FT_Byte    FT_LcdFiveTapFilter [FT_LCD_FILTER_FIVE_TAPS];   A typedef for passing the five LCD filter weights to  FT_Face_Properties  within an  FT_Parameter  structure.",
            "title": "FT_LcdFiveTapFilter"
        },
        {
            "location": "/ft2-lcd_rendering/index.html#ft_library_setlcdgeometry",
            "text": "Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Library_SetLcdGeometry (  FT_Library   library,\n                              FT_Vector    sub[3] );   This function can be used to modify default positions of color subpixels, which controls Harmony LCD rendering.",
            "title": "FT_Library_SetLcdGeometry"
        },
        {
            "location": "/ft2-cache_subsystem/index.html",
            "text": "Docs\n \u00bb \nCache Sub-System\n \u00bb Cache Sub-System\n\n\n\n\nCache Sub-System\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section describes the FreeType\u00a02 cache sub-system, which is used to limit the number of concurrently opened \nFT_Face\n and \nFT_Size\n objects, as well as caching information like character maps and glyph images while limiting their maximum memory usage.\n\n\nNote that all types and functions begin with the \u2018FTC_\u2019 prefix.\n\n\nThe cache is highly portable and thus doesn't know anything about the fonts installed on your system, or how to access them. This implies the following scheme:\n\n\nFirst, available or installed font faces are uniquely identified by \nFTC_FaceID\n values, provided to the cache by the client. Note that the cache only stores and compares these values, and doesn't try to interpret them in any way.\n\n\nSecond, the cache calls, only when needed, a client-provided function to convert an \nFTC_FaceID\n into a new \nFT_Face\n object. The latter is then completely managed by the cache, including its termination through \nFT_Done_Face\n. To monitor termination of face objects, the finalizer callback in the \u2018generic\u2019 field of the \nFT_Face\n object can be used, which might also be used to store the \nFTC_FaceID\n of the face.\n\n\nClients are free to map face IDs to anything else. The most simple usage is to associate them to a (pathname,face_index) pair that is used to call \nFT_New_Face\n. However, more complex schemes are also possible.\n\n\nNote that for the cache to work correctly, the face ID values must be \npersistent\n, which means that the contents they point to should not change at runtime, or that their value should not become invalid.\n\n\nIf this is unavoidable (e.g., when a font is uninstalled at runtime), you should call \nFTC_Manager_RemoveFaceID\n as soon as possible, to let the cache get rid of any references to the old \nFTC_FaceID\n it may keep internally. Failure to do so will lead to incorrect behaviour or even crashes.\n\n\nTo use the cache, start with calling \nFTC_Manager_New\n to create a new \nFTC_Manager\n object, which models a single cache instance. You can then look up \nFT_Face\n and \nFT_Size\n objects with \nFTC_Manager_LookupFace\n and \nFTC_Manager_LookupSize\n, respectively.\n\n\nIf you want to use the charmap caching, call \nFTC_CMapCache_New\n, then later use \nFTC_CMapCache_Lookup\n to perform the equivalent of \nFT_Get_Char_Index\n, only much faster.\n\n\nIf you want to use the \nFT_Glyph\n caching, call \nFTC_ImageCache\n, then later use \nFTC_ImageCache_Lookup\n to retrieve the corresponding \nFT_Glyph\n objects from the cache.\n\n\nIf you need lots of small bitmaps, it is much more memory efficient to call \nFTC_SBitCache_New\n followed by \nFTC_SBitCache_Lookup\n. This returns \nFTC_SBitRec\n structures, which are used to store small bitmaps directly. (A small bitmap is one whose metrics and dimensions all fit into 8-bit integers).\n\n\nWe hope to also provide a kerning cache in the near future.\n\n\nFTC_Manager\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_ManagerRec_*  \nFTC_Manager\n;\n\n\n\n\n\n\nThis object corresponds to one instance of the cache-subsystem. It is used to cache one or more \nFT_Face\n objects, along with corresponding \nFT_Size\n objects.\n\n\nThe manager intentionally limits the total number of opened \nFT_Face\n and \nFT_Size\n objects to control memory usage. See the \nmax_faces\n and \nmax_sizes\n parameters of \nFTC_Manager_New\n.\n\n\nThe manager is also used to cache \u2018nodes\u2019 of various types while limiting their total memory usage.\n\n\nAll limitations are enforced by keeping lists of managed objects in most-recently-used order, and flushing old nodes to make room for new ones.\n\n\n\n\n\nFTC_FaceID\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Pointer\n  \nFTC_FaceID\n;\n\n\n\n\n\n\nAn opaque pointer type that is used to identity face objects. The contents of such objects is application-dependent.\n\n\nThese pointers are typically used to point to a user-defined structure containing a font file path, and face index.\n\n\nnote\n\n\n\nNever use NULL as a valid \nFTC_FaceID\n.\n\n\nFace IDs are passed by the client to the cache manager that calls, when needed, the \nFTC_Face_Requester\n to translate them into new \nFT_Face\n objects.\n\n\nIf the content of a given face ID changes at runtime, or if the value becomes invalid (e.g., when uninstalling a font), you should immediately call \nFTC_Manager_RemoveFaceID\n before any other cache function.\n\n\nFailure to do so will result in incorrect behaviour or even memory leaks and crashes.\n\n\n\n\n\nFTC_Face_Requester\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Error\n\n  (*\nFTC_Face_Requester\n)( \nFTC_FaceID\n  face_id,\n                         \nFT_Library\n  library,\n                         \nFT_Pointer\n  req_data,\n                         \nFT_Face\n*    aface );\n\n\n\n\n\n\nA callback function provided by client applications. It is used by the cache manager to translate a given \nFTC_FaceID\n into a new valid \nFT_Face\n object, on demand.\n\n\ninput\n\n\n\n\n\nface_id\n\n\nThe face ID to resolve.\n\n\n\n\nlibrary\n\n\nA handle to a FreeType library object.\n\n\n\n\nreq_data\n\n\nApplication-provided request data (see note below).\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA new \nFT_Face\n handle.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe third parameter \nreq_data\n is the same as the one passed by the client when \nFTC_Manager_New\n is called.\n\n\nThe face requester should not perform funny things on the returned face object, like creating a new \nFT_Size\n for it, or setting a transformation through \nFT_Set_Transform\n!\n\n\n\n\n\nFTC_Manager_New\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_Manager_New\n( \nFT_Library\n          library,\n                   \nFT_UInt\n             max_faces,\n                   \nFT_UInt\n             max_sizes,\n                   \nFT_ULong\n            max_bytes,\n                   \nFTC_Face_Requester\n  requester,\n                   \nFT_Pointer\n          req_data,\n                   \nFTC_Manager\n        *amanager );\n\n\n\n\n\n\nCreate a new cache manager.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nThe parent FreeType library handle to use.\n\n\n\n\nmax_faces\n\n\nMaximum number of opened \nFT_Face\n objects managed by this cache instance. Use\u00a00 for defaults.\n\n\n\n\nmax_sizes\n\n\nMaximum number of opened \nFT_Size\n objects managed by this cache instance. Use\u00a00 for defaults.\n\n\n\n\nmax_bytes\n\n\nMaximum number of bytes to use for cached data nodes. Use\u00a00 for defaults. Note that this value does not account for managed \nFT_Face\n and \nFT_Size\n objects.\n\n\n\n\nrequester\n\n\nAn application-provided callback used to translate face IDs into real \nFT_Face\n objects.\n\n\n\n\nreq_data\n\n\nA generic pointer that is passed to the requester each time it is called (see \nFTC_Face_Requester\n).\n\n\n\n\n\n\n\noutput\n\n\n\n\n\namanager\n\n\nA handle to a new manager object. 0\u00a0in case of failure.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFTC_Manager_Reset\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFTC_Manager_Reset\n( \nFTC_Manager\n  manager );\n\n\n\n\n\n\nEmpty a given cache manager. This simply gets rid of all the currently cached \nFT_Face\n and \nFT_Size\n objects within the manager.\n\n\ninout\n\n\n\n\n\nmanager\n\n\nA handle to the manager.\n\n\n\n\n\n\n\n\n\n\nFTC_Manager_Done\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFTC_Manager_Done\n( \nFTC_Manager\n  manager );\n\n\n\n\n\n\nDestroy a given manager after emptying it.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nA handle to the target cache manager object.\n\n\n\n\n\n\n\n\n\n\nFTC_Manager_LookupFace\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_Manager_LookupFace\n( \nFTC_Manager\n  manager,\n                          \nFTC_FaceID\n   face_id,\n                          \nFT_Face\n     *aface );\n\n\n\n\n\n\nRetrieve the \nFT_Face\n object that corresponds to a given face ID through a cache manager.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nA handle to the cache manager.\n\n\n\n\nface_id\n\n\nThe ID of the face object.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naface\n\n\nA handle to the face object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe returned \nFT_Face\n object is always owned by the manager. You should never try to discard it yourself.\n\n\nThe \nFT_Face\n object doesn't necessarily have a current size object (i.e., face->size can be\u00a00). If you need a specific \u2018font size\u2019, use \nFTC_Manager_LookupSize\n instead.\n\n\nNever change the face's transformation matrix (i.e., never call the \nFT_Set_Transform\n function) on a returned face! If you need to transform glyphs, do it yourself after glyph loading.\n\n\nWhen you perform a lookup, out-of-memory errors are detected \nwithin\n the lookup and force incremental flushes of the cache until enough memory is released for the lookup to succeed.\n\n\nIf a lookup fails with \nFT_Err_Out_Of_Memory\n the cache has already been completely flushed, and still no memory was available for the operation.\n\n\n\n\n\nFTC_Manager_LookupSize\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_Manager_LookupSize\n( \nFTC_Manager\n  manager,\n                          \nFTC_Scaler\n   scaler,\n                          \nFT_Size\n     *asize );\n\n\n\n\n\n\nRetrieve the \nFT_Size\n object that corresponds to a given \nFTC_ScalerRec\n pointer through a cache manager.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nA handle to the cache manager.\n\n\n\n\nscaler\n\n\nA scaler handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nasize\n\n\nA handle to the size object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe returned \nFT_Size\n object is always owned by the manager. You should never try to discard it by yourself.\n\n\nYou can access the parent \nFT_Face\n object simply as \nsize->face\n if you need it. Note that this object is also owned by the manager.\n\n\nnote\n\n\n\nWhen you perform a lookup, out-of-memory errors are detected \nwithin\n the lookup and force incremental flushes of the cache until enough memory is released for the lookup to succeed.\n\n\nIf a lookup fails with \nFT_Err_Out_Of_Memory\n the cache has already been completely flushed, and still no memory is available for the operation.\n\n\n\n\n\nFTC_Manager_RemoveFaceID\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFTC_Manager_RemoveFaceID\n( \nFTC_Manager\n  manager,\n                            \nFTC_FaceID\n   face_id );\n\n\n\n\n\n\nA special function used to indicate to the cache manager that a given \nFTC_FaceID\n is no longer valid, either because its content changed, or because it was deallocated or uninstalled.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nThe cache manager handle.\n\n\n\n\nface_id\n\n\nThe \nFTC_FaceID\n to be removed.\n\n\n\n\n\n\n\nnote\n\n\n\nThis function flushes all nodes from the cache corresponding to this \nface_id\n, with the exception of nodes with a non-null reference count.\n\n\nSuch nodes are however modified internally so as to never appear in later lookups with the same \nface_id\n value, and to be immediately destroyed when released by all their users.\n\n\n\n\n\nFTC_Node\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_NodeRec_*  \nFTC_Node\n;\n\n\n\n\n\n\nAn opaque handle to a cache node object. Each cache node is reference-counted. A node with a count of\u00a00 might be flushed out of a full cache whenever a lookup request is performed.\n\n\nIf you look up nodes, you have the ability to \u2018acquire\u2019 them, i.e., to increment their reference count. This will prevent the node from being flushed out of the cache until you explicitly \u2018release\u2019 it (see \nFTC_Node_Unref\n).\n\n\nSee also \nFTC_SBitCache_Lookup\n and \nFTC_ImageCache_Lookup\n.\n\n\n\n\n\nFTC_Node_Unref\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFTC_Node_Unref\n( \nFTC_Node\n     node,\n                  \nFTC_Manager\n  manager );\n\n\n\n\n\n\nDecrement a cache node's internal reference count. When the count reaches 0, it is not destroyed but becomes eligible for subsequent cache flushes.\n\n\ninput\n\n\n\n\n\nnode\n\n\nThe cache node handle.\n\n\n\n\nmanager\n\n\nThe cache manager handle.\n\n\n\n\n\n\n\n\n\n\nFTC_ImageCache\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_ImageCacheRec_*  \nFTC_ImageCache\n;\n\n\n\n\n\n\nA handle to a glyph image cache object. They are designed to hold many distinct glyph images while not exceeding a certain memory threshold.\n\n\n\n\n\nFTC_ImageCache_New\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_ImageCache_New\n( \nFTC_Manager\n      manager,\n                      \nFTC_ImageCache\n  *acache );\n\n\n\n\n\n\nCreate a new glyph image cache.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nThe parent manager for the image cache.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nacache\n\n\nA handle to the new glyph image cache object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFTC_ImageCache_Lookup\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_ImageCache_Lookup\n( \nFTC_ImageCache\n  cache,\n                         \nFTC_ImageType\n   type,\n                         \nFT_UInt\n         gindex,\n                         \nFT_Glyph\n       *aglyph,\n                         \nFTC_Node\n       *anode );\n\n\n\n\n\n\nRetrieve a given glyph image from a glyph image cache.\n\n\ninput\n\n\n\n\n\ncache\n\n\nA handle to the source glyph image cache.\n\n\n\n\ntype\n\n\nA pointer to a glyph image type descriptor.\n\n\n\n\ngindex\n\n\nThe glyph index to retrieve.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naglyph\n\n\nThe corresponding \nFT_Glyph\n object. 0\u00a0in case of failure.\n\n\n\n\nanode\n\n\nUsed to return the address of the corresponding cache node after incrementing its reference count (see note below).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe returned glyph is owned and managed by the glyph image cache. Never try to transform or discard it manually! You can however create a copy with \nFT_Glyph_Copy\n and modify the new one.\n\n\nIf \u2018anode\u2019 is \nnot\n NULL, it receives the address of the cache node containing the glyph image, after increasing its reference count. This ensures that the node (as well as the \nFT_Glyph\n) will always be kept in the cache until you call \nFTC_Node_Unref\n to \u2018release\u2019 it.\n\n\nIf \u2018anode\u2019 is NULL, the cache node is left unchanged, which means that the \nFT_Glyph\n could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!\n\n\n\n\n\nFTC_SBit\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_SBitRec_*  \nFTC_SBit\n;\n\n\n\n\n\n\nA handle to a small bitmap descriptor. See the \nFTC_SBitRec\n structure for details.\n\n\n\n\n\nFTC_SBitCache\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_SBitCacheRec_*  \nFTC_SBitCache\n;\n\n\n\n\n\n\nA handle to a small bitmap cache. These are special cache objects used to store small glyph bitmaps (and anti-aliased pixmaps) in a much more efficient way than the traditional glyph image cache implemented by \nFTC_ImageCache\n.\n\n\n\n\n\nFTC_SBitCache_New\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_SBitCache_New\n( \nFTC_Manager\n     manager,\n                     \nFTC_SBitCache\n  *acache );\n\n\n\n\n\n\nCreate a new cache to store small glyph bitmaps.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nA handle to the source cache manager.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nacache\n\n\nA handle to the new sbit cache. NULL in case of error.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFTC_SBitCache_Lookup\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_SBitCache_Lookup\n( \nFTC_SBitCache\n    cache,\n                        \nFTC_ImageType\n    type,\n                        \nFT_UInt\n          gindex,\n                        \nFTC_SBit\n        *sbit,\n                        \nFTC_Node\n        *anode );\n\n\n\n\n\n\nLook up a given small glyph bitmap in a given sbit cache and \u2018lock\u2019 it to prevent its flushing from the cache until needed.\n\n\ninput\n\n\n\n\n\ncache\n\n\nA handle to the source sbit cache.\n\n\n\n\ntype\n\n\nA pointer to the glyph image type descriptor.\n\n\n\n\ngindex\n\n\nThe glyph index.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nsbit\n\n\nA handle to a small bitmap descriptor.\n\n\n\n\nanode\n\n\nUsed to return the address of the corresponding cache node after incrementing its reference count (see note below).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe small bitmap descriptor and its bit buffer are owned by the cache and should never be freed by the application. They might as well disappear from memory on the next cache lookup, so don't treat them as persistent data.\n\n\nThe descriptor's \u2018buffer\u2019 field is set to\u00a00 to indicate a missing glyph bitmap.\n\n\nIf \u2018anode\u2019 is \nnot\n NULL, it receives the address of the cache node containing the bitmap, after increasing its reference count. This ensures that the node (as well as the image) will always be kept in the cache until you call \nFTC_Node_Unref\n to \u2018release\u2019 it.\n\n\nIf \u2018anode\u2019 is NULL, the cache node is left unchanged, which means that the bitmap could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!\n\n\n\n\n\nFTC_CMapCache\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_CMapCacheRec_*  \nFTC_CMapCache\n;\n\n\n\n\n\n\nAn opaque handle used to model a charmap cache. This cache is to hold character codes -> glyph indices mappings.\n\n\n\n\n\nFTC_CMapCache_New\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_CMapCache_New\n( \nFTC_Manager\n     manager,\n                     \nFTC_CMapCache\n  *acache );\n\n\n\n\n\n\nCreate a new charmap cache.\n\n\ninput\n\n\n\n\n\nmanager\n\n\nA handle to the cache manager.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nacache\n\n\nA new cache handle. NULL in case of error.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nLike all other caches, this one will be destroyed with the cache manager.\n\n\n\n\n\nFTC_CMapCache_Lookup\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_UInt\n )\n  \nFTC_CMapCache_Lookup\n( \nFTC_CMapCache\n  cache,\n                        \nFTC_FaceID\n     face_id,\n                        \nFT_Int\n         cmap_index,\n                        \nFT_UInt32\n      char_code );\n\n\n\n\n\n\nTranslate a character code into a glyph index, using the charmap cache.\n\n\ninput\n\n\n\n\n\ncache\n\n\nA charmap cache handle.\n\n\n\n\nface_id\n\n\nThe source face ID.\n\n\n\n\ncmap_index\n\n\nThe index of the charmap in the source face. Any negative value means to use the cache \nFT_Face\n's default charmap.\n\n\n\n\nchar_code\n\n\nThe character code (in the corresponding charmap).\n\n\n\n\n\n\n\nreturn\n\n\n\nGlyph index. 0\u00a0means \u2018no glyph\u2019.\n\n\n\n\n\nFTC_ScalerRec\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FTC_ScalerRec_\n  {\n    \nFTC_FaceID\n  face_id;\n    \nFT_UInt\n     width;\n    \nFT_UInt\n     height;\n    \nFT_Int\n      pixel;\n    \nFT_UInt\n     x_res;\n    \nFT_UInt\n     y_res;\n\n  } \nFTC_ScalerRec\n;\n\n\n\n\n\n\nA structure used to describe a given character size in either pixels or points to the cache manager. See \nFTC_Manager_LookupSize\n.\n\n\nfields\n\n\n\n\n\nface_id\n\n\nThe source face ID.\n\n\n\n\nwidth\n\n\nThe character width.\n\n\n\n\nheight\n\n\nThe character height.\n\n\n\n\npixel\n\n\nA Boolean. If 1, the \u2018width\u2019 and \u2018height\u2019 fields are interpreted as integer pixel character sizes. Otherwise, they are expressed as 1/64th of points.\n\n\n\n\nx_res\n\n\nOnly used when \u2018pixel\u2019 is value\u00a00 to indicate the horizontal resolution in dpi.\n\n\n\n\ny_res\n\n\nOnly used when \u2018pixel\u2019 is value\u00a00 to indicate the vertical resolution in dpi.\n\n\n\n\n\n\n\nnote\n\n\n\nThis type is mainly used to retrieve \nFT_Size\n objects through the cache manager.\n\n\n\n\n\nFTC_Scaler\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_ScalerRec_*  \nFTC_Scaler\n;\n\n\n\n\n\n\nA handle to an \nFTC_ScalerRec\n structure.\n\n\n\n\n\nFTC_ImageTypeRec\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FTC_ImageTypeRec_\n  {\n    \nFTC_FaceID\n  face_id;\n    \nFT_UInt\n     width;\n    \nFT_UInt\n     height;\n    \nFT_Int32\n    flags;\n\n  } \nFTC_ImageTypeRec\n;\n\n\n\n\n\n\nA structure used to model the type of images in a glyph cache.\n\n\nfields\n\n\n\n\n\nface_id\n\n\nThe face ID.\n\n\n\n\nwidth\n\n\nThe width in pixels.\n\n\n\n\nheight\n\n\nThe height in pixels.\n\n\n\n\nflags\n\n\nThe load flags, as in \nFT_Load_Glyph\n.\n\n\n\n\n\n\n\n\n\n\nFTC_ImageType\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FTC_ImageTypeRec_*  \nFTC_ImageType\n;\n\n\n\n\n\n\nA handle to an \nFTC_ImageTypeRec\n structure.\n\n\n\n\n\nFTC_ImageCache_LookupScaler\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_ImageCache_LookupScaler\n( \nFTC_ImageCache\n  cache,\n                               \nFTC_Scaler\n      scaler,\n                               \nFT_ULong\n        load_flags,\n                               \nFT_UInt\n         gindex,\n                               \nFT_Glyph\n       *aglyph,\n                               \nFTC_Node\n       *anode );\n\n\n\n\n\n\nA variant of \nFTC_ImageCache_Lookup\n that uses an \nFTC_ScalerRec\n to specify the face ID and its size.\n\n\ninput\n\n\n\n\n\ncache\n\n\nA handle to the source glyph image cache.\n\n\n\n\nscaler\n\n\nA pointer to a scaler descriptor.\n\n\n\n\nload_flags\n\n\nThe corresponding load flags.\n\n\n\n\ngindex\n\n\nThe glyph index to retrieve.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\naglyph\n\n\nThe corresponding \nFT_Glyph\n object. 0\u00a0in case of failure.\n\n\n\n\nanode\n\n\nUsed to return the address of the corresponding cache node after incrementing its reference count (see note below).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe returned glyph is owned and managed by the glyph image cache. Never try to transform or discard it manually! You can however create a copy with \nFT_Glyph_Copy\n and modify the new one.\n\n\nIf \u2018anode\u2019 is \nnot\n NULL, it receives the address of the cache node containing the glyph image, after increasing its reference count. This ensures that the node (as well as the \nFT_Glyph\n) will always be kept in the cache until you call \nFTC_Node_Unref\n to \u2018release\u2019 it.\n\n\nIf \u2018anode\u2019 is NULL, the cache node is left unchanged, which means that the \nFT_Glyph\n could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!\n\n\nCalls to \nFT_Set_Char_Size\n and friends have no effect on cached glyphs; you should always use the FreeType cache API instead.\n\n\n\n\n\nFTC_SBitRec\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FTC_SBitRec_\n  {\n    \nFT_Byte\n   width;\n    \nFT_Byte\n   height;\n    \nFT_Char\n   left;\n    \nFT_Char\n   top;\n\n    \nFT_Byte\n   format;\n    \nFT_Byte\n   max_grays;\n    \nFT_Short\n  pitch;\n    \nFT_Char\n   xadvance;\n    \nFT_Char\n   yadvance;\n\n    \nFT_Byte\n*  buffer;\n\n  } \nFTC_SBitRec\n;\n\n\n\n\n\n\nA very compact structure used to describe a small glyph bitmap.\n\n\nfields\n\n\n\n\n\nwidth\n\n\nThe bitmap width in pixels.\n\n\n\n\nheight\n\n\nThe bitmap height in pixels.\n\n\n\n\nleft\n\n\nThe horizontal distance from the pen position to the left bitmap border (a.k.a. \u2018left side bearing\u2019, or \u2018lsb\u2019).\n\n\n\n\ntop\n\n\nThe vertical distance from the pen position (on the baseline) to the upper bitmap border (a.k.a. \u2018top side bearing\u2019). The distance is positive for upwards y\u00a0coordinates.\n\n\n\n\nformat\n\n\nThe format of the glyph bitmap (monochrome or gray).\n\n\n\n\nmax_grays\n\n\nMaximum gray level value (in the range 1 to\u00a0255).\n\n\n\n\npitch\n\n\nThe number of bytes per bitmap line. May be positive or negative.\n\n\n\n\nxadvance\n\n\nThe horizontal advance width in pixels.\n\n\n\n\nyadvance\n\n\nThe vertical advance height in pixels.\n\n\n\n\nbuffer\n\n\nA pointer to the bitmap pixels.\n\n\n\n\n\n\n\n\n\n\nFTC_SBitCache_LookupScaler\n\u00b6\n\n\nDefined in FT_CACHE_H (freetype/ftcache.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFTC_SBitCache_LookupScaler\n( \nFTC_SBitCache\n  cache,\n                              \nFTC_Scaler\n     scaler,\n                              \nFT_ULong\n       load_flags,\n                              \nFT_UInt\n        gindex,\n                              \nFTC_SBit\n      *sbit,\n                              \nFTC_Node\n      *anode );\n\n\n\n\n\n\nA variant of \nFTC_SBitCache_Lookup\n that uses an \nFTC_ScalerRec\n to specify the face ID and its size.\n\n\ninput\n\n\n\n\n\ncache\n\n\nA handle to the source sbit cache.\n\n\n\n\nscaler\n\n\nA pointer to the scaler descriptor.\n\n\n\n\nload_flags\n\n\nThe corresponding load flags.\n\n\n\n\ngindex\n\n\nThe glyph index.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nsbit\n\n\nA handle to a small bitmap descriptor.\n\n\n\n\nanode\n\n\nUsed to return the address of the corresponding cache node after incrementing its reference count (see note below).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe small bitmap descriptor and its bit buffer are owned by the cache and should never be freed by the application. They might as well disappear from memory on the next cache lookup, so don't treat them as persistent data.\n\n\nThe descriptor's \u2018buffer\u2019 field is set to\u00a00 to indicate a missing glyph bitmap.\n\n\nIf \u2018anode\u2019 is \nnot\n NULL, it receives the address of the cache node containing the bitmap, after increasing its reference count. This ensures that the node (as well as the image) will always be kept in the cache until you call \nFTC_Node_Unref\n to \u2018release\u2019 it.\n\n\nIf \u2018anode\u2019 is NULL, the cache node is left unchanged, which means that the bitmap could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!",
            "title": "Cache Sub-System"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#cache-sub-system",
            "text": "",
            "title": "Cache Sub-System"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#synopsis",
            "text": "This section describes the FreeType\u00a02 cache sub-system, which is used to limit the number of concurrently opened  FT_Face  and  FT_Size  objects, as well as caching information like character maps and glyph images while limiting their maximum memory usage.  Note that all types and functions begin with the \u2018FTC_\u2019 prefix.  The cache is highly portable and thus doesn't know anything about the fonts installed on your system, or how to access them. This implies the following scheme:  First, available or installed font faces are uniquely identified by  FTC_FaceID  values, provided to the cache by the client. Note that the cache only stores and compares these values, and doesn't try to interpret them in any way.  Second, the cache calls, only when needed, a client-provided function to convert an  FTC_FaceID  into a new  FT_Face  object. The latter is then completely managed by the cache, including its termination through  FT_Done_Face . To monitor termination of face objects, the finalizer callback in the \u2018generic\u2019 field of the  FT_Face  object can be used, which might also be used to store the  FTC_FaceID  of the face.  Clients are free to map face IDs to anything else. The most simple usage is to associate them to a (pathname,face_index) pair that is used to call  FT_New_Face . However, more complex schemes are also possible.  Note that for the cache to work correctly, the face ID values must be  persistent , which means that the contents they point to should not change at runtime, or that their value should not become invalid.  If this is unavoidable (e.g., when a font is uninstalled at runtime), you should call  FTC_Manager_RemoveFaceID  as soon as possible, to let the cache get rid of any references to the old  FTC_FaceID  it may keep internally. Failure to do so will lead to incorrect behaviour or even crashes.  To use the cache, start with calling  FTC_Manager_New  to create a new  FTC_Manager  object, which models a single cache instance. You can then look up  FT_Face  and  FT_Size  objects with  FTC_Manager_LookupFace  and  FTC_Manager_LookupSize , respectively.  If you want to use the charmap caching, call  FTC_CMapCache_New , then later use  FTC_CMapCache_Lookup  to perform the equivalent of  FT_Get_Char_Index , only much faster.  If you want to use the  FT_Glyph  caching, call  FTC_ImageCache , then later use  FTC_ImageCache_Lookup  to retrieve the corresponding  FT_Glyph  objects from the cache.  If you need lots of small bitmaps, it is much more memory efficient to call  FTC_SBitCache_New  followed by  FTC_SBitCache_Lookup . This returns  FTC_SBitRec  structures, which are used to store small bitmaps directly. (A small bitmap is one whose metrics and dimensions all fit into 8-bit integers).  We hope to also provide a kerning cache in the near future.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_ManagerRec_*   FTC_Manager ;   This object corresponds to one instance of the cache-subsystem. It is used to cache one or more  FT_Face  objects, along with corresponding  FT_Size  objects.  The manager intentionally limits the total number of opened  FT_Face  and  FT_Size  objects to control memory usage. See the  max_faces  and  max_sizes  parameters of  FTC_Manager_New .  The manager is also used to cache \u2018nodes\u2019 of various types while limiting their total memory usage.  All limitations are enforced by keeping lists of managed objects in most-recently-used order, and flushing old nodes to make room for new ones.",
            "title": "FTC_Manager"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_faceid",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   FT_Pointer    FTC_FaceID ;   An opaque pointer type that is used to identity face objects. The contents of such objects is application-dependent.  These pointers are typically used to point to a user-defined structure containing a font file path, and face index.",
            "title": "FTC_FaceID"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_face_requester",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   FT_Error \n  (* FTC_Face_Requester )(  FTC_FaceID   face_id,\n                          FT_Library   library,\n                          FT_Pointer   req_data,\n                          FT_Face *    aface );   A callback function provided by client applications. It is used by the cache manager to translate a given  FTC_FaceID  into a new valid  FT_Face  object, on demand.",
            "title": "FTC_Face_Requester"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager_new",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_Manager_New (  FT_Library           library,\n                    FT_UInt              max_faces,\n                    FT_UInt              max_sizes,\n                    FT_ULong             max_bytes,\n                    FTC_Face_Requester   requester,\n                    FT_Pointer           req_data,\n                    FTC_Manager         *amanager );   Create a new cache manager.",
            "title": "FTC_Manager_New"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager_reset",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  void  )\n   FTC_Manager_Reset (  FTC_Manager   manager );   Empty a given cache manager. This simply gets rid of all the currently cached  FT_Face  and  FT_Size  objects within the manager.",
            "title": "FTC_Manager_Reset"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager_done",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  void  )\n   FTC_Manager_Done (  FTC_Manager   manager );   Destroy a given manager after emptying it.",
            "title": "FTC_Manager_Done"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager_lookupface",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_Manager_LookupFace (  FTC_Manager   manager,\n                           FTC_FaceID    face_id,\n                           FT_Face      *aface );   Retrieve the  FT_Face  object that corresponds to a given face ID through a cache manager.",
            "title": "FTC_Manager_LookupFace"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager_lookupsize",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_Manager_LookupSize (  FTC_Manager   manager,\n                           FTC_Scaler    scaler,\n                           FT_Size      *asize );   Retrieve the  FT_Size  object that corresponds to a given  FTC_ScalerRec  pointer through a cache manager.",
            "title": "FTC_Manager_LookupSize"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_manager_removefaceid",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  void  )\n   FTC_Manager_RemoveFaceID (  FTC_Manager   manager,\n                             FTC_FaceID    face_id );   A special function used to indicate to the cache manager that a given  FTC_FaceID  is no longer valid, either because its content changed, or because it was deallocated or uninstalled.",
            "title": "FTC_Manager_RemoveFaceID"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_node",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_NodeRec_*   FTC_Node ;   An opaque handle to a cache node object. Each cache node is reference-counted. A node with a count of\u00a00 might be flushed out of a full cache whenever a lookup request is performed.  If you look up nodes, you have the ability to \u2018acquire\u2019 them, i.e., to increment their reference count. This will prevent the node from being flushed out of the cache until you explicitly \u2018release\u2019 it (see  FTC_Node_Unref ).  See also  FTC_SBitCache_Lookup  and  FTC_ImageCache_Lookup .",
            "title": "FTC_Node"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_node_unref",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  void  )\n   FTC_Node_Unref (  FTC_Node      node,\n                   FTC_Manager   manager );   Decrement a cache node's internal reference count. When the count reaches 0, it is not destroyed but becomes eligible for subsequent cache flushes.",
            "title": "FTC_Node_Unref"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_imagecache",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_ImageCacheRec_*   FTC_ImageCache ;   A handle to a glyph image cache object. They are designed to hold many distinct glyph images while not exceeding a certain memory threshold.",
            "title": "FTC_ImageCache"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_imagecache_new",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_ImageCache_New (  FTC_Manager       manager,\n                       FTC_ImageCache   *acache );   Create a new glyph image cache.",
            "title": "FTC_ImageCache_New"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_imagecache_lookup",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_ImageCache_Lookup (  FTC_ImageCache   cache,\n                          FTC_ImageType    type,\n                          FT_UInt          gindex,\n                          FT_Glyph        *aglyph,\n                          FTC_Node        *anode );   Retrieve a given glyph image from a glyph image cache.",
            "title": "FTC_ImageCache_Lookup"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_sbit",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_SBitRec_*   FTC_SBit ;   A handle to a small bitmap descriptor. See the  FTC_SBitRec  structure for details.",
            "title": "FTC_SBit"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_sbitcache",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_SBitCacheRec_*   FTC_SBitCache ;   A handle to a small bitmap cache. These are special cache objects used to store small glyph bitmaps (and anti-aliased pixmaps) in a much more efficient way than the traditional glyph image cache implemented by  FTC_ImageCache .",
            "title": "FTC_SBitCache"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_sbitcache_new",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_SBitCache_New (  FTC_Manager      manager,\n                      FTC_SBitCache   *acache );   Create a new cache to store small glyph bitmaps.",
            "title": "FTC_SBitCache_New"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_sbitcache_lookup",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_SBitCache_Lookup (  FTC_SBitCache     cache,\n                         FTC_ImageType     type,\n                         FT_UInt           gindex,\n                         FTC_SBit         *sbit,\n                         FTC_Node         *anode );   Look up a given small glyph bitmap in a given sbit cache and \u2018lock\u2019 it to prevent its flushing from the cache until needed.",
            "title": "FTC_SBitCache_Lookup"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_cmapcache",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_CMapCacheRec_*   FTC_CMapCache ;   An opaque handle used to model a charmap cache. This cache is to hold character codes -> glyph indices mappings.",
            "title": "FTC_CMapCache"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_cmapcache_new",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_CMapCache_New (  FTC_Manager      manager,\n                      FTC_CMapCache   *acache );   Create a new charmap cache.",
            "title": "FTC_CMapCache_New"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_cmapcache_lookup",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_UInt  )\n   FTC_CMapCache_Lookup (  FTC_CMapCache   cache,\n                         FTC_FaceID      face_id,\n                         FT_Int          cmap_index,\n                         FT_UInt32       char_code );   Translate a character code into a glyph index, using the charmap cache.",
            "title": "FTC_CMapCache_Lookup"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_scalerrec",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct   FTC_ScalerRec_\n  {\n     FTC_FaceID   face_id;\n     FT_UInt      width;\n     FT_UInt      height;\n     FT_Int       pixel;\n     FT_UInt      x_res;\n     FT_UInt      y_res;\n\n  }  FTC_ScalerRec ;   A structure used to describe a given character size in either pixels or points to the cache manager. See  FTC_Manager_LookupSize .",
            "title": "FTC_ScalerRec"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_scaler",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_ScalerRec_*   FTC_Scaler ;   A handle to an  FTC_ScalerRec  structure.",
            "title": "FTC_Scaler"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_imagetyperec",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct   FTC_ImageTypeRec_\n  {\n     FTC_FaceID   face_id;\n     FT_UInt      width;\n     FT_UInt      height;\n     FT_Int32     flags;\n\n  }  FTC_ImageTypeRec ;   A structure used to model the type of images in a glyph cache.",
            "title": "FTC_ImageTypeRec"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_imagetype",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct  FTC_ImageTypeRec_*   FTC_ImageType ;   A handle to an  FTC_ImageTypeRec  structure.",
            "title": "FTC_ImageType"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_imagecache_lookupscaler",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_ImageCache_LookupScaler (  FTC_ImageCache   cache,\n                                FTC_Scaler       scaler,\n                                FT_ULong         load_flags,\n                                FT_UInt          gindex,\n                                FT_Glyph        *aglyph,\n                                FTC_Node        *anode );   A variant of  FTC_ImageCache_Lookup  that uses an  FTC_ScalerRec  to specify the face ID and its size.",
            "title": "FTC_ImageCache_LookupScaler"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_sbitrec",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n   typedef   struct   FTC_SBitRec_\n  {\n     FT_Byte    width;\n     FT_Byte    height;\n     FT_Char    left;\n     FT_Char    top;\n\n     FT_Byte    format;\n     FT_Byte    max_grays;\n     FT_Short   pitch;\n     FT_Char    xadvance;\n     FT_Char    yadvance;\n\n     FT_Byte *  buffer;\n\n  }  FTC_SBitRec ;   A very compact structure used to describe a small glyph bitmap.",
            "title": "FTC_SBitRec"
        },
        {
            "location": "/ft2-cache_subsystem/index.html#ftc_sbitcache_lookupscaler",
            "text": "Defined in FT_CACHE_H (freetype/ftcache.h).   \n  FT_EXPORT(  FT_Error  )\n   FTC_SBitCache_LookupScaler (  FTC_SBitCache   cache,\n                               FTC_Scaler      scaler,\n                               FT_ULong        load_flags,\n                               FT_UInt         gindex,\n                               FTC_SBit       *sbit,\n                               FTC_Node       *anode );   A variant of  FTC_SBitCache_Lookup  that uses an  FTC_ScalerRec  to specify the face ID and its size.",
            "title": "FTC_SBitCache_LookupScaler"
        },
        {
            "location": "/ft2-computations/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Computations\n\n\n\n\nComputations\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains various functions used to perform computations on 16.16 fixed-float numbers or 2d vectors.\n\n\nFT_MulDiv\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Long\n )\n  \nFT_MulDiv\n( \nFT_Long\n  a,\n             \nFT_Long\n  b,\n             \nFT_Long\n  c );\n\n\n\n\n\n\nCompute \u2018(a*b)/c\u2019 with maximum accuracy, using a 64-bit intermediate integer whenever necessary.\n\n\nThis function isn't necessarily as fast as some processor-specific operations, but is at least completely portable.\n\n\ninput\n\n\n\n\n\na\n\n\nThe first multiplier.\n\n\n\n\nb\n\n\nThe second multiplier.\n\n\n\n\nc\n\n\nThe divisor.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe result of \u2018(a*b)/c\u2019. This function never traps when trying to divide by zero; it simply returns \u2018MaxInt\u2019 or \u2018MinInt\u2019 depending on the signs of \u2018a\u2019 and \u2018b\u2019.\n\n\n\n\n\nFT_MulFix\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Long\n )\n  \nFT_MulFix\n( \nFT_Long\n  a,\n             \nFT_Long\n  b );\n\n\n\n\n\n\nCompute \u2018(a*b)/0x10000\u2019 with maximum accuracy. Its main use is to multiply a given value by a 16.16 fixed-point factor.\n\n\ninput\n\n\n\n\n\na\n\n\nThe first multiplier.\n\n\n\n\nb\n\n\nThe second multiplier. Use a 16.16 factor here whenever possible (see note below).\n\n\n\n\n\n\n\nreturn\n\n\n\nThe result of \u2018(a*b)/0x10000\u2019.\n\n\nnote\n\n\n\nThis function has been optimized for the case where the absolute value of \u2018a\u2019 is less than 2048, and \u2018b\u2019 is a 16.16 scaling factor. As this happens mainly when scaling from notional units to fractional pixels in FreeType, it resulted in noticeable speed improvements between versions 2.x and 1.x.\n\n\nAs a conclusion, always try to place a 16.16 factor as the \nsecond\n argument of this function; this can make a great difference.\n\n\n\n\n\nFT_DivFix\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Long\n )\n  \nFT_DivFix\n( \nFT_Long\n  a,\n             \nFT_Long\n  b );\n\n\n\n\n\n\nCompute \u2018(a*0x10000)/b\u2019 with maximum accuracy. Its main use is to divide a given value by a 16.16 fixed-point factor.\n\n\ninput\n\n\n\n\n\na\n\n\nThe numerator.\n\n\n\n\nb\n\n\nThe denominator. Use a 16.16 factor here.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe result of \u2018(a*0x10000)/b\u2019.\n\n\n\n\n\nFT_RoundFix\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_RoundFix\n( \nFT_Fixed\n  a );\n\n\n\n\n\n\nRound a 16.16 fixed number.\n\n\ninput\n\n\n\n\n\na\n\n\nThe number to be rounded.\n\n\n\n\n\n\n\nreturn\n\n\n\n\u2018a\u2019 rounded to the nearest 16.16 fixed integer, halfway cases away from zero.\n\n\nnote\n\n\n\nThe function uses wrap-around arithmetic.\n\n\n\n\n\nFT_CeilFix\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_CeilFix\n( \nFT_Fixed\n  a );\n\n\n\n\n\n\nCompute the smallest following integer of a 16.16 fixed number.\n\n\ninput\n\n\n\n\n\na\n\n\nThe number for which the ceiling function is to be computed.\n\n\n\n\n\n\n\nreturn\n\n\n\n\u2018a\u2019 rounded towards plus infinity.\n\n\nnote\n\n\n\nThe function uses wrap-around arithmetic.\n\n\n\n\n\nFT_FloorFix\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_FloorFix\n( \nFT_Fixed\n  a );\n\n\n\n\n\n\nCompute the largest previous integer of a 16.16 fixed number.\n\n\ninput\n\n\n\n\n\na\n\n\nThe number for which the floor function is to be computed.\n\n\n\n\n\n\n\nreturn\n\n\n\n\u2018a\u2019 rounded towards minus infinity.\n\n\n\n\n\nFT_Vector_Transform\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Vector_Transform\n( \nFT_Vector\n*        vec,\n                       \nconst\n \nFT_Matrix\n*  matrix );\n\n\n\n\n\n\nTransform a single vector through a 2x2 matrix.\n\n\ninout\n\n\n\n\n\nvector\n\n\nThe target vector to transform.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nmatrix\n\n\nA pointer to the source 2x2 matrix.\n\n\n\n\n\n\n\nnote\n\n\n\nThe result is undefined if either \u2018vector\u2019 or \u2018matrix\u2019 is invalid.\n\n\n\n\n\nFT_Matrix_Multiply\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Matrix_Multiply\n( \nconst\n \nFT_Matrix\n*  a,\n                      \nFT_Matrix\n*        b );\n\n\n\n\n\n\nPerform the matrix operation \u2018b = a*b\u2019.\n\n\ninput\n\n\n\n\n\na\n\n\nA pointer to matrix \u2018a\u2019.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nb\n\n\nA pointer to matrix \u2018b\u2019.\n\n\n\n\n\n\n\nnote\n\n\n\nThe result is undefined if either \u2018a\u2019 or \u2018b\u2019 is zero.\n\n\nSince the function uses wrap-around arithmetic, results become meaningless if the arguments are very large.\n\n\n\n\n\nFT_Matrix_Invert\n\u00b6\n\n\nDefined in FT_GLYPH_H (freetype/ftglyph.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Matrix_Invert\n( \nFT_Matrix\n*  matrix );\n\n\n\n\n\n\nInvert a 2x2 matrix. Return an error if it can't be inverted.\n\n\ninout\n\n\n\n\n\nmatrix\n\n\nA pointer to the target matrix. Remains untouched in case of error.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Angle\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Fixed\n  \nFT_Angle\n;\n\n\n\n\n\n\nThis type is used to model angle values in FreeType. Note that the angle is a 16.16 fixed-point value expressed in degrees.\n\n\n\n\n\nFT_ANGLE_PI\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n#\ndefine\n \nFT_ANGLE_PI\n  ( 180L << 16 )\n\n\n\n\n\n\nThe angle pi expressed in \nFT_Angle\n units.\n\n\n\n\n\nFT_ANGLE_2PI\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n#\ndefine\n \nFT_ANGLE_2PI\n  ( \nFT_ANGLE_PI\n * 2 )\n\n\n\n\n\n\nThe angle 2*pi expressed in \nFT_Angle\n units.\n\n\n\n\n\nFT_ANGLE_PI2\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n#\ndefine\n \nFT_ANGLE_PI2\n  ( \nFT_ANGLE_PI\n / 2 )\n\n\n\n\n\n\nThe angle pi/2 expressed in \nFT_Angle\n units.\n\n\n\n\n\nFT_ANGLE_PI4\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n#\ndefine\n \nFT_ANGLE_PI4\n  ( \nFT_ANGLE_PI\n / 4 )\n\n\n\n\n\n\nThe angle pi/4 expressed in \nFT_Angle\n units.\n\n\n\n\n\nFT_Sin\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_Sin\n( \nFT_Angle\n  angle );\n\n\n\n\n\n\nReturn the sinus of a given angle in fixed-point format.\n\n\ninput\n\n\n\n\n\nangle\n\n\nThe input angle.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe sinus value.\n\n\nnote\n\n\n\nIf you need both the sinus and cosinus for a given angle, use the function \nFT_Vector_Unit\n.\n\n\n\n\n\nFT_Cos\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_Cos\n( \nFT_Angle\n  angle );\n\n\n\n\n\n\nReturn the cosinus of a given angle in fixed-point format.\n\n\ninput\n\n\n\n\n\nangle\n\n\nThe input angle.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe cosinus value.\n\n\nnote\n\n\n\nIf you need both the sinus and cosinus for a given angle, use the function \nFT_Vector_Unit\n.\n\n\n\n\n\nFT_Tan\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_Tan\n( \nFT_Angle\n  angle );\n\n\n\n\n\n\nReturn the tangent of a given angle in fixed-point format.\n\n\ninput\n\n\n\n\n\nangle\n\n\nThe input angle.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe tangent value.\n\n\n\n\n\nFT_Atan2\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Angle\n )\n  \nFT_Atan2\n( \nFT_Fixed\n  x,\n            \nFT_Fixed\n  y );\n\n\n\n\n\n\nReturn the arc-tangent corresponding to a given vector (x,y) in the 2d plane.\n\n\ninput\n\n\n\n\n\nx\n\n\nThe horizontal vector coordinate.\n\n\n\n\ny\n\n\nThe vertical vector coordinate.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe arc-tangent value (i.e. angle).\n\n\n\n\n\nFT_Angle_Diff\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Angle\n )\n  \nFT_Angle_Diff\n( \nFT_Angle\n  angle1,\n                 \nFT_Angle\n  angle2 );\n\n\n\n\n\n\nReturn the difference between two angles. The result is always constrained to the ]-PI..PI] interval.\n\n\ninput\n\n\n\n\n\nangle1\n\n\nFirst angle.\n\n\n\n\nangle2\n\n\nSecond angle.\n\n\n\n\n\n\n\nreturn\n\n\n\nConstrained value of \u2018value2-value1\u2019.\n\n\n\n\n\nFT_Vector_Unit\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Vector_Unit\n( \nFT_Vector\n*  vec,\n                  \nFT_Angle\n    angle );\n\n\n\n\n\n\nReturn the unit vector corresponding to a given angle. After the call, the value of \nvec.x\n will be \u2018cos(angle)\u2019, and the value of \nvec.y\n will be \u2018sin(angle)\u2019.\n\n\nThis function is useful to retrieve both the sinus and cosinus of a given angle quickly.\n\n\noutput\n\n\n\n\n\nvec\n\n\nThe address of target vector.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nangle\n\n\nThe input angle.\n\n\n\n\n\n\n\n\n\n\nFT_Vector_Rotate\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Vector_Rotate\n( \nFT_Vector\n*  vec,\n                    \nFT_Angle\n    angle );\n\n\n\n\n\n\nRotate a vector by a given angle.\n\n\ninout\n\n\n\n\n\nvec\n\n\nThe address of target vector.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nangle\n\n\nThe input angle.\n\n\n\n\n\n\n\n\n\n\nFT_Vector_Length\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Fixed\n )\n  \nFT_Vector_Length\n( \nFT_Vector\n*  vec );\n\n\n\n\n\n\nReturn the length of a given vector.\n\n\ninput\n\n\n\n\n\nvec\n\n\nThe address of target vector.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe vector length, expressed in the same units that the original vector coordinates.\n\n\n\n\n\nFT_Vector_Polarize\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Vector_Polarize\n( \nFT_Vector\n*  vec,\n                      \nFT_Fixed\n   *length,\n                      \nFT_Angle\n   *angle );\n\n\n\n\n\n\nCompute both the length and angle of a given vector.\n\n\ninput\n\n\n\n\n\nvec\n\n\nThe address of source vector.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nlength\n\n\nThe vector length.\n\n\n\n\nangle\n\n\nThe vector angle.\n\n\n\n\n\n\n\n\n\n\nFT_Vector_From_Polar\n\u00b6\n\n\nDefined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Vector_From_Polar\n( \nFT_Vector\n*  vec,\n                        \nFT_Fixed\n    length,\n                        \nFT_Angle\n    angle );\n\n\n\n\n\n\nCompute vector coordinates from a length and angle.\n\n\noutput\n\n\n\n\n\nvec\n\n\nThe address of source vector.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nlength\n\n\nThe vector length.\n\n\n\n\nangle\n\n\nThe vector angle.",
            "title": "Computations"
        },
        {
            "location": "/ft2-computations/index.html#computations",
            "text": "",
            "title": "Computations"
        },
        {
            "location": "/ft2-computations/index.html#synopsis",
            "text": "This section contains various functions used to perform computations on 16.16 fixed-float numbers or 2d vectors.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-computations/index.html#ft_muldiv",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Long  )\n   FT_MulDiv (  FT_Long   a,\n              FT_Long   b,\n              FT_Long   c );   Compute \u2018(a*b)/c\u2019 with maximum accuracy, using a 64-bit intermediate integer whenever necessary.  This function isn't necessarily as fast as some processor-specific operations, but is at least completely portable.",
            "title": "FT_MulDiv"
        },
        {
            "location": "/ft2-computations/index.html#ft_mulfix",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Long  )\n   FT_MulFix (  FT_Long   a,\n              FT_Long   b );   Compute \u2018(a*b)/0x10000\u2019 with maximum accuracy. Its main use is to multiply a given value by a 16.16 fixed-point factor.",
            "title": "FT_MulFix"
        },
        {
            "location": "/ft2-computations/index.html#ft_divfix",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Long  )\n   FT_DivFix (  FT_Long   a,\n              FT_Long   b );   Compute \u2018(a*0x10000)/b\u2019 with maximum accuracy. Its main use is to divide a given value by a 16.16 fixed-point factor.",
            "title": "FT_DivFix"
        },
        {
            "location": "/ft2-computations/index.html#ft_roundfix",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_RoundFix (  FT_Fixed   a );   Round a 16.16 fixed number.",
            "title": "FT_RoundFix"
        },
        {
            "location": "/ft2-computations/index.html#ft_ceilfix",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_CeilFix (  FT_Fixed   a );   Compute the smallest following integer of a 16.16 fixed number.",
            "title": "FT_CeilFix"
        },
        {
            "location": "/ft2-computations/index.html#ft_floorfix",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_FloorFix (  FT_Fixed   a );   Compute the largest previous integer of a 16.16 fixed number.",
            "title": "FT_FloorFix"
        },
        {
            "location": "/ft2-computations/index.html#ft_vector_transform",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n  FT_EXPORT(  void  )\n   FT_Vector_Transform (  FT_Vector *        vec,\n                        const   FT_Matrix *  matrix );   Transform a single vector through a 2x2 matrix.",
            "title": "FT_Vector_Transform"
        },
        {
            "location": "/ft2-computations/index.html#ft_matrix_multiply",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  void  )\n   FT_Matrix_Multiply (  const   FT_Matrix *  a,\n                       FT_Matrix *        b );   Perform the matrix operation \u2018b = a*b\u2019.",
            "title": "FT_Matrix_Multiply"
        },
        {
            "location": "/ft2-computations/index.html#ft_matrix_invert",
            "text": "Defined in FT_GLYPH_H (freetype/ftglyph.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Matrix_Invert (  FT_Matrix *  matrix );   Invert a 2x2 matrix. Return an error if it can't be inverted.",
            "title": "FT_Matrix_Invert"
        },
        {
            "location": "/ft2-computations/index.html#ft_angle",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n   typedef   FT_Fixed    FT_Angle ;   This type is used to model angle values in FreeType. Note that the angle is a 16.16 fixed-point value expressed in degrees.",
            "title": "FT_Angle"
        },
        {
            "location": "/ft2-computations/index.html#ft_angle_pi",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n# define   FT_ANGLE_PI   ( 180L << 16 )   The angle pi expressed in  FT_Angle  units.",
            "title": "FT_ANGLE_PI"
        },
        {
            "location": "/ft2-computations/index.html#ft_angle_2pi",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n# define   FT_ANGLE_2PI   (  FT_ANGLE_PI  * 2 )   The angle 2*pi expressed in  FT_Angle  units.",
            "title": "FT_ANGLE_2PI"
        },
        {
            "location": "/ft2-computations/index.html#ft_angle_pi2",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n# define   FT_ANGLE_PI2   (  FT_ANGLE_PI  / 2 )   The angle pi/2 expressed in  FT_Angle  units.",
            "title": "FT_ANGLE_PI2"
        },
        {
            "location": "/ft2-computations/index.html#ft_angle_pi4",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n# define   FT_ANGLE_PI4   (  FT_ANGLE_PI  / 4 )   The angle pi/4 expressed in  FT_Angle  units.",
            "title": "FT_ANGLE_PI4"
        },
        {
            "location": "/ft2-computations/index.html#ft_sin",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_Sin (  FT_Angle   angle );   Return the sinus of a given angle in fixed-point format.",
            "title": "FT_Sin"
        },
        {
            "location": "/ft2-computations/index.html#ft_cos",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_Cos (  FT_Angle   angle );   Return the cosinus of a given angle in fixed-point format.",
            "title": "FT_Cos"
        },
        {
            "location": "/ft2-computations/index.html#ft_tan",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_Tan (  FT_Angle   angle );   Return the tangent of a given angle in fixed-point format.",
            "title": "FT_Tan"
        },
        {
            "location": "/ft2-computations/index.html#ft_atan2",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  FT_Angle  )\n   FT_Atan2 (  FT_Fixed   x,\n             FT_Fixed   y );   Return the arc-tangent corresponding to a given vector (x,y) in the 2d plane.",
            "title": "FT_Atan2"
        },
        {
            "location": "/ft2-computations/index.html#ft_angle_diff",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  FT_Angle  )\n   FT_Angle_Diff (  FT_Angle   angle1,\n                  FT_Angle   angle2 );   Return the difference between two angles. The result is always constrained to the ]-PI..PI] interval.",
            "title": "FT_Angle_Diff"
        },
        {
            "location": "/ft2-computations/index.html#ft_vector_unit",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  void  )\n   FT_Vector_Unit (  FT_Vector *  vec,\n                   FT_Angle     angle );   Return the unit vector corresponding to a given angle. After the call, the value of  vec.x  will be \u2018cos(angle)\u2019, and the value of  vec.y  will be \u2018sin(angle)\u2019.  This function is useful to retrieve both the sinus and cosinus of a given angle quickly.",
            "title": "FT_Vector_Unit"
        },
        {
            "location": "/ft2-computations/index.html#ft_vector_rotate",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  void  )\n   FT_Vector_Rotate (  FT_Vector *  vec,\n                     FT_Angle     angle );   Rotate a vector by a given angle.",
            "title": "FT_Vector_Rotate"
        },
        {
            "location": "/ft2-computations/index.html#ft_vector_length",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  FT_Fixed  )\n   FT_Vector_Length (  FT_Vector *  vec );   Return the length of a given vector.",
            "title": "FT_Vector_Length"
        },
        {
            "location": "/ft2-computations/index.html#ft_vector_polarize",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  void  )\n   FT_Vector_Polarize (  FT_Vector *  vec,\n                       FT_Fixed    *length,\n                       FT_Angle    *angle );   Compute both the length and angle of a given vector.",
            "title": "FT_Vector_Polarize"
        },
        {
            "location": "/ft2-computations/index.html#ft_vector_from_polar",
            "text": "Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).   \n  FT_EXPORT(  void  )\n   FT_Vector_From_Polar (  FT_Vector *  vec,\n                         FT_Fixed     length,\n                         FT_Angle     angle );   Compute vector coordinates from a length and angle.",
            "title": "FT_Vector_From_Polar"
        },
        {
            "location": "/ft2-list_processing/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb List Processing\n\n\n\n\nList Processing\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains various definitions related to list processing using doubly-linked nodes.\n\n\nFT_List\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_ListRec_*  \nFT_List\n;\n\n\n\n\n\n\nA handle to a list record (see \nFT_ListRec\n).\n\n\n\n\n\nFT_ListNode\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_ListNodeRec_*  \nFT_ListNode\n;\n\n\n\n\n\n\nMany elements and objects in FreeType are listed through an \nFT_List\n record (see \nFT_ListRec\n). As its name suggests, an FT_ListNode is a handle to a single list element.\n\n\n\n\n\nFT_ListRec\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_ListRec_\n  {\n    \nFT_ListNode\n  head;\n    \nFT_ListNode\n  tail;\n\n  } \nFT_ListRec\n;\n\n\n\n\n\n\nA structure used to hold a simple doubly-linked list. These are used in many parts of FreeType.\n\n\nfields\n\n\n\n\n\nhead\n\n\nThe head (first element) of doubly-linked list.\n\n\n\n\ntail\n\n\nThe tail (last element) of doubly-linked list.\n\n\n\n\n\n\n\n\n\n\nFT_ListNodeRec\n\u00b6\n\n\nDefined in FT_TYPES_H (freetype/fttypes.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_ListNodeRec_\n  {\n    \nFT_ListNode\n  prev;\n    \nFT_ListNode\n  next;\n    \nvoid\n*        data;\n\n  } \nFT_ListNodeRec\n;\n\n\n\n\n\n\nA structure used to hold a single list element.\n\n\nfields\n\n\n\n\n\nprev\n\n\nThe previous element in the list. NULL if first.\n\n\n\n\nnext\n\n\nThe next element in the list. NULL if last.\n\n\n\n\ndata\n\n\nA typeless pointer to the listed object.\n\n\n\n\n\n\n\n\n\n\nFT_List_Add\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_List_Add\n( \nFT_List\n      list,\n               \nFT_ListNode\n  node );\n\n\n\n\n\n\nAppend an element to the end of a list.\n\n\ninout\n\n\n\n\n\nlist\n\n\nA pointer to the parent list.\n\n\n\n\nnode\n\n\nThe node to append.\n\n\n\n\n\n\n\n\n\n\nFT_List_Insert\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_List_Insert\n( \nFT_List\n      list,\n                  \nFT_ListNode\n  node );\n\n\n\n\n\n\nInsert an element at the head of a list.\n\n\ninout\n\n\n\n\n\nlist\n\n\nA pointer to parent list.\n\n\n\n\nnode\n\n\nThe node to insert.\n\n\n\n\n\n\n\n\n\n\nFT_List_Find\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_ListNode\n )\n  \nFT_List_Find\n( \nFT_List\n  list,\n                \nvoid\n*    data );\n\n\n\n\n\n\nFind the list node for a given listed object.\n\n\ninput\n\n\n\n\n\nlist\n\n\nA pointer to the parent list.\n\n\n\n\ndata\n\n\nThe address of the listed object.\n\n\n\n\n\n\n\nreturn\n\n\n\nList node. NULL if it wasn't found.\n\n\n\n\n\nFT_List_Remove\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_List_Remove\n( \nFT_List\n      list,\n                  \nFT_ListNode\n  node );\n\n\n\n\n\n\nRemove a node from a list. This function doesn't check whether the node is in the list!\n\n\ninput\n\n\n\n\n\nnode\n\n\nThe node to remove.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nlist\n\n\nA pointer to the parent list.\n\n\n\n\n\n\n\n\n\n\nFT_List_Up\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_List_Up\n( \nFT_List\n      list,\n              \nFT_ListNode\n  node );\n\n\n\n\n\n\nMove a node to the head/top of a list. Used to maintain LRU lists.\n\n\ninout\n\n\n\n\n\nlist\n\n\nA pointer to the parent list.\n\n\n\n\nnode\n\n\nThe node to move.\n\n\n\n\n\n\n\n\n\n\nFT_List_Iterate\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_List_Iterate\n( \nFT_List\n           list,\n                   \nFT_List_Iterator\n  iterator,\n                   \nvoid\n*             user );\n\n\n\n\n\n\nParse a list and calls a given iterator function on each element. Note that parsing is stopped as soon as one of the iterator calls returns a non-zero value.\n\n\ninput\n\n\n\n\n\nlist\n\n\nA handle to the list.\n\n\n\n\niterator\n\n\nAn iterator function, called on each node of the list.\n\n\n\n\nuser\n\n\nA user-supplied field that is passed as the second argument to the iterator.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe result (a FreeType error code) of the last iterator call.\n\n\n\n\n\nFT_List_Iterator\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Error\n\n  (*\nFT_List_Iterator\n)( \nFT_ListNode\n  node,\n                       \nvoid\n*        user );\n\n\n\n\n\n\nAn FT_List iterator function that is called during a list parse by \nFT_List_Iterate\n.\n\n\ninput\n\n\n\n\n\nnode\n\n\nThe current iteration list node.\n\n\n\n\nuser\n\n\nA typeless pointer passed to \nFT_List_Iterate\n. Can be used to point to the iteration's state.\n\n\n\n\n\n\n\n\n\n\nFT_List_Finalize\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_List_Finalize\n( \nFT_List\n             list,\n                    \nFT_List_Destructor\n  destroy,\n                    \nFT_Memory\n           memory,\n                    \nvoid\n*               user );\n\n\n\n\n\n\nDestroy all elements in the list as well as the list itself.\n\n\ninput\n\n\n\n\n\nlist\n\n\nA handle to the list.\n\n\n\n\ndestroy\n\n\nA list destructor that will be applied to each element of the list. Set this to NULL if not needed.\n\n\n\n\nmemory\n\n\nThe current memory object that handles deallocation.\n\n\n\n\nuser\n\n\nA user-supplied field that is passed as the last argument to the destructor.\n\n\n\n\n\n\n\nnote\n\n\n\nThis function expects that all nodes added by \nFT_List_Add\n or \nFT_List_Insert\n have been dynamically allocated.\n\n\n\n\n\nFT_List_Destructor\n\u00b6\n\n\nDefined in FT_LIST_H (freetype/ftlist.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_List_Destructor\n)( \nFT_Memory\n  memory,\n                         \nvoid\n*      data,\n                         \nvoid\n*      user );\n\n\n\n\n\n\nAn \nFT_List\n iterator function that is called during a list finalization by \nFT_List_Finalize\n to destroy all elements in a given list.\n\n\ninput\n\n\n\n\n\nsystem\n\n\nThe current system object.\n\n\n\n\ndata\n\n\nThe current object to destroy.\n\n\n\n\nuser\n\n\nA typeless pointer passed to \nFT_List_Iterate\n. It can be used to point to the iteration's state.",
            "title": "List Processing"
        },
        {
            "location": "/ft2-list_processing/index.html#list-processing",
            "text": "",
            "title": "List Processing"
        },
        {
            "location": "/ft2-list_processing/index.html#synopsis",
            "text": "This section contains various definitions related to list processing using doubly-linked nodes.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct  FT_ListRec_*   FT_List ;   A handle to a list record (see  FT_ListRec ).",
            "title": "FT_List"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_listnode",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct  FT_ListNodeRec_*   FT_ListNode ;   Many elements and objects in FreeType are listed through an  FT_List  record (see  FT_ListRec ). As its name suggests, an FT_ListNode is a handle to a single list element.",
            "title": "FT_ListNode"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_listrec",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct   FT_ListRec_\n  {\n     FT_ListNode   head;\n     FT_ListNode   tail;\n\n  }  FT_ListRec ;   A structure used to hold a simple doubly-linked list. These are used in many parts of FreeType.",
            "title": "FT_ListRec"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_listnoderec",
            "text": "Defined in FT_TYPES_H (freetype/fttypes.h).   \n   typedef   struct   FT_ListNodeRec_\n  {\n     FT_ListNode   prev;\n     FT_ListNode   next;\n     void *        data;\n\n  }  FT_ListNodeRec ;   A structure used to hold a single list element.",
            "title": "FT_ListNodeRec"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_add",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  void  )\n   FT_List_Add (  FT_List       list,\n                FT_ListNode   node );   Append an element to the end of a list.",
            "title": "FT_List_Add"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_insert",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  void  )\n   FT_List_Insert (  FT_List       list,\n                   FT_ListNode   node );   Insert an element at the head of a list.",
            "title": "FT_List_Insert"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_find",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  FT_ListNode  )\n   FT_List_Find (  FT_List   list,\n                 void *    data );   Find the list node for a given listed object.",
            "title": "FT_List_Find"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_remove",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  void  )\n   FT_List_Remove (  FT_List       list,\n                   FT_ListNode   node );   Remove a node from a list. This function doesn't check whether the node is in the list!",
            "title": "FT_List_Remove"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_up",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  void  )\n   FT_List_Up (  FT_List       list,\n               FT_ListNode   node );   Move a node to the head/top of a list. Used to maintain LRU lists.",
            "title": "FT_List_Up"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_iterate",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_List_Iterate (  FT_List            list,\n                    FT_List_Iterator   iterator,\n                    void *             user );   Parse a list and calls a given iterator function on each element. Note that parsing is stopped as soon as one of the iterator calls returns a non-zero value.",
            "title": "FT_List_Iterate"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_iterator",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n   typedef   FT_Error \n  (* FT_List_Iterator )(  FT_ListNode   node,\n                        void *        user );   An FT_List iterator function that is called during a list parse by  FT_List_Iterate .",
            "title": "FT_List_Iterator"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_finalize",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n  FT_EXPORT(  void  )\n   FT_List_Finalize (  FT_List              list,\n                     FT_List_Destructor   destroy,\n                     FT_Memory            memory,\n                     void *               user );   Destroy all elements in the list as well as the list itself.",
            "title": "FT_List_Finalize"
        },
        {
            "location": "/ft2-list_processing/index.html#ft_list_destructor",
            "text": "Defined in FT_LIST_H (freetype/ftlist.h).   \n   typedef   void \n  (* FT_List_Destructor )(  FT_Memory   memory,\n                          void *      data,\n                          void *      user );   An  FT_List  iterator function that is called during a list finalization by  FT_List_Finalize  to destroy all elements in a given list.",
            "title": "FT_List_Destructor"
        },
        {
            "location": "/ft2-outline_processing/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Outline Processing\n\n\n\n\nOutline Processing\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains routines used to create and destroy scalable glyph images known as \u2018outlines\u2019. These can also be measured, transformed, and converted into bitmaps and pixmaps.\n\n\nFT_Outline\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Outline_\n  {\n    \nshort\n       n_contours;      /* number of contours in glyph        */\n    \nshort\n       n_points;        /* number of points in the glyph      */\n\n    \nFT_Vector\n*  points;          /* the outline's points               */\n    \nchar\n*       tags;            /* the points flags                   */\n    \nshort\n*      contours;        /* the contour end points             */\n\n    \nint\n         flags;           /* outline masks                      */\n\n  } \nFT_Outline\n;\n\n\n\n\n\n\nThis structure is used to describe an outline to the scan-line converter.\n\n\nfields\n\n\n\n\n\nn_contours\n\n\nThe number of contours in the outline.\n\n\n\n\nn_points\n\n\nThe number of points in the outline.\n\n\n\n\npoints\n\n\nA pointer to an array of \nn_points\n \nFT_Vector\n elements, giving the outline's point coordinates.\n\n\n\n\ntags\n\n\nA pointer to an array of \nn_points\n chars, giving each outline point's type.\nIf bit\u00a00 is unset, the point is \u2018off\u2019 the curve, i.e., a Bezier control point, while it is \u2018on\u2019 if set.\nBit\u00a01 is meaningful for \u2018off\u2019 points only. If set, it indicates a third-order Bezier arc control point; and a second-order control point if unset.\nIf bit\u00a02 is set, bits 5-7 contain the drop-out mode (as defined in the OpenType specification; the value is the same as the argument to the SCANMODE instruction).\nBits 3 and\u00a04 are reserved for internal purposes.\n\n\n\n\ncontours\n\n\nAn array of \nn_contours\n shorts, giving the end point of each contour within the outline. For example, the first contour is defined by the points \u20180\u2019 to \u2018contours[0]\u2019, the second one is defined by the points \u2018contours[0]+1\u2019 to \u2018contours[1]\u2019, etc.\n\n\n\n\nflags\n\n\nA set of bit flags used to characterize the outline and give hints to the scan-converter and hinter on how to convert/grid-fit it. See \nFT_OUTLINE_XXX\n.\n\n\n\n\n\n\n\nnote\n\n\n\nThe B/W rasterizer only checks bit\u00a02 in the \u2018tags\u2019 array for the first point of each contour. The drop-out mode as given with \nFT_OUTLINE_IGNORE_DROPOUTS\n, \nFT_OUTLINE_SMART_DROPOUTS\n, and \nFT_OUTLINE_INCLUDE_STUBS\n in \u2018flags\u2019 is then overridden.\n\n\n\n\n\nFT_Outline_New\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_New\n( \nFT_Library\n   library,\n                  \nFT_UInt\n      numPoints,\n                  \nFT_Int\n       numContours,\n                  \nFT_Outline\n  *anoutline );\n\n  FT_EXPORT( \nFT_Error\n )\n  FT_Outline_New_Internal( \nFT_Memory\n    memory,\n                           \nFT_UInt\n      numPoints,\n                           \nFT_Int\n       numContours,\n                           \nFT_Outline\n  *anoutline );\n\n\n\n\n\n\nCreate a new outline of a given size.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the library object from where the outline is allocated. Note however that the new outline will \nnot\n necessarily be \nfreed\n, when destroying the library, by \nFT_Done_FreeType\n.\n\n\n\n\nnumPoints\n\n\nThe maximum number of points within the outline. Must be smaller than or equal to 0xFFFF (65535).\n\n\n\n\nnumContours\n\n\nThe maximum number of contours within the outline. This value must be in the range 0 to \nnumPoints\n.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nanoutline\n\n\nA handle to the new outline.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe reason why this function takes a \u2018library\u2019 parameter is simply to use the library's memory allocator.\n\n\n\n\n\nFT_Outline_Done\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Done\n( \nFT_Library\n   library,\n                   \nFT_Outline\n*  outline );\n\n  FT_EXPORT( \nFT_Error\n )\n  FT_Outline_Done_Internal( \nFT_Memory\n    memory,\n                            \nFT_Outline\n*  outline );\n\n\n\n\n\n\nDestroy an outline created with \nFT_Outline_New\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle of the library object used to allocate the outline.\n\n\n\n\noutline\n\n\nA pointer to the outline object to be discarded.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf the outline's \u2018owner\u2019 field is not set, only the outline descriptor will be released.\n\n\n\n\n\nFT_Outline_Copy\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Copy\n( \nconst\n \nFT_Outline\n*  source,\n                   \nFT_Outline\n        *target );\n\n\n\n\n\n\nCopy an outline into another one. Both objects must have the same sizes (number of points & number of contours) when this function is called.\n\n\ninput\n\n\n\n\n\nsource\n\n\nA handle to the source outline.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ntarget\n\n\nA handle to the target outline.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Outline_Translate\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Outline_Translate\n( \nconst\n \nFT_Outline\n*  outline,\n                        \nFT_Pos\n             xOffset,\n                        \nFT_Pos\n             yOffset );\n\n\n\n\n\n\nApply a simple translation to the points of an outline.\n\n\ninout\n\n\n\n\n\noutline\n\n\nA pointer to the target outline descriptor.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nxOffset\n\n\nThe horizontal offset.\n\n\n\n\nyOffset\n\n\nThe vertical offset.\n\n\n\n\n\n\n\n\n\n\nFT_Outline_Transform\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Outline_Transform\n( \nconst\n \nFT_Outline\n*  outline,\n                        \nconst\n \nFT_Matrix\n*   matrix );\n\n\n\n\n\n\nApply a simple 2x2 matrix to all of an outline's points. Useful for applying rotations, slanting, flipping, etc.\n\n\ninout\n\n\n\n\n\noutline\n\n\nA pointer to the target outline descriptor.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nmatrix\n\n\nA pointer to the transformation matrix.\n\n\n\n\n\n\n\nnote\n\n\n\nYou can use \nFT_Outline_Translate\n if you need to translate the outline's points.\n\n\n\n\n\nFT_Outline_Embolden\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Embolden\n( \nFT_Outline\n*  outline,\n                       \nFT_Pos\n       strength );\n\n\n\n\n\n\nEmbolden an outline. The new outline will be at most 4\u00a0times \u2018strength\u2019 pixels wider and higher. You may think of the left and bottom borders as unchanged.\n\n\nNegative \u2018strength\u2019 values to reduce the outline thickness are possible also.\n\n\ninout\n\n\n\n\n\noutline\n\n\nA handle to the target outline.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nstrength\n\n\nHow strong the glyph is emboldened. Expressed in 26.6 pixel format.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe used algorithm to increase or decrease the thickness of the glyph doesn't change the number of points; this means that certain situations like acute angles or intersections are sometimes handled incorrectly.\n\n\nIf you need \u2018better\u2019 metrics values you should call \nFT_Outline_Get_CBox\n or \nFT_Outline_Get_BBox\n.\n\n\nTo get meaningful results, font scaling values must be set with functions like \nFT_Set_Char_Size\n before calling FT_Render_Glyph.\n\n\nexample\n\n\n\n  FT_Load_Glyph( face, index, FT_LOAD_DEFAULT );\n\n  if ( face->glyph->format == FT_GLYPH_FORMAT_OUTLINE )\n    FT_Outline_Embolden( &face->glyph->outline, strength );\n\n\n\n\n\n\n\nFT_Outline_EmboldenXY\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_EmboldenXY\n( \nFT_Outline\n*  outline,\n                         \nFT_Pos\n       xstrength,\n                         \nFT_Pos\n       ystrength );\n\n\n\n\n\n\nEmbolden an outline. The new outline will be \u2018xstrength\u2019 pixels wider and \u2018ystrength\u2019 pixels higher. Otherwise, it is similar to \nFT_Outline_Embolden\n, which uses the same strength in both directions.\n\n\nsince\n\n\n\n2.4.10\n\n\n\n\n\nFT_Outline_Reverse\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Outline_Reverse\n( \nFT_Outline\n*  outline );\n\n\n\n\n\n\nReverse the drawing direction of an outline. This is used to ensure consistent fill conventions for mirrored glyphs.\n\n\ninout\n\n\n\n\n\noutline\n\n\nA pointer to the target outline descriptor.\n\n\n\n\n\n\n\nnote\n\n\n\nThis function toggles the bit flag \nFT_OUTLINE_REVERSE_FILL\n in the outline's \u2018flags\u2019 field.\n\n\nIt shouldn't be used by a normal client application, unless it knows what it is doing.\n\n\n\n\n\nFT_Outline_Check\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Check\n( \nFT_Outline\n*  outline );\n\n\n\n\n\n\nCheck the contents of an outline descriptor.\n\n\ninput\n\n\n\n\n\noutline\n\n\nA handle to a source outline.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAn empty outline, or an outline with a single point only is also valid.\n\n\n\n\n\nFT_Outline_Get_CBox\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Outline_Get_CBox\n( \nconst\n \nFT_Outline\n*  outline,\n                       \nFT_BBox\n           *acbox );\n\n\n\n\n\n\nReturn an outline's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).\n\n\nComputing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.\n\n\ninput\n\n\n\n\n\noutline\n\n\nA pointer to the source outline descriptor.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nacbox\n\n\nThe outline's control box.\n\n\n\n\n\n\n\nnote\n\n\n\nSee \nFT_Glyph_Get_CBox\n for a discussion of tricky fonts.\n\n\n\n\n\nFT_Outline_Get_BBox\n\u00b6\n\n\nDefined in FT_BBOX_H (freetype/ftbbox.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Get_BBox\n( \nFT_Outline\n*  outline,\n                       \nFT_BBox\n     *abbox );\n\n\n\n\n\n\nCompute the exact bounding box of an outline. This is slower than computing the control box. However, it uses an advanced algorithm that returns \nvery\n quickly when the two boxes coincide. Otherwise, the outline Bezier arcs are traversed to extract their extrema.\n\n\ninput\n\n\n\n\n\noutline\n\n\nA pointer to the source outline.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nabbox\n\n\nThe outline's exact bounding box.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf the font is tricky and the glyph has been loaded with \nFT_LOAD_NO_SCALE\n, the resulting BBox is meaningless. To get reasonable values for the BBox it is necessary to load the glyph at a large ppem value (so that the hinting instructions can properly shift and scale the subglyphs), then extracting the BBox, which can be eventually converted back to font units.\n\n\n\n\n\nFT_Outline_Get_Bitmap\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Get_Bitmap\n( \nFT_Library\n        library,\n                         \nFT_Outline\n*       outline,\n                         \nconst\n \nFT_Bitmap\n  *abitmap );\n\n\n\n\n\n\nRender an outline within a bitmap. The outline's image is simply OR-ed to the target bitmap.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a FreeType library object.\n\n\n\n\noutline\n\n\nA pointer to the source outline descriptor.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nabitmap\n\n\nA pointer to the target bitmap descriptor.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function does NOT CREATE the bitmap, it only renders an outline image within the one you pass to it! Consequently, the various fields in \u2018abitmap\u2019 should be set accordingly.\n\n\nIt will use the raster corresponding to the default glyph format.\n\n\nThe value of the \nnum_grays\n field in \u2018abitmap\u2019 is ignored. If you select the gray-level rasterizer, and you want less than 256 gray levels, you have to use \nFT_Outline_Render\n directly.\n\n\n\n\n\nFT_Outline_Render\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Render\n( \nFT_Library\n         library,\n                     \nFT_Outline\n*        outline,\n                     \nFT_Raster_Params\n*  params );\n\n\n\n\n\n\nRender an outline within a bitmap using the current scan-convert. This function uses an \nFT_Raster_Params\n structure as an argument, allowing advanced features like direct composition, translucency, etc.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a FreeType library object.\n\n\n\n\noutline\n\n\nA pointer to the source outline descriptor.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nparams\n\n\nA pointer to an \nFT_Raster_Params\n structure used to describe the rendering operation.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should know what you are doing and how \nFT_Raster_Params\n works to use this function.\n\n\nThe field \nparams.source\n will be set to \u2018outline\u2019 before the scan converter is called, which means that the value you give to it is actually ignored.\n\n\nThe gray-level rasterizer always uses 256 gray levels. If you want less gray levels, you have to provide your own span callback. See the \nFT_RASTER_FLAG_DIRECT\n value of the \u2018flags\u2019 field in the \nFT_Raster_Params\n structure for more details.\n\n\n\n\n\nFT_Outline_Decompose\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Outline_Decompose\n( \nFT_Outline\n*              outline,\n                        \nconst\n \nFT_Outline_Funcs\n*  func_interface,\n                        \nvoid\n*                    user );\n\n\n\n\n\n\nWalk over an outline's structure to decompose it into individual segments and Bezier arcs. This function also emits \u2018move to\u2019 operations to indicate the start of new contours in the outline.\n\n\ninput\n\n\n\n\n\noutline\n\n\nA pointer to the source target.\n\n\n\n\nfunc_interface\n\n\nA table of \u2018emitters\u2019, i.e., function pointers called during decomposition to indicate path operations.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nuser\n\n\nA typeless pointer that is passed to each emitter during the decomposition. It can be used to store the state during the decomposition.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nA contour that contains a single point only is represented by a \u2018move to\u2019 operation followed by \u2018line to\u2019 to the same point. In most cases, it is best to filter this out before using the outline for stroking purposes (otherwise it would result in a visible dot when round caps are used).\n\n\nSimilarly, the function returns success for an empty outline also (doing nothing, this is, not calling any emitter); if necessary, you should filter this out, too.\n\n\n\n\n\nFT_Outline_Funcs\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Outline_Funcs_\n  {\n    \nFT_Outline_MoveToFunc\n   move_to;\n    \nFT_Outline_LineToFunc\n   line_to;\n    \nFT_Outline_ConicToFunc\n  conic_to;\n    \nFT_Outline_CubicToFunc\n  cubic_to;\n\n    \nint\n                     shift;\n    \nFT_Pos\n                  delta;\n\n  } \nFT_Outline_Funcs\n;\n\n\n\n\n\n\nA structure to hold various function pointers used during outline decomposition in order to emit segments, conic, and cubic Beziers.\n\n\nfields\n\n\n\n\n\nmove_to\n\n\nThe \u2018move to\u2019 emitter.\n\n\n\n\nline_to\n\n\nThe segment emitter.\n\n\n\n\nconic_to\n\n\nThe second-order Bezier arc emitter.\n\n\n\n\ncubic_to\n\n\nThe third-order Bezier arc emitter.\n\n\n\n\nshift\n\n\nThe shift that is applied to coordinates before they are sent to the emitter.\n\n\n\n\ndelta\n\n\nThe delta that is applied to coordinates before they are sent to the emitter, but after the shift.\n\n\n\n\n\n\n\nnote\n\n\n\nThe point coordinates sent to the emitters are the transformed version of the original coordinates (this is important for high accuracy during scan-conversion). The transformation is simple:\n\n  x' = (x << shift) - delta\n  y' = (y << shift) - delta\n\n\n\nSet the values of \u2018shift\u2019 and \u2018delta\u2019 to\u00a00 to get the original point coordinates.\n\n\n\n\n\nFT_Outline_MoveToFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Outline_MoveToFunc\n)( \nconst\n \nFT_Vector\n*  to,\n                            \nvoid\n*             user );\n\n#\ndefine\n FT_Outline_MoveTo_Func  \nFT_Outline_MoveToFunc\n\n\n\n\n\n\n\nA function pointer type used to describe the signature of a \u2018move to\u2019 function during outline walking/decomposition.\n\n\nA \u2018move to\u2019 is emitted to start a new contour in an outline.\n\n\ninput\n\n\n\n\n\nto\n\n\nA pointer to the target point of the \u2018move to\u2019.\n\n\n\n\nuser\n\n\nA typeless pointer, which is passed from the caller of the decomposition function.\n\n\n\n\n\n\n\nreturn\n\n\n\nError code. 0\u00a0means success.\n\n\n\n\n\nFT_Outline_LineToFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Outline_LineToFunc\n)( \nconst\n \nFT_Vector\n*  to,\n                            \nvoid\n*             user );\n\n#\ndefine\n FT_Outline_LineTo_Func  \nFT_Outline_LineToFunc\n\n\n\n\n\n\n\nA function pointer type used to describe the signature of a \u2018line to\u2019 function during outline walking/decomposition.\n\n\nA \u2018line to\u2019 is emitted to indicate a segment in the outline.\n\n\ninput\n\n\n\n\n\nto\n\n\nA pointer to the target point of the \u2018line to\u2019.\n\n\n\n\nuser\n\n\nA typeless pointer, which is passed from the caller of the decomposition function.\n\n\n\n\n\n\n\nreturn\n\n\n\nError code. 0\u00a0means success.\n\n\n\n\n\nFT_Outline_ConicToFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Outline_ConicToFunc\n)( \nconst\n \nFT_Vector\n*  control,\n                             \nconst\n \nFT_Vector\n*  to,\n                             \nvoid\n*             user );\n\n#\ndefine\n FT_Outline_ConicTo_Func  \nFT_Outline_ConicToFunc\n\n\n\n\n\n\n\nA function pointer type used to describe the signature of a \u2018conic to\u2019 function during outline walking or decomposition.\n\n\nA \u2018conic to\u2019 is emitted to indicate a second-order Bezier arc in the outline.\n\n\ninput\n\n\n\n\n\ncontrol\n\n\nAn intermediate control point between the last position and the new target in \u2018to\u2019.\n\n\n\n\nto\n\n\nA pointer to the target end point of the conic arc.\n\n\n\n\nuser\n\n\nA typeless pointer, which is passed from the caller of the decomposition function.\n\n\n\n\n\n\n\nreturn\n\n\n\nError code. 0\u00a0means success.\n\n\n\n\n\nFT_Outline_CubicToFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Outline_CubicToFunc\n)( \nconst\n \nFT_Vector\n*  control1,\n                             \nconst\n \nFT_Vector\n*  control2,\n                             \nconst\n \nFT_Vector\n*  to,\n                             \nvoid\n*             user );\n\n#\ndefine\n FT_Outline_CubicTo_Func  \nFT_Outline_CubicToFunc\n\n\n\n\n\n\n\nA function pointer type used to describe the signature of a \u2018cubic to\u2019 function during outline walking or decomposition.\n\n\nA \u2018cubic to\u2019 is emitted to indicate a third-order Bezier arc.\n\n\ninput\n\n\n\n\n\ncontrol1\n\n\nA pointer to the first Bezier control point.\n\n\n\n\ncontrol2\n\n\nA pointer to the second Bezier control point.\n\n\n\n\nto\n\n\nA pointer to the target end point.\n\n\n\n\nuser\n\n\nA typeless pointer, which is passed from the caller of the decomposition function.\n\n\n\n\n\n\n\nreturn\n\n\n\nError code. 0\u00a0means success.\n\n\n\n\n\nFT_Orientation\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Orientation_\n  {\n    \nFT_ORIENTATION_TRUETYPE\n   = 0,\n    \nFT_ORIENTATION_POSTSCRIPT\n = 1,\n    \nFT_ORIENTATION_FILL_RIGHT\n = \nFT_ORIENTATION_TRUETYPE\n,\n    \nFT_ORIENTATION_FILL_LEFT\n  = \nFT_ORIENTATION_POSTSCRIPT\n,\n    \nFT_ORIENTATION_NONE\n\n\n  } \nFT_Orientation\n;\n\n\n\n\n\n\nA list of values used to describe an outline's contour orientation.\n\n\nThe TrueType and PostScript specifications use different conventions to determine whether outline contours should be filled or unfilled.\n\n\nvalues\n\n\n\n\n\nFT_ORIENTATION_TRUETYPE\n\n\nAccording to the TrueType specification, clockwise contours must be filled, and counter-clockwise ones must be unfilled.\n\n\n\n\nFT_ORIENTATION_POSTSCRIPT\n\n\nAccording to the PostScript specification, counter-clockwise contours must be filled, and clockwise ones must be unfilled.\n\n\n\n\nFT_ORIENTATION_FILL_RIGHT\n\n\nThis is identical to \nFT_ORIENTATION_TRUETYPE\n, but is used to remember that in TrueType, everything that is to the right of the drawing direction of a contour must be filled.\n\n\n\n\nFT_ORIENTATION_FILL_LEFT\n\n\nThis is identical to \nFT_ORIENTATION_POSTSCRIPT\n, but is used to remember that in PostScript, everything that is to the left of the drawing direction of a contour must be filled.\n\n\n\n\nFT_ORIENTATION_NONE\n\n\nThe orientation cannot be determined. That is, different parts of the glyph have different orientation.\n\n\n\n\n\n\n\n\n\n\nFT_Outline_Get_Orientation\n\u00b6\n\n\nDefined in FT_OUTLINE_H (freetype/ftoutln.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Orientation\n )\n  \nFT_Outline_Get_Orientation\n( \nFT_Outline\n*  outline );\n\n\n\n\n\n\nThis function analyzes a glyph outline and tries to compute its fill orientation (see \nFT_Orientation\n). This is done by integrating the total area covered by the outline. The positive integral corresponds to the clockwise orientation and \nFT_ORIENTATION_POSTSCRIPT\n is returned. The negative integral corresponds to the counter-clockwise orientation and \nFT_ORIENTATION_TRUETYPE\n is returned.\n\n\nNote that this will return \nFT_ORIENTATION_TRUETYPE\n for empty outlines.\n\n\ninput\n\n\n\n\n\noutline\n\n\nA handle to the source outline.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe orientation.\n\n\n\n\n\nFT_OUTLINE_XXX\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n#\ndefine\n \nFT_OUTLINE_NONE\n             0x0\n#\ndefine\n \nFT_OUTLINE_OWNER\n            0x1\n#\ndefine\n \nFT_OUTLINE_EVEN_ODD_FILL\n    0x2\n#\ndefine\n \nFT_OUTLINE_REVERSE_FILL\n     0x4\n#\ndefine\n \nFT_OUTLINE_IGNORE_DROPOUTS\n  0x8\n#\ndefine\n \nFT_OUTLINE_SMART_DROPOUTS\n   0x10\n#\ndefine\n \nFT_OUTLINE_INCLUDE_STUBS\n    0x20\n\n#\ndefine\n \nFT_OUTLINE_HIGH_PRECISION\n   0x100\n#\ndefine\n \nFT_OUTLINE_SINGLE_PASS\n      0x200\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_OUTLINE_XXX\n' values instead                       */\n#\ndefine\n ft_outline_none             \nFT_OUTLINE_NONE\n\n#\ndefine\n ft_outline_owner            \nFT_OUTLINE_OWNER\n\n#\ndefine\n ft_outline_even_odd_fill    \nFT_OUTLINE_EVEN_ODD_FILL\n\n#\ndefine\n ft_outline_reverse_fill     \nFT_OUTLINE_REVERSE_FILL\n\n#\ndefine\n ft_outline_ignore_dropouts  \nFT_OUTLINE_IGNORE_DROPOUTS\n\n#\ndefine\n ft_outline_high_precision   \nFT_OUTLINE_HIGH_PRECISION\n\n#\ndefine\n ft_outline_single_pass      \nFT_OUTLINE_SINGLE_PASS\n\n\n\n\n\n\n\nA list of bit-field constants use for the flags in an outline's \u2018flags\u2019 field.\n\n\nvalues\n\n\n\n\n\nFT_OUTLINE_NONE\n\n\nValue\u00a00 is reserved.\n\n\n\n\nFT_OUTLINE_OWNER\n\n\nIf set, this flag indicates that the outline's field arrays (i.e., \u2018points\u2019, \u2018flags\u2019, and \u2018contours\u2019) are \u2018owned\u2019 by the outline object, and should thus be freed when it is destroyed.\n\n\n\n\nFT_OUTLINE_EVEN_ODD_FILL\n\n\nBy default, outlines are filled using the non-zero winding rule. If set to 1, the outline will be filled using the even-odd fill rule (only works with the smooth rasterizer).\n\n\n\n\nFT_OUTLINE_REVERSE_FILL\n\n\nBy default, outside contours of an outline are oriented in clock-wise direction, as defined in the TrueType specification. This flag is set if the outline uses the opposite direction (typically for Type\u00a01 fonts). This flag is ignored by the scan converter.\n\n\n\n\nFT_OUTLINE_IGNORE_DROPOUTS\n\n\nBy default, the scan converter will try to detect drop-outs in an outline and correct the glyph bitmap to ensure consistent shape continuity. If set, this flag hints the scan-line converter to ignore such cases. See below for more information.\n\n\n\n\nFT_OUTLINE_SMART_DROPOUTS\n\n\nSelect smart dropout control. If unset, use simple dropout control. Ignored if \nFT_OUTLINE_IGNORE_DROPOUTS\n is set. See below for more information.\n\n\n\n\nFT_OUTLINE_INCLUDE_STUBS\n\n\nIf set, turn pixels on for \u2018stubs\u2019, otherwise exclude them. Ignored if \nFT_OUTLINE_IGNORE_DROPOUTS\n is set. See below for more information.\n\n\n\n\nFT_OUTLINE_HIGH_PRECISION\n\n\nThis flag indicates that the scan-line converter should try to convert this outline to bitmaps with the highest possible quality. It is typically set for small character sizes. Note that this is only a hint that might be completely ignored by a given scan-converter.\n\n\n\n\nFT_OUTLINE_SINGLE_PASS\n\n\nThis flag is set to force a given scan-converter to only use a single pass over the outline to render a bitmap glyph image. Normally, it is set for very large character sizes. It is only a hint that might be completely ignored by a given scan-converter.\n\n\n\n\n\n\n\nnote\n\n\n\nThe flags \nFT_OUTLINE_IGNORE_DROPOUTS\n, \nFT_OUTLINE_SMART_DROPOUTS\n, and \nFT_OUTLINE_INCLUDE_STUBS\n are ignored by the smooth rasterizer.\n\n\nThere exists a second mechanism to pass the drop-out mode to the B/W rasterizer; see the \u2018tags\u2019 field in \nFT_Outline\n.\n\n\nPlease refer to the description of the \u2018SCANTYPE\u2019 instruction in the OpenType specification (in file \nttinst1.doc\n) how simple drop-outs, smart drop-outs, and stubs are defined.",
            "title": "Outline Processing"
        },
        {
            "location": "/ft2-outline_processing/index.html#outline-processing",
            "text": "",
            "title": "Outline Processing"
        },
        {
            "location": "/ft2-outline_processing/index.html#synopsis",
            "text": "This section contains routines used to create and destroy scalable glyph images known as \u2018outlines\u2019. These can also be measured, transformed, and converted into bitmaps and pixmaps.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Outline_\n  {\n     short        n_contours;      /* number of contours in glyph        */\n     short        n_points;        /* number of points in the glyph      */\n\n     FT_Vector *  points;          /* the outline's points               */\n     char *       tags;            /* the points flags                   */\n     short *      contours;        /* the contour end points             */\n\n     int          flags;           /* outline masks                      */\n\n  }  FT_Outline ;   This structure is used to describe an outline to the scan-line converter.",
            "title": "FT_Outline"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_new",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_New (  FT_Library    library,\n                   FT_UInt       numPoints,\n                   FT_Int        numContours,\n                   FT_Outline   *anoutline );\n\n  FT_EXPORT(  FT_Error  )\n  FT_Outline_New_Internal(  FT_Memory     memory,\n                            FT_UInt       numPoints,\n                            FT_Int        numContours,\n                            FT_Outline   *anoutline );   Create a new outline of a given size.",
            "title": "FT_Outline_New"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_done",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Done (  FT_Library    library,\n                    FT_Outline *  outline );\n\n  FT_EXPORT(  FT_Error  )\n  FT_Outline_Done_Internal(  FT_Memory     memory,\n                             FT_Outline *  outline );   Destroy an outline created with  FT_Outline_New .",
            "title": "FT_Outline_Done"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_copy",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Copy (  const   FT_Outline *  source,\n                    FT_Outline         *target );   Copy an outline into another one. Both objects must have the same sizes (number of points & number of contours) when this function is called.",
            "title": "FT_Outline_Copy"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_translate",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  void  )\n   FT_Outline_Translate (  const   FT_Outline *  outline,\n                         FT_Pos              xOffset,\n                         FT_Pos              yOffset );   Apply a simple translation to the points of an outline.",
            "title": "FT_Outline_Translate"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_transform",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  void  )\n   FT_Outline_Transform (  const   FT_Outline *  outline,\n                         const   FT_Matrix *   matrix );   Apply a simple 2x2 matrix to all of an outline's points. Useful for applying rotations, slanting, flipping, etc.",
            "title": "FT_Outline_Transform"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_embolden",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Embolden (  FT_Outline *  outline,\n                        FT_Pos        strength );   Embolden an outline. The new outline will be at most 4\u00a0times \u2018strength\u2019 pixels wider and higher. You may think of the left and bottom borders as unchanged.  Negative \u2018strength\u2019 values to reduce the outline thickness are possible also.",
            "title": "FT_Outline_Embolden"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_emboldenxy",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_EmboldenXY (  FT_Outline *  outline,\n                          FT_Pos        xstrength,\n                          FT_Pos        ystrength );   Embolden an outline. The new outline will be \u2018xstrength\u2019 pixels wider and \u2018ystrength\u2019 pixels higher. Otherwise, it is similar to  FT_Outline_Embolden , which uses the same strength in both directions.",
            "title": "FT_Outline_EmboldenXY"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_reverse",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  void  )\n   FT_Outline_Reverse (  FT_Outline *  outline );   Reverse the drawing direction of an outline. This is used to ensure consistent fill conventions for mirrored glyphs.",
            "title": "FT_Outline_Reverse"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_check",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Check (  FT_Outline *  outline );   Check the contents of an outline descriptor.",
            "title": "FT_Outline_Check"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_get_cbox",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  void  )\n   FT_Outline_Get_CBox (  const   FT_Outline *  outline,\n                        FT_BBox            *acbox );   Return an outline's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).  Computing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.",
            "title": "FT_Outline_Get_CBox"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_get_bbox",
            "text": "Defined in FT_BBOX_H (freetype/ftbbox.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Get_BBox (  FT_Outline *  outline,\n                        FT_BBox      *abbox );   Compute the exact bounding box of an outline. This is slower than computing the control box. However, it uses an advanced algorithm that returns  very  quickly when the two boxes coincide. Otherwise, the outline Bezier arcs are traversed to extract their extrema.",
            "title": "FT_Outline_Get_BBox"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_get_bitmap",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Get_Bitmap (  FT_Library         library,\n                          FT_Outline *       outline,\n                          const   FT_Bitmap   *abitmap );   Render an outline within a bitmap. The outline's image is simply OR-ed to the target bitmap.",
            "title": "FT_Outline_Get_Bitmap"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_render",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Render (  FT_Library          library,\n                      FT_Outline *        outline,\n                      FT_Raster_Params *  params );   Render an outline within a bitmap using the current scan-convert. This function uses an  FT_Raster_Params  structure as an argument, allowing advanced features like direct composition, translucency, etc.",
            "title": "FT_Outline_Render"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_decompose",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Outline_Decompose (  FT_Outline *              outline,\n                         const   FT_Outline_Funcs *  func_interface,\n                         void *                    user );   Walk over an outline's structure to decompose it into individual segments and Bezier arcs. This function also emits \u2018move to\u2019 operations to indicate the start of new contours in the outline.",
            "title": "FT_Outline_Decompose"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_funcs",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Outline_Funcs_\n  {\n     FT_Outline_MoveToFunc    move_to;\n     FT_Outline_LineToFunc    line_to;\n     FT_Outline_ConicToFunc   conic_to;\n     FT_Outline_CubicToFunc   cubic_to;\n\n     int                      shift;\n     FT_Pos                   delta;\n\n  }  FT_Outline_Funcs ;   A structure to hold various function pointers used during outline decomposition in order to emit segments, conic, and cubic Beziers.",
            "title": "FT_Outline_Funcs"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_movetofunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Outline_MoveToFunc )(  const   FT_Vector *  to,\n                             void *             user );\n\n# define  FT_Outline_MoveTo_Func   FT_Outline_MoveToFunc    A function pointer type used to describe the signature of a \u2018move to\u2019 function during outline walking/decomposition.  A \u2018move to\u2019 is emitted to start a new contour in an outline.",
            "title": "FT_Outline_MoveToFunc"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_linetofunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Outline_LineToFunc )(  const   FT_Vector *  to,\n                             void *             user );\n\n# define  FT_Outline_LineTo_Func   FT_Outline_LineToFunc    A function pointer type used to describe the signature of a \u2018line to\u2019 function during outline walking/decomposition.  A \u2018line to\u2019 is emitted to indicate a segment in the outline.",
            "title": "FT_Outline_LineToFunc"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_conictofunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Outline_ConicToFunc )(  const   FT_Vector *  control,\n                              const   FT_Vector *  to,\n                              void *             user );\n\n# define  FT_Outline_ConicTo_Func   FT_Outline_ConicToFunc    A function pointer type used to describe the signature of a \u2018conic to\u2019 function during outline walking or decomposition.  A \u2018conic to\u2019 is emitted to indicate a second-order Bezier arc in the outline.",
            "title": "FT_Outline_ConicToFunc"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_cubictofunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Outline_CubicToFunc )(  const   FT_Vector *  control1,\n                              const   FT_Vector *  control2,\n                              const   FT_Vector *  to,\n                              void *             user );\n\n# define  FT_Outline_CubicTo_Func   FT_Outline_CubicToFunc    A function pointer type used to describe the signature of a \u2018cubic to\u2019 function during outline walking or decomposition.  A \u2018cubic to\u2019 is emitted to indicate a third-order Bezier arc.",
            "title": "FT_Outline_CubicToFunc"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_orientation",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n   typedef   enum   FT_Orientation_\n  {\n     FT_ORIENTATION_TRUETYPE    = 0,\n     FT_ORIENTATION_POSTSCRIPT  = 1,\n     FT_ORIENTATION_FILL_RIGHT  =  FT_ORIENTATION_TRUETYPE ,\n     FT_ORIENTATION_FILL_LEFT   =  FT_ORIENTATION_POSTSCRIPT ,\n     FT_ORIENTATION_NONE \n\n  }  FT_Orientation ;   A list of values used to describe an outline's contour orientation.  The TrueType and PostScript specifications use different conventions to determine whether outline contours should be filled or unfilled.",
            "title": "FT_Orientation"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_get_orientation",
            "text": "Defined in FT_OUTLINE_H (freetype/ftoutln.h).   \n  FT_EXPORT(  FT_Orientation  )\n   FT_Outline_Get_Orientation (  FT_Outline *  outline );   This function analyzes a glyph outline and tries to compute its fill orientation (see  FT_Orientation ). This is done by integrating the total area covered by the outline. The positive integral corresponds to the clockwise orientation and  FT_ORIENTATION_POSTSCRIPT  is returned. The negative integral corresponds to the counter-clockwise orientation and  FT_ORIENTATION_TRUETYPE  is returned.  Note that this will return  FT_ORIENTATION_TRUETYPE  for empty outlines.",
            "title": "FT_Outline_Get_Orientation"
        },
        {
            "location": "/ft2-outline_processing/index.html#ft_outline_xxx",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n# define   FT_OUTLINE_NONE              0x0\n# define   FT_OUTLINE_OWNER             0x1\n# define   FT_OUTLINE_EVEN_ODD_FILL     0x2\n# define   FT_OUTLINE_REVERSE_FILL      0x4\n# define   FT_OUTLINE_IGNORE_DROPOUTS   0x8\n# define   FT_OUTLINE_SMART_DROPOUTS    0x10\n# define   FT_OUTLINE_INCLUDE_STUBS     0x20\n\n# define   FT_OUTLINE_HIGH_PRECISION    0x100\n# define   FT_OUTLINE_SINGLE_PASS       0x200\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_OUTLINE_XXX ' values instead                       */\n# define  ft_outline_none              FT_OUTLINE_NONE \n# define  ft_outline_owner             FT_OUTLINE_OWNER \n# define  ft_outline_even_odd_fill     FT_OUTLINE_EVEN_ODD_FILL \n# define  ft_outline_reverse_fill      FT_OUTLINE_REVERSE_FILL \n# define  ft_outline_ignore_dropouts   FT_OUTLINE_IGNORE_DROPOUTS \n# define  ft_outline_high_precision    FT_OUTLINE_HIGH_PRECISION \n# define  ft_outline_single_pass       FT_OUTLINE_SINGLE_PASS    A list of bit-field constants use for the flags in an outline's \u2018flags\u2019 field.",
            "title": "FT_OUTLINE_XXX"
        },
        {
            "location": "/ft2-quick_advance/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Quick retrieval of advance values\n\n\n\n\nQuick retrieval of advance values\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains functions to quickly extract advance values without handling glyph outlines, if possible.\n\n\nFT_Get_Advance\n\u00b6\n\n\nDefined in FT_ADVANCES_H (freetype/ftadvanc.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Advance\n( \nFT_Face\n    face,\n                  \nFT_UInt\n    gindex,\n                  \nFT_Int32\n   load_flags,\n                  \nFT_Fixed\n  *padvance );\n\n\n\n\n\n\nRetrieve the advance value of a given glyph outline in an \nFT_Face\n.\n\n\ninput\n\n\n\n\n\nface\n\n\nThe source \nFT_Face\n handle.\n\n\n\n\ngindex\n\n\nThe glyph index.\n\n\n\n\nload_flags\n\n\nA set of bit flags similar to those used when calling \nFT_Load_Glyph\n, used to determine what kind of advances you need.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\npadvance\n\n\nThe advance value. If scaling is performed (based on the value of \nload_flags\n), the advance value is in 16.16 format. Otherwise, it is in font units.\nIf \nFT_LOAD_VERTICAL_LAYOUT\n is set, this is the vertical advance corresponding to a vertical layout. Otherwise, it is the horizontal advance in a horizontal layout.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0 means success.\n\n\nnote\n\n\n\nThis function may fail if you use \nFT_ADVANCE_FLAG_FAST_ONLY\n and if the corresponding font backend doesn't have a quick way to retrieve the advances.\n\n\nA scaled advance is returned in 16.16 format but isn't transformed by the affine transformation specified by \nFT_Set_Transform\n.\n\n\n\n\n\nFT_Get_Advances\n\u00b6\n\n\nDefined in FT_ADVANCES_H (freetype/ftadvanc.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Get_Advances\n( \nFT_Face\n    face,\n                   \nFT_UInt\n    start,\n                   \nFT_UInt\n    count,\n                   \nFT_Int32\n   load_flags,\n                   \nFT_Fixed\n  *padvances );\n\n\n\n\n\n\nRetrieve the advance values of several glyph outlines in an \nFT_Face\n.\n\n\ninput\n\n\n\n\n\nface\n\n\nThe source \nFT_Face\n handle.\n\n\n\n\nstart\n\n\nThe first glyph index.\n\n\n\n\ncount\n\n\nThe number of advance values you want to retrieve.\n\n\n\n\nload_flags\n\n\nA set of bit flags similar to those used when calling \nFT_Load_Glyph\n.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\npadvance\n\n\nThe advance values. This array, to be provided by the caller, must contain at least \u2018count\u2019 elements.\nIf scaling is performed (based on the value of \nload_flags\n), the advance values are in 16.16 format. Otherwise, they are in font units.\nIf \nFT_LOAD_VERTICAL_LAYOUT\n is set, these are the vertical advances corresponding to a vertical layout. Otherwise, they are the horizontal advances in a horizontal layout.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0 means success.\n\n\nnote\n\n\n\nThis function may fail if you use \nFT_ADVANCE_FLAG_FAST_ONLY\n and if the corresponding font backend doesn't have a quick way to retrieve the advances.\n\n\nScaled advances are returned in 16.16 format but aren't transformed by the affine transformation specified by \nFT_Set_Transform\n.\n\n\n\n\n\nFT_ADVANCE_FLAG_FAST_ONLY\n\u00b6\n\n\nDefined in FT_ADVANCES_H (freetype/ftadvanc.h).\n\n\n\n\n\n#\ndefine\n \nFT_ADVANCE_FLAG_FAST_ONLY\n  0x20000000L\n\n\n\n\n\n\nA bit-flag to be OR-ed with the \u2018flags\u2019 parameter of the \nFT_Get_Advance\n and \nFT_Get_Advances\n functions.\n\n\nIf set, it indicates that you want these functions to fail if the corresponding hinting mode or font driver doesn't allow for very quick advance computation.\n\n\nTypically, glyphs that are either unscaled, unhinted, bitmapped, or light-hinted can have their advance width computed very quickly.\n\n\nNormal and bytecode hinted modes that require loading, scaling, and hinting of the glyph outline, are extremely slow by comparison.",
            "title": "Quick retrieval of advance values"
        },
        {
            "location": "/ft2-quick_advance/index.html#quick-retrieval-of-advance-values",
            "text": "",
            "title": "Quick retrieval of advance values"
        },
        {
            "location": "/ft2-quick_advance/index.html#synopsis",
            "text": "This section contains functions to quickly extract advance values without handling glyph outlines, if possible.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-quick_advance/index.html#ft_get_advance",
            "text": "Defined in FT_ADVANCES_H (freetype/ftadvanc.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Advance (  FT_Face     face,\n                   FT_UInt     gindex,\n                   FT_Int32    load_flags,\n                   FT_Fixed   *padvance );   Retrieve the advance value of a given glyph outline in an  FT_Face .",
            "title": "FT_Get_Advance"
        },
        {
            "location": "/ft2-quick_advance/index.html#ft_get_advances",
            "text": "Defined in FT_ADVANCES_H (freetype/ftadvanc.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Get_Advances (  FT_Face     face,\n                    FT_UInt     start,\n                    FT_UInt     count,\n                    FT_Int32    load_flags,\n                    FT_Fixed   *padvances );   Retrieve the advance values of several glyph outlines in an  FT_Face .",
            "title": "FT_Get_Advances"
        },
        {
            "location": "/ft2-quick_advance/index.html#ft_advance_flag_fast_only",
            "text": "Defined in FT_ADVANCES_H (freetype/ftadvanc.h).   \n# define   FT_ADVANCE_FLAG_FAST_ONLY   0x20000000L   A bit-flag to be OR-ed with the \u2018flags\u2019 parameter of the  FT_Get_Advance  and  FT_Get_Advances  functions.  If set, it indicates that you want these functions to fail if the corresponding hinting mode or font driver doesn't allow for very quick advance computation.  Typically, glyphs that are either unscaled, unhinted, bitmapped, or light-hinted can have their advance width computed very quickly.  Normal and bytecode hinted modes that require loading, scaling, and hinting of the glyph outline, are extremely slow by comparison.",
            "title": "FT_ADVANCE_FLAG_FAST_ONLY"
        },
        {
            "location": "/ft2-bitmap_handling/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Bitmap Handling\n\n\n\n\nBitmap Handling\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains functions for handling \nFT_Bitmap\n objects. Note that none of the functions changes the bitmap's \u2018flow\u2019 (as indicated by the sign of the \u2018pitch\u2019 field in \nFT_Bitmap\n).\n\n\nFT_Bitmap_Init\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Bitmap_Init\n( \nFT_Bitmap\n  *abitmap );\n\n  /* deprecated */\n  FT_EXPORT( \nvoid\n )\n  FT_Bitmap_New( \nFT_Bitmap\n  *abitmap );\n\n\n\n\n\n\nInitialize a pointer to an \nFT_Bitmap\n structure.\n\n\ninout\n\n\n\n\n\nabitmap\n\n\nA pointer to the bitmap structure.\n\n\n\n\n\n\n\nnote\n\n\n\nA deprecated name for the same function is \nFT_Bitmap_New\n.\n\n\n\n\n\nFT_Bitmap_Copy\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Bitmap_Copy\n( \nFT_Library\n        library,\n                  \nconst\n \nFT_Bitmap\n  *source,\n                  \nFT_Bitmap\n        *target );\n\n\n\n\n\n\nCopy a bitmap into another one.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a library object.\n\n\n\n\nsource\n\n\nA handle to the source bitmap.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ntarget\n\n\nA handle to the target bitmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Bitmap_Embolden\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Bitmap_Embolden\n( \nFT_Library\n  library,\n                      \nFT_Bitmap\n*  bitmap,\n                      \nFT_Pos\n      xStrength,\n                      \nFT_Pos\n      yStrength );\n\n\n\n\n\n\nEmbolden a bitmap. The new bitmap will be about \nxStrength\n pixels wider and \nyStrength\n pixels higher. The left and bottom borders are kept unchanged.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a library object.\n\n\n\n\nxStrength\n\n\nHow strong the glyph is emboldened horizontally. Expressed in 26.6 pixel format.\n\n\n\n\nyStrength\n\n\nHow strong the glyph is emboldened vertically. Expressed in 26.6 pixel format.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nbitmap\n\n\nA handle to the target bitmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe current implementation restricts \nxStrength\n to be less than or equal to\u00a08 if bitmap is of pixel_mode \nFT_PIXEL_MODE_MONO\n.\n\n\nIf you want to embolden the bitmap owned by a \nFT_GlyphSlotRec\n, you should call \nFT_GlyphSlot_Own_Bitmap\n on the slot first.\n\n\nBitmaps in \nFT_PIXEL_MODE_GRAY2\n and \nFT_PIXEL_MODE_GRAY\n@ format are converted to \nFT_PIXEL_MODE_GRAY\n format (i.e., 8bpp).\n\n\n\n\n\nFT_Bitmap_Convert\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Bitmap_Convert\n( \nFT_Library\n        library,\n                     \nconst\n \nFT_Bitmap\n  *source,\n                     \nFT_Bitmap\n        *target,\n                     \nFT_Int\n            alignment );\n\n\n\n\n\n\nConvert a bitmap object with depth 1bpp, 2bpp, 4bpp, 8bpp or 32bpp to a bitmap object with depth 8bpp, making the number of used bytes per line (a.k.a. the \u2018pitch\u2019) a multiple of \u2018alignment\u2019.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a library object.\n\n\n\n\nsource\n\n\nThe source bitmap.\n\n\n\n\nalignment\n\n\nThe pitch of the bitmap is a multiple of this argument. Common values are 1, 2, or 4.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ntarget\n\n\nThe target bitmap.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIt is possible to call \nFT_Bitmap_Convert\n multiple times without calling \nFT_Bitmap_Done\n (the memory is simply reallocated).\n\n\nUse \nFT_Bitmap_Done\n to finally remove the bitmap object.\n\n\nThe \u2018library\u2019 argument is taken to have access to FreeType's memory handling functions.\n\n\n\n\n\nFT_Bitmap_Blend\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Bitmap_Blend\n( \nFT_Library\n         library,\n                   \nconst\n \nFT_Bitmap\n*   source,\n                   \nconst\n \nFT_Vector\n    source_offset,\n                   \nFT_Bitmap\n*         target,\n                   \nFT_Vector\n         *atarget_offset,\n                   \nFT_Color\n           color );\n\n\n\n\n\n\nBlend a bitmap onto another bitmap, using a given color.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a library object.\n\n\n\n\nsource\n\n\nThe source bitmap, which can have any \nFT_Pixel_Mode\n format.\n\n\n\n\nsource_offset\n\n\nThe offset vector to the upper left corner of the source bitmap in 26.6 pixel format. This can be a fractional pixel value.\n\n\n\n\ncolor\n\n\nThe color used to draw \u2018source\u2019 onto \u2018target\u2019.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\ntarget\n\n\nA handle to an \nFT_Bitmap\n object. It should be either initialized as empty with a call to \nFT_Bitmap_Init\n, or it should be of type \nFT_PIXEL_MODE_BGRA\n.\n\n\n\n\natarget_offset\n\n\nThe offset vector to the upper left corner of the target bitmap in 26.6 pixel format. It should represent an integer offset; the function will set the lowest six bits to zero to enforce that.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function doesn't perform clipping.\n\n\nThe bitmap in \u2018target\u2019 gets allocated or reallocated as needed; the vector \natarget_offset\n is updated accordingly.\n\n\nIn case of allocation or reallocation, the bitmap's pitch is set to \u20184\u00a0*\u00a0width\u2019. Both \u2018source\u2019 and \u2018target\u2019 must have the same bitmap flow (as indicated by the sign of the \u2018pitch\u2019 field).\n\n\nsince\n\n\n\n2.10\n\n\n\n\n\nFT_GlyphSlot_Own_Bitmap\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_GlyphSlot_Own_Bitmap\n( \nFT_GlyphSlot\n  slot );\n\n\n\n\n\n\nMake sure that a glyph slot owns \nslot->bitmap\n.\n\n\ninput\n\n\n\n\n\nslot\n\n\nThe glyph slot.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function is to be used in combination with \nFT_Bitmap_Embolden\n.\n\n\n\n\n\nFT_Bitmap_Done\n\u00b6\n\n\nDefined in FT_BITMAP_H (freetype/ftbitmap.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Bitmap_Done\n( \nFT_Library\n  library,\n                  \nFT_Bitmap\n  *bitmap );\n\n\n\n\n\n\nDestroy a bitmap object initialized with \nFT_Bitmap_Init\n.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a library object.\n\n\n\n\nbitmap\n\n\nThe bitmap object to be freed.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe \u2018library\u2019 argument is taken to have access to FreeType's memory handling functions.",
            "title": "Bitmap Handling"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#bitmap-handling",
            "text": "",
            "title": "Bitmap Handling"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#synopsis",
            "text": "This section contains functions for handling  FT_Bitmap  objects. Note that none of the functions changes the bitmap's \u2018flow\u2019 (as indicated by the sign of the \u2018pitch\u2019 field in  FT_Bitmap ).",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_bitmap_init",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  void  )\n   FT_Bitmap_Init (  FT_Bitmap   *abitmap );\n\n  /* deprecated */\n  FT_EXPORT(  void  )\n  FT_Bitmap_New(  FT_Bitmap   *abitmap );   Initialize a pointer to an  FT_Bitmap  structure.",
            "title": "FT_Bitmap_Init"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_bitmap_copy",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Bitmap_Copy (  FT_Library         library,\n                   const   FT_Bitmap   *source,\n                   FT_Bitmap         *target );   Copy a bitmap into another one.",
            "title": "FT_Bitmap_Copy"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_bitmap_embolden",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Bitmap_Embolden (  FT_Library   library,\n                       FT_Bitmap *  bitmap,\n                       FT_Pos       xStrength,\n                       FT_Pos       yStrength );   Embolden a bitmap. The new bitmap will be about  xStrength  pixels wider and  yStrength  pixels higher. The left and bottom borders are kept unchanged.",
            "title": "FT_Bitmap_Embolden"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_bitmap_convert",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Bitmap_Convert (  FT_Library         library,\n                      const   FT_Bitmap   *source,\n                      FT_Bitmap         *target,\n                      FT_Int             alignment );   Convert a bitmap object with depth 1bpp, 2bpp, 4bpp, 8bpp or 32bpp to a bitmap object with depth 8bpp, making the number of used bytes per line (a.k.a. the \u2018pitch\u2019) a multiple of \u2018alignment\u2019.",
            "title": "FT_Bitmap_Convert"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_bitmap_blend",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Bitmap_Blend (  FT_Library          library,\n                    const   FT_Bitmap *   source,\n                    const   FT_Vector     source_offset,\n                    FT_Bitmap *         target,\n                    FT_Vector          *atarget_offset,\n                    FT_Color            color );   Blend a bitmap onto another bitmap, using a given color.",
            "title": "FT_Bitmap_Blend"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_glyphslot_own_bitmap",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_GlyphSlot_Own_Bitmap (  FT_GlyphSlot   slot );   Make sure that a glyph slot owns  slot->bitmap .",
            "title": "FT_GlyphSlot_Own_Bitmap"
        },
        {
            "location": "/ft2-bitmap_handling/index.html#ft_bitmap_done",
            "text": "Defined in FT_BITMAP_H (freetype/ftbitmap.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Bitmap_Done (  FT_Library   library,\n                   FT_Bitmap   *bitmap );   Destroy a bitmap object initialized with  FT_Bitmap_Init .",
            "title": "FT_Bitmap_Done"
        },
        {
            "location": "/ft2-raster/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Scanline Converter\n\n\n\n\nScanline Converter\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains technical definitions.\n\n\nFT_Raster\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_RasterRec_*  \nFT_Raster\n;\n\n\n\n\n\n\nAn opaque handle (pointer) to a raster object. Each object can be used independently to convert an outline into a bitmap or pixmap.\n\n\n\n\n\nFT_Span\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Span_\n  {\n    \nshort\n           x;\n    \nunsigned\n \nshort\n  len;\n    \nunsigned\n \nchar\n   coverage;\n\n  } \nFT_Span\n;\n\n\n\n\n\n\nA structure used to model a single span of gray pixels when rendering an anti-aliased bitmap.\n\n\nfields\n\n\n\n\n\nx\n\n\nThe span's horizontal start position.\n\n\n\n\nlen\n\n\nThe span's length in pixels.\n\n\n\n\ncoverage\n\n\nThe span color/coverage, ranging from 0 (background) to 255 (foreground).\n\n\n\n\n\n\n\nnote\n\n\n\nThis structure is used by the span drawing callback type named \nFT_SpanFunc\n that takes the y\u00a0coordinate of the span as a parameter.\n\n\nThe coverage value is always between 0 and 255. If you want less gray values, the callback function has to reduce them.\n\n\n\n\n\nFT_SpanFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_SpanFunc\n)( \nint\n             y,\n                  \nint\n             count,\n                  \nconst\n \nFT_Span\n*  spans,\n                  \nvoid\n*           user );\n\n#\ndefine\n FT_Raster_Span_Func  \nFT_SpanFunc\n\n\n\n\n\n\n\nA function used as a call-back by the anti-aliased renderer in order to let client applications draw themselves the gray pixel spans on each scan line.\n\n\ninput\n\n\n\n\n\ny\n\n\nThe scanline's y\u00a0coordinate.\n\n\n\n\ncount\n\n\nThe number of spans to draw on this scanline.\n\n\n\n\nspans\n\n\nA table of \u2018count\u2019 spans to draw on the scanline.\n\n\n\n\nuser\n\n\nUser-supplied data that is passed to the callback.\n\n\n\n\n\n\n\nnote\n\n\n\nThis callback allows client applications to directly render the gray spans of the anti-aliased bitmap to any kind of surfaces.\n\n\nThis can be used to write anti-aliased outlines directly to a given background bitmap, and even perform translucency.\n\n\n\n\n\nFT_Raster_Params\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Raster_Params_\n  {\n    \nconst\n \nFT_Bitmap\n*        target;\n    \nconst\n \nvoid\n*             source;\n    \nint\n                     flags;\n    \nFT_SpanFunc\n             gray_spans;\n    \nFT_SpanFunc\n             black_spans;  /* unused */\n    \nFT_Raster_BitTest_Func\n  bit_test;     /* unused */\n    \nFT_Raster_BitSet_Func\n   bit_set;      /* unused */\n    \nvoid\n*                   user;\n    \nFT_BBox\n                 clip_box;\n\n  } \nFT_Raster_Params\n;\n\n\n\n\n\n\nA structure to hold the arguments used by a raster's render function.\n\n\nfields\n\n\n\n\n\ntarget\n\n\nThe target bitmap.\n\n\n\n\nsource\n\n\nA pointer to the source glyph image (e.g., an \nFT_Outline\n).\n\n\n\n\nflags\n\n\nThe rendering flags.\n\n\n\n\ngray_spans\n\n\nThe gray span drawing callback.\n\n\n\n\nblack_spans\n\n\nUnused.\n\n\n\n\nbit_test\n\n\nUnused.\n\n\n\n\nbit_set\n\n\nUnused.\n\n\n\n\nuser\n\n\nUser-supplied data that is passed to each drawing callback.\n\n\n\n\nclip_box\n\n\nAn optional clipping box. It is only used in direct rendering mode. Note that coordinates here should be expressed in \ninteger\n pixels (and not in 26.6 fixed-point units).\n\n\n\n\n\n\n\nnote\n\n\n\nAn anti-aliased glyph bitmap is drawn if the \nFT_RASTER_FLAG_AA\n bit flag is set in the \u2018flags\u2019 field, otherwise a monochrome bitmap is generated.\n\n\nIf the \nFT_RASTER_FLAG_DIRECT\n bit flag is set in \u2018flags\u2019, the raster will call the \ngray_spans\n callback to draw gray pixel spans. This allows direct composition over a pre-existing bitmap through user-provided callbacks to perform the span drawing and composition. Not supported by the monochrome rasterizer.\n\n\n\n\n\nFT_RASTER_FLAG_XXX\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n#\ndefine\n \nFT_RASTER_FLAG_DEFAULT\n  0x0\n#\ndefine\n \nFT_RASTER_FLAG_AA\n       0x1\n#\ndefine\n \nFT_RASTER_FLAG_DIRECT\n   0x2\n#\ndefine\n \nFT_RASTER_FLAG_CLIP\n     0x4\n\n  /* these constants are deprecated; use the corresponding */\n  /* `\nFT_RASTER_FLAG_XXX\n' values instead                   */\n#\ndefine\n ft_raster_flag_default  \nFT_RASTER_FLAG_DEFAULT\n\n#\ndefine\n ft_raster_flag_aa       \nFT_RASTER_FLAG_AA\n\n#\ndefine\n ft_raster_flag_direct   \nFT_RASTER_FLAG_DIRECT\n\n#\ndefine\n ft_raster_flag_clip     \nFT_RASTER_FLAG_CLIP\n\n\n\n\n\n\n\nA list of bit flag constants as used in the \u2018flags\u2019 field of a \nFT_Raster_Params\n structure.\n\n\nvalues\n\n\n\n\n\nFT_RASTER_FLAG_DEFAULT\n\n\nThis value is 0.\n\n\n\n\nFT_RASTER_FLAG_AA\n\n\nThis flag is set to indicate that an anti-aliased glyph image should be generated. Otherwise, it will be monochrome (1-bit).\n\n\n\n\nFT_RASTER_FLAG_DIRECT\n\n\nThis flag is set to indicate direct rendering. In this mode, client applications must provide their own span callback. This lets them directly draw or compose over an existing bitmap. If this bit is not set, the target pixmap's buffer \nmust\n be zeroed before rendering.\nDirect rendering is only possible with anti-aliased glyphs.\n\n\n\n\nFT_RASTER_FLAG_CLIP\n\n\nThis flag is only used in direct rendering mode. If set, the output will be clipped to a box specified in the \nclip_box\n field of the \nFT_Raster_Params\n structure.\nNote that by default, the glyph bitmap is clipped to the target pixmap, except in direct rendering mode where all spans are generated if no clipping box is set.\n\n\n\n\n\n\n\n\n\n\nFT_Raster_NewFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Raster_NewFunc\n)( \nvoid\n*       memory,\n                        \nFT_Raster\n*  raster );\n\n#\ndefine\n FT_Raster_New_Func  \nFT_Raster_NewFunc\n\n\n\n\n\n\n\nA function used to create a new raster object.\n\n\ninput\n\n\n\n\n\nmemory\n\n\nA handle to the memory allocator.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nraster\n\n\nA handle to the new raster object.\n\n\n\n\n\n\n\nreturn\n\n\n\nError code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe \u2018memory\u2019 parameter is a typeless pointer in order to avoid un-wanted dependencies on the rest of the FreeType code. In practice, it is an \nFT_Memory\n object, i.e., a handle to the standard FreeType memory allocator. However, this field can be completely ignored by a given raster implementation.\n\n\n\n\n\nFT_Raster_DoneFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Raster_DoneFunc\n)( \nFT_Raster\n  raster );\n\n#\ndefine\n FT_Raster_Done_Func  \nFT_Raster_DoneFunc\n\n\n\n\n\n\n\nA function used to destroy a given raster object.\n\n\ninput\n\n\n\n\n\nraster\n\n\nA handle to the raster object.\n\n\n\n\n\n\n\n\n\n\nFT_Raster_ResetFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Raster_ResetFunc\n)( \nFT_Raster\n       raster,\n                          \nunsigned\n \nchar\n*  pool_base,\n                          \nunsigned\n \nlong\n   pool_size );\n\n#\ndefine\n FT_Raster_Reset_Func  \nFT_Raster_ResetFunc\n\n\n\n\n\n\n\nFreeType used to provide an area of memory called the \u2018render pool\u2019 available to all registered rasterizers. This was not thread safe, however, and now FreeType never allocates this pool.\n\n\nThis function is called after a new raster object is created.\n\n\ninput\n\n\n\n\n\nraster\n\n\nA handle to the new raster object.\n\n\n\n\npool_base\n\n\nPreviously, the address in memory of the render pool. Set this to NULL.\n\n\n\n\npool_size\n\n\nPreviously, the size in bytes of the render pool. Set this to 0.\n\n\n\n\n\n\n\nnote\n\n\n\nRasterizers should rely on dynamic or stack allocation if they want to (a handle to the memory allocator is passed to the rasterizer constructor).\n\n\n\n\n\nFT_Raster_SetModeFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Raster_SetModeFunc\n)( \nFT_Raster\n      raster,\n                            \nunsigned\n \nlong\n  mode,\n                            \nvoid\n*          args );\n\n#\ndefine\n FT_Raster_Set_Mode_Func  \nFT_Raster_SetModeFunc\n\n\n\n\n\n\n\nThis function is a generic facility to change modes or attributes in a given raster. This can be used for debugging purposes, or simply to allow implementation-specific \u2018features\u2019 in a given raster module.\n\n\ninput\n\n\n\n\n\nraster\n\n\nA handle to the new raster object.\n\n\n\n\nmode\n\n\nA 4-byte tag used to name the mode or property.\n\n\n\n\nargs\n\n\nA pointer to the new mode/property to use.\n\n\n\n\n\n\n\n\n\n\nFT_Raster_RenderFunc\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Raster_RenderFunc\n)( \nFT_Raster\n                raster,\n                           \nconst\n \nFT_Raster_Params\n*  params );\n\n#\ndefine\n FT_Raster_Render_Func  \nFT_Raster_RenderFunc\n\n\n\n\n\n\n\nInvoke a given raster to scan-convert a given glyph image into a target bitmap.\n\n\ninput\n\n\n\n\n\nraster\n\n\nA handle to the raster object.\n\n\n\n\nparams\n\n\nA pointer to an \nFT_Raster_Params\n structure used to store the rendering parameters.\n\n\n\n\n\n\n\nreturn\n\n\n\nError code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe exact format of the source image depends on the raster's glyph format defined in its \nFT_Raster_Funcs\n structure. It can be an \nFT_Outline\n or anything else in order to support a large array of glyph formats.\n\n\nNote also that the render function can fail and return a \nFT_Err_Unimplemented_Feature\n error code if the raster used does not support direct composition.\n\n\nXXX: For now, the standard raster doesn't support direct composition but this should change for the final release (see the files \u2018demos/src/ftgrays.c\u2019 and \u2018demos/src/ftgrays2.c\u2019 for examples of distinct implementations that support direct composition).\n\n\n\n\n\nFT_Raster_Funcs\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Raster_Funcs_\n  {\n    \nFT_Glyph_Format\n        glyph_format;\n\n    \nFT_Raster_NewFunc\n      raster_new;\n    \nFT_Raster_ResetFunc\n    raster_reset;\n    \nFT_Raster_SetModeFunc\n  raster_set_mode;\n    \nFT_Raster_RenderFunc\n   raster_render;\n    \nFT_Raster_DoneFunc\n     raster_done;\n\n  } \nFT_Raster_Funcs\n;\n\n\n\n\n\n\nA structure used to describe a given raster class to the library.\n\n\nfields\n\n\n\n\n\nglyph_format\n\n\nThe supported glyph format for this raster.\n\n\n\n\nraster_new\n\n\nThe raster constructor.\n\n\n\n\nraster_reset\n\n\nUsed to reset the render pool within the raster.\n\n\n\n\nraster_render\n\n\nA function to render a glyph into a given bitmap.\n\n\n\n\nraster_done\n\n\nThe raster destructor.\n\n\n\n\n\n\n\n\n\n\nFT_Raster_BitTest_Func\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nint\n\n  (*\nFT_Raster_BitTest_Func\n)( \nint\n    y,\n                             \nint\n    x,\n                             \nvoid\n*  user );\n\n\n\n\n\n\nDeprecated, unimplemented.\n\n\n\n\n\nFT_Raster_BitSet_Func\n\u00b6\n\n\nDefined in FT_IMAGE_H (freetype/ftimage.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Raster_BitSet_Func\n)( \nint\n    y,\n                            \nint\n    x,\n                            \nvoid\n*  user );\n\n\n\n\n\n\nDeprecated, unimplemented.",
            "title": "Scanline Converter"
        },
        {
            "location": "/ft2-raster/index.html#scanline-converter",
            "text": "",
            "title": "Scanline Converter"
        },
        {
            "location": "/ft2-raster/index.html#synopsis",
            "text": "This section contains technical definitions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct  FT_RasterRec_*   FT_Raster ;   An opaque handle (pointer) to a raster object. Each object can be used independently to convert an outline into a bitmap or pixmap.",
            "title": "FT_Raster"
        },
        {
            "location": "/ft2-raster/index.html#ft_span",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Span_\n  {\n     short            x;\n     unsigned   short   len;\n     unsigned   char    coverage;\n\n  }  FT_Span ;   A structure used to model a single span of gray pixels when rendering an anti-aliased bitmap.",
            "title": "FT_Span"
        },
        {
            "location": "/ft2-raster/index.html#ft_spanfunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   void \n  (* FT_SpanFunc )(  int              y,\n                   int              count,\n                   const   FT_Span *  spans,\n                   void *           user );\n\n# define  FT_Raster_Span_Func   FT_SpanFunc    A function used as a call-back by the anti-aliased renderer in order to let client applications draw themselves the gray pixel spans on each scan line.",
            "title": "FT_SpanFunc"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_params",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Raster_Params_\n  {\n     const   FT_Bitmap *        target;\n     const   void *             source;\n     int                      flags;\n     FT_SpanFunc              gray_spans;\n     FT_SpanFunc              black_spans;  /* unused */\n     FT_Raster_BitTest_Func   bit_test;     /* unused */\n     FT_Raster_BitSet_Func    bit_set;      /* unused */\n     void *                   user;\n     FT_BBox                  clip_box;\n\n  }  FT_Raster_Params ;   A structure to hold the arguments used by a raster's render function.",
            "title": "FT_Raster_Params"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_flag_xxx",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n# define   FT_RASTER_FLAG_DEFAULT   0x0\n# define   FT_RASTER_FLAG_AA        0x1\n# define   FT_RASTER_FLAG_DIRECT    0x2\n# define   FT_RASTER_FLAG_CLIP      0x4\n\n  /* these constants are deprecated; use the corresponding */\n  /* ` FT_RASTER_FLAG_XXX ' values instead                   */\n# define  ft_raster_flag_default   FT_RASTER_FLAG_DEFAULT \n# define  ft_raster_flag_aa        FT_RASTER_FLAG_AA \n# define  ft_raster_flag_direct    FT_RASTER_FLAG_DIRECT \n# define  ft_raster_flag_clip      FT_RASTER_FLAG_CLIP    A list of bit flag constants as used in the \u2018flags\u2019 field of a  FT_Raster_Params  structure.",
            "title": "FT_RASTER_FLAG_XXX"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_newfunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Raster_NewFunc )(  void *       memory,\n                         FT_Raster *  raster );\n\n# define  FT_Raster_New_Func   FT_Raster_NewFunc    A function used to create a new raster object.",
            "title": "FT_Raster_NewFunc"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_donefunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   void \n  (* FT_Raster_DoneFunc )(  FT_Raster   raster );\n\n# define  FT_Raster_Done_Func   FT_Raster_DoneFunc    A function used to destroy a given raster object.",
            "title": "FT_Raster_DoneFunc"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_resetfunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   void \n  (* FT_Raster_ResetFunc )(  FT_Raster        raster,\n                           unsigned   char *  pool_base,\n                           unsigned   long    pool_size );\n\n# define  FT_Raster_Reset_Func   FT_Raster_ResetFunc    FreeType used to provide an area of memory called the \u2018render pool\u2019 available to all registered rasterizers. This was not thread safe, however, and now FreeType never allocates this pool.  This function is called after a new raster object is created.",
            "title": "FT_Raster_ResetFunc"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_setmodefunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Raster_SetModeFunc )(  FT_Raster       raster,\n                             unsigned   long   mode,\n                             void *          args );\n\n# define  FT_Raster_Set_Mode_Func   FT_Raster_SetModeFunc    This function is a generic facility to change modes or attributes in a given raster. This can be used for debugging purposes, or simply to allow implementation-specific \u2018features\u2019 in a given raster module.",
            "title": "FT_Raster_SetModeFunc"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_renderfunc",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Raster_RenderFunc )(  FT_Raster                 raster,\n                            const   FT_Raster_Params *  params );\n\n# define  FT_Raster_Render_Func   FT_Raster_RenderFunc    Invoke a given raster to scan-convert a given glyph image into a target bitmap.",
            "title": "FT_Raster_RenderFunc"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_funcs",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   struct   FT_Raster_Funcs_\n  {\n     FT_Glyph_Format         glyph_format;\n\n     FT_Raster_NewFunc       raster_new;\n     FT_Raster_ResetFunc     raster_reset;\n     FT_Raster_SetModeFunc   raster_set_mode;\n     FT_Raster_RenderFunc    raster_render;\n     FT_Raster_DoneFunc      raster_done;\n\n  }  FT_Raster_Funcs ;   A structure used to describe a given raster class to the library.",
            "title": "FT_Raster_Funcs"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_bittest_func",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   int \n  (* FT_Raster_BitTest_Func )(  int     y,\n                              int     x,\n                              void *  user );   Deprecated, unimplemented.",
            "title": "FT_Raster_BitTest_Func"
        },
        {
            "location": "/ft2-raster/index.html#ft_raster_bitset_func",
            "text": "Defined in FT_IMAGE_H (freetype/ftimage.h).   \n   typedef   void \n  (* FT_Raster_BitSet_Func )(  int     y,\n                             int     x,\n                             void *  user );   Deprecated, unimplemented.",
            "title": "FT_Raster_BitSet_Func"
        },
        {
            "location": "/ft2-glyph_stroker/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Glyph Stroker\n\n\n\n\nGlyph Stroker\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis component generates stroked outlines of a given vectorial glyph. It also allows you to retrieve the \u2018outside\u2019 and/or the \u2018inside\u2019 borders of the stroke.\n\n\nThis can be useful to generate \u2018bordered\u2019 glyph, i.e., glyphs displayed with a coloured (and anti-aliased) border around their shape.\n\n\nFT_Stroker\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_StrokerRec_*  \nFT_Stroker\n;\n\n\n\n\n\n\nOpaque handle to a path stroker object.\n\n\n\n\n\nFT_Stroker_LineJoin\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Stroker_LineJoin_\n  {\n    \nFT_STROKER_LINEJOIN_ROUND\n          = 0,\n    \nFT_STROKER_LINEJOIN_BEVEL\n          = 1,\n    \nFT_STROKER_LINEJOIN_MITER_VARIABLE\n = 2,\n    \nFT_STROKER_LINEJOIN_MITER\n          = \nFT_STROKER_LINEJOIN_MITER_VARIABLE\n,\n    \nFT_STROKER_LINEJOIN_MITER_FIXED\n    = 3\n\n  } \nFT_Stroker_LineJoin\n;\n\n\n\n\n\n\nThese values determine how two joining lines are rendered in a stroker.\n\n\nvalues\n\n\n\n\n\nFT_STROKER_LINEJOIN_ROUND\n\n\nUsed to render rounded line joins. Circular arcs are used to join two lines smoothly.\n\n\n\n\nFT_STROKER_LINEJOIN_BEVEL\n\n\nUsed to render beveled line joins. The outer corner of the joined lines is filled by enclosing the triangular region of the corner with a straight line between the outer corners of each stroke.\n\n\n\n\nFT_STROKER_LINEJOIN_MITER_FIXED\n\n\nUsed to render mitered line joins, with fixed bevels if the miter limit is exceeded. The outer edges of the strokes for the two segments are extended until they meet at an angle. If the segments meet at too sharp an angle (such that the miter would extend from the intersection of the segments a distance greater than the product of the miter limit value and the border radius), then a bevel join (see above) is used instead. This prevents long spikes being created. FT_STROKER_LINEJOIN_MITER_FIXED generates a miter line join as used in PostScript and PDF.\n\n\n\n\nFT_STROKER_LINEJOIN_MITER_VARIABLE\n\n\n\n\n\nFT_STROKER_LINEJOIN_MITER\n\n\nUsed to render mitered line joins, with variable bevels if the miter limit is exceeded. The intersection of the strokes is clipped at a line perpendicular to the bisector of the angle between the strokes, at the distance from the intersection of the segments equal to the product of the miter limit value and the border radius. This prevents long spikes being created. FT_STROKER_LINEJOIN_MITER_VARIABLE generates a mitered line join as used in XPS. FT_STROKER_LINEJOIN_MITER is an alias for FT_STROKER_LINEJOIN_MITER_VARIABLE, retained for backward compatibility.\n\n\n\n\n\n\n\n\n\n\nFT_Stroker_LineCap\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_Stroker_LineCap_\n  {\n    \nFT_STROKER_LINECAP_BUTT\n = 0,\n    \nFT_STROKER_LINECAP_ROUND\n,\n    \nFT_STROKER_LINECAP_SQUARE\n\n\n  } \nFT_Stroker_LineCap\n;\n\n\n\n\n\n\nThese values determine how the end of opened sub-paths are rendered in a stroke.\n\n\nvalues\n\n\n\n\n\nFT_STROKER_LINECAP_BUTT\n\n\nThe end of lines is rendered as a full stop on the last point itself.\n\n\n\n\nFT_STROKER_LINECAP_ROUND\n\n\nThe end of lines is rendered as a half-circle around the last point.\n\n\n\n\nFT_STROKER_LINECAP_SQUARE\n\n\nThe end of lines is rendered as a square around the last point.\n\n\n\n\n\n\n\n\n\n\nFT_StrokerBorder\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_StrokerBorder_\n  {\n    \nFT_STROKER_BORDER_LEFT\n = 0,\n    \nFT_STROKER_BORDER_RIGHT\n\n\n  } \nFT_StrokerBorder\n;\n\n\n\n\n\n\nThese values are used to select a given stroke border in \nFT_Stroker_GetBorderCounts\n and \nFT_Stroker_ExportBorder\n.\n\n\nvalues\n\n\n\n\n\nFT_STROKER_BORDER_LEFT\n\n\nSelect the left border, relative to the drawing direction.\n\n\n\n\nFT_STROKER_BORDER_RIGHT\n\n\nSelect the right border, relative to the drawing direction.\n\n\n\n\n\n\n\nnote\n\n\n\nApplications are generally interested in the \u2018inside\u2019 and \u2018outside\u2019 borders. However, there is no direct mapping between these and the \u2018left\u2019 and \u2018right\u2019 ones, since this really depends on the glyph's drawing orientation, which varies between font formats.\n\n\nYou can however use \nFT_Outline_GetInsideBorder\n and \nFT_Outline_GetOutsideBorder\n to get these.\n\n\n\n\n\nFT_Outline_GetInsideBorder\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_StrokerBorder\n )\n  \nFT_Outline_GetInsideBorder\n( \nFT_Outline\n*  outline );\n\n\n\n\n\n\nRetrieve the \nFT_StrokerBorder\n value corresponding to the \u2018inside\u2019 borders of a given outline.\n\n\ninput\n\n\n\n\n\noutline\n\n\nThe source outline handle.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe border index. \nFT_STROKER_BORDER_RIGHT\n for empty or invalid outlines.\n\n\n\n\n\nFT_Outline_GetOutsideBorder\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_StrokerBorder\n )\n  \nFT_Outline_GetOutsideBorder\n( \nFT_Outline\n*  outline );\n\n\n\n\n\n\nRetrieve the \nFT_StrokerBorder\n value corresponding to the \u2018outside\u2019 borders of a given outline.\n\n\ninput\n\n\n\n\n\noutline\n\n\nThe source outline handle.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe border index. \nFT_STROKER_BORDER_LEFT\n for empty or invalid outlines.\n\n\n\n\n\nFT_Glyph_Stroke\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_Stroke\n( \nFT_Glyph\n    *pglyph,\n                   \nFT_Stroker\n   stroker,\n                   \nFT_Bool\n      destroy );\n\n\n\n\n\n\nStroke a given outline glyph object with a given stroker.\n\n\ninout\n\n\n\n\n\npglyph\n\n\nSource glyph handle on input, new glyph handle on output.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nstroker\n\n\nA stroker handle.\n\n\n\n\ndestroy\n\n\nA Boolean. If\u00a01, the source glyph object is destroyed on success.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe source glyph is untouched in case of error.\n\n\nAdding stroke may yield a significantly wider and taller glyph depending on how large of a radius was used to stroke the glyph. You may need to manually adjust horizontal and vertical advance amounts to account for this added size.\n\n\n\n\n\nFT_Glyph_StrokeBorder\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Glyph_StrokeBorder\n( \nFT_Glyph\n    *pglyph,\n                         \nFT_Stroker\n   stroker,\n                         \nFT_Bool\n      inside,\n                         \nFT_Bool\n      destroy );\n\n\n\n\n\n\nStroke a given outline glyph object with a given stroker, but only return either its inside or outside border.\n\n\ninout\n\n\n\n\n\npglyph\n\n\nSource glyph handle on input, new glyph handle on output.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nstroker\n\n\nA stroker handle.\n\n\n\n\ninside\n\n\nA Boolean. If\u00a01, return the inside border, otherwise the outside border.\n\n\n\n\ndestroy\n\n\nA Boolean. If\u00a01, the source glyph object is destroyed on success.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe source glyph is untouched in case of error.\n\n\nAdding stroke may yield a significantly wider and taller glyph depending on how large of a radius was used to stroke the glyph. You may need to manually adjust horizontal and vertical advance amounts to account for this added size.\n\n\n\n\n\nFT_Stroker_New\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_New\n( \nFT_Library\n   library,\n                  \nFT_Stroker\n  *astroker );\n\n\n\n\n\n\nCreate a new stroker object.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nFreeType library handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nastroker\n\n\nA new stroker object handle. NULL in case of error.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Stroker_Set\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Stroker_Set\n( \nFT_Stroker\n           stroker,\n                  \nFT_Fixed\n             radius,\n                  \nFT_Stroker_LineCap\n   line_cap,\n                  \nFT_Stroker_LineJoin\n  line_join,\n                  \nFT_Fixed\n             miter_limit );\n\n\n\n\n\n\nReset a stroker object's attributes.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\nradius\n\n\nThe border radius.\n\n\n\n\nline_cap\n\n\nThe line cap style.\n\n\n\n\nline_join\n\n\nThe line join style.\n\n\n\n\nmiter_limit\n\n\nThe miter limit for the FT_STROKER_LINEJOIN_MITER_FIXED and FT_STROKER_LINEJOIN_MITER_VARIABLE line join styles, expressed as 16.16 fixed-point value.\n\n\n\n\n\n\n\nnote\n\n\n\nThe radius is expressed in the same units as the outline coordinates.\n\n\nThis function calls \nFT_Stroker_Rewind\n automatically.\n\n\n\n\n\nFT_Stroker_Rewind\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Stroker_Rewind\n( \nFT_Stroker\n  stroker );\n\n\n\n\n\n\nReset a stroker object without changing its attributes. You should call this function before beginning a new series of calls to \nFT_Stroker_BeginSubPath\n or \nFT_Stroker_EndSubPath\n.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\n\n\n\n\n\n\nFT_Stroker_ParseOutline\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_ParseOutline\n( \nFT_Stroker\n   stroker,\n                           \nFT_Outline\n*  outline,\n                           \nFT_Bool\n      opened );\n\n\n\n\n\n\nA convenience function used to parse a whole outline with the stroker. The resulting outline(s) can be retrieved later by functions like \nFT_Stroker_GetCounts\n and \nFT_Stroker_Export\n.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\noutline\n\n\nThe source outline.\n\n\n\n\nopened\n\n\nA boolean. If\u00a01, the outline is treated as an open path instead of a closed one.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf \u2018opened\u2019 is\u00a00 (the default), the outline is treated as a closed path, and the stroker generates two distinct \u2018border\u2019 outlines.\n\n\nIf \u2018opened\u2019 is\u00a01, the outline is processed as an open path, and the stroker generates a single \u2018stroke\u2019 outline.\n\n\nThis function calls \nFT_Stroker_Rewind\n automatically.\n\n\n\n\n\nFT_Stroker_Done\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Stroker_Done\n( \nFT_Stroker\n  stroker );\n\n\n\n\n\n\nDestroy a stroker object.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nA stroker handle. Can be NULL.\n\n\n\n\n\n\n\n\n\n\nFT_Stroker_BeginSubPath\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_BeginSubPath\n( \nFT_Stroker\n  stroker,\n                           \nFT_Vector\n*  to,\n                           \nFT_Bool\n     open );\n\n\n\n\n\n\nStart a new sub-path in the stroker.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\nto\n\n\nA pointer to the start vector.\n\n\n\n\nopen\n\n\nA boolean. If\u00a01, the sub-path is treated as an open one.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function is useful when you need to stroke a path that is not stored as an \nFT_Outline\n object.\n\n\n\n\n\nFT_Stroker_EndSubPath\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_EndSubPath\n( \nFT_Stroker\n  stroker );\n\n\n\n\n\n\nClose the current sub-path in the stroker.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should call this function after \nFT_Stroker_BeginSubPath\n. If the subpath was not \u2018opened\u2019, this function \u2018draws\u2019 a single line segment to the start position when needed.\n\n\n\n\n\nFT_Stroker_LineTo\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_LineTo\n( \nFT_Stroker\n  stroker,\n                     \nFT_Vector\n*  to );\n\n\n\n\n\n\n\u2018Draw\u2019 a single line segment in the stroker's current sub-path, from the last position.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\nto\n\n\nA pointer to the destination point.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should call this function between \nFT_Stroker_BeginSubPath\n and \nFT_Stroker_EndSubPath\n.\n\n\n\n\n\nFT_Stroker_ConicTo\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_ConicTo\n( \nFT_Stroker\n  stroker,\n                      \nFT_Vector\n*  control,\n                      \nFT_Vector\n*  to );\n\n\n\n\n\n\n\u2018Draw\u2019 a single quadratic Bezier in the stroker's current sub-path, from the last position.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\ncontrol\n\n\nA pointer to a Bezier control point.\n\n\n\n\nto\n\n\nA pointer to the destination point.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should call this function between \nFT_Stroker_BeginSubPath\n and \nFT_Stroker_EndSubPath\n.\n\n\n\n\n\nFT_Stroker_CubicTo\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_CubicTo\n( \nFT_Stroker\n  stroker,\n                      \nFT_Vector\n*  control1,\n                      \nFT_Vector\n*  control2,\n                      \nFT_Vector\n*  to );\n\n\n\n\n\n\n\u2018Draw\u2019 a single cubic Bezier in the stroker's current sub-path, from the last position.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\ncontrol1\n\n\nA pointer to the first Bezier control point.\n\n\n\n\ncontrol2\n\n\nA pointer to second Bezier control point.\n\n\n\n\nto\n\n\nA pointer to the destination point.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nYou should call this function between \nFT_Stroker_BeginSubPath\n and \nFT_Stroker_EndSubPath\n.\n\n\n\n\n\nFT_Stroker_GetBorderCounts\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_GetBorderCounts\n( \nFT_Stroker\n        stroker,\n                              \nFT_StrokerBorder\n  border,\n                              \nFT_UInt\n          *anum_points,\n                              \nFT_UInt\n          *anum_contours );\n\n\n\n\n\n\nCall this function once you have finished parsing your paths with the stroker. It returns the number of points and contours necessary to export one of the \u2018border\u2019 or \u2018stroke\u2019 outlines generated by the stroker.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\nborder\n\n\nThe border index.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nanum_points\n\n\nThe number of points.\n\n\n\n\nanum_contours\n\n\nThe number of contours.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nWhen an outline, or a sub-path, is \u2018closed\u2019, the stroker generates two independent \u2018border\u2019 outlines, named \u2018left\u2019 and \u2018right\u2019.\n\n\nWhen the outline, or a sub-path, is \u2018opened\u2019, the stroker merges the \u2018border\u2019 outlines with caps. The \u2018left\u2019 border receives all points, while the \u2018right\u2019 border becomes empty.\n\n\nUse the function \nFT_Stroker_GetCounts\n instead if you want to retrieve the counts associated to both borders.\n\n\n\n\n\nFT_Stroker_ExportBorder\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Stroker_ExportBorder\n( \nFT_Stroker\n        stroker,\n                           \nFT_StrokerBorder\n  border,\n                           \nFT_Outline\n*       outline );\n\n\n\n\n\n\nCall this function after \nFT_Stroker_GetBorderCounts\n to export the corresponding border to your own \nFT_Outline\n structure.\n\n\nNote that this function appends the border points and contours to your outline, but does not try to resize its arrays.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\nborder\n\n\nThe border index.\n\n\n\n\noutline\n\n\nThe target outline handle.\n\n\n\n\n\n\n\nnote\n\n\n\nAlways call this function after \nFT_Stroker_GetBorderCounts\n to get sure that there is enough room in your \nFT_Outline\n object to receive all new data.\n\n\nWhen an outline, or a sub-path, is \u2018closed\u2019, the stroker generates two independent \u2018border\u2019 outlines, named \u2018left\u2019 and \u2018right\u2019.\n\n\nWhen the outline, or a sub-path, is \u2018opened\u2019, the stroker merges the \u2018border\u2019 outlines with caps. The \u2018left\u2019 border receives all points, while the \u2018right\u2019 border becomes empty.\n\n\nUse the function \nFT_Stroker_Export\n instead if you want to retrieve all borders at once.\n\n\n\n\n\nFT_Stroker_GetCounts\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stroker_GetCounts\n( \nFT_Stroker\n  stroker,\n                        \nFT_UInt\n    *anum_points,\n                        \nFT_UInt\n    *anum_contours );\n\n\n\n\n\n\nCall this function once you have finished parsing your paths with the stroker. It returns the number of points and contours necessary to export all points/borders from the stroked outline/path.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nanum_points\n\n\nThe number of points.\n\n\n\n\nanum_contours\n\n\nThe number of contours.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\n\n\n\nFT_Stroker_Export\n\u00b6\n\n\nDefined in FT_STROKER_H (freetype/ftstroke.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Stroker_Export\n( \nFT_Stroker\n   stroker,\n                     \nFT_Outline\n*  outline );\n\n\n\n\n\n\nCall this function after \nFT_Stroker_GetBorderCounts\n to export all borders to your own \nFT_Outline\n structure.\n\n\nNote that this function appends the border points and contours to your outline, but does not try to resize its arrays.\n\n\ninput\n\n\n\n\n\nstroker\n\n\nThe target stroker handle.\n\n\n\n\noutline\n\n\nThe target outline handle.",
            "title": "Glyph Stroker"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#glyph-stroker",
            "text": "",
            "title": "Glyph Stroker"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#synopsis",
            "text": "This component generates stroked outlines of a given vectorial glyph. It also allows you to retrieve the \u2018outside\u2019 and/or the \u2018inside\u2019 borders of the stroke.  This can be useful to generate \u2018bordered\u2019 glyph, i.e., glyphs displayed with a coloured (and anti-aliased) border around their shape.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n   typedef   struct  FT_StrokerRec_*   FT_Stroker ;   Opaque handle to a path stroker object.",
            "title": "FT_Stroker"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_linejoin",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n   typedef   enum   FT_Stroker_LineJoin_\n  {\n     FT_STROKER_LINEJOIN_ROUND           = 0,\n     FT_STROKER_LINEJOIN_BEVEL           = 1,\n     FT_STROKER_LINEJOIN_MITER_VARIABLE  = 2,\n     FT_STROKER_LINEJOIN_MITER           =  FT_STROKER_LINEJOIN_MITER_VARIABLE ,\n     FT_STROKER_LINEJOIN_MITER_FIXED     = 3\n\n  }  FT_Stroker_LineJoin ;   These values determine how two joining lines are rendered in a stroker.",
            "title": "FT_Stroker_LineJoin"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_linecap",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n   typedef   enum   FT_Stroker_LineCap_\n  {\n     FT_STROKER_LINECAP_BUTT  = 0,\n     FT_STROKER_LINECAP_ROUND ,\n     FT_STROKER_LINECAP_SQUARE \n\n  }  FT_Stroker_LineCap ;   These values determine how the end of opened sub-paths are rendered in a stroke.",
            "title": "FT_Stroker_LineCap"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_strokerborder",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n   typedef   enum   FT_StrokerBorder_\n  {\n     FT_STROKER_BORDER_LEFT  = 0,\n     FT_STROKER_BORDER_RIGHT \n\n  }  FT_StrokerBorder ;   These values are used to select a given stroke border in  FT_Stroker_GetBorderCounts  and  FT_Stroker_ExportBorder .",
            "title": "FT_StrokerBorder"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_outline_getinsideborder",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_StrokerBorder  )\n   FT_Outline_GetInsideBorder (  FT_Outline *  outline );   Retrieve the  FT_StrokerBorder  value corresponding to the \u2018inside\u2019 borders of a given outline.",
            "title": "FT_Outline_GetInsideBorder"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_outline_getoutsideborder",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_StrokerBorder  )\n   FT_Outline_GetOutsideBorder (  FT_Outline *  outline );   Retrieve the  FT_StrokerBorder  value corresponding to the \u2018outside\u2019 borders of a given outline.",
            "title": "FT_Outline_GetOutsideBorder"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_glyph_stroke",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_Stroke (  FT_Glyph     *pglyph,\n                    FT_Stroker    stroker,\n                    FT_Bool       destroy );   Stroke a given outline glyph object with a given stroker.",
            "title": "FT_Glyph_Stroke"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_glyph_strokeborder",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Glyph_StrokeBorder (  FT_Glyph     *pglyph,\n                          FT_Stroker    stroker,\n                          FT_Bool       inside,\n                          FT_Bool       destroy );   Stroke a given outline glyph object with a given stroker, but only return either its inside or outside border.",
            "title": "FT_Glyph_StrokeBorder"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_new",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_New (  FT_Library    library,\n                   FT_Stroker   *astroker );   Create a new stroker object.",
            "title": "FT_Stroker_New"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_set",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  void  )\n   FT_Stroker_Set (  FT_Stroker            stroker,\n                   FT_Fixed              radius,\n                   FT_Stroker_LineCap    line_cap,\n                   FT_Stroker_LineJoin   line_join,\n                   FT_Fixed              miter_limit );   Reset a stroker object's attributes.",
            "title": "FT_Stroker_Set"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_rewind",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  void  )\n   FT_Stroker_Rewind (  FT_Stroker   stroker );   Reset a stroker object without changing its attributes. You should call this function before beginning a new series of calls to  FT_Stroker_BeginSubPath  or  FT_Stroker_EndSubPath .",
            "title": "FT_Stroker_Rewind"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_parseoutline",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_ParseOutline (  FT_Stroker    stroker,\n                            FT_Outline *  outline,\n                            FT_Bool       opened );   A convenience function used to parse a whole outline with the stroker. The resulting outline(s) can be retrieved later by functions like  FT_Stroker_GetCounts  and  FT_Stroker_Export .",
            "title": "FT_Stroker_ParseOutline"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_done",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  void  )\n   FT_Stroker_Done (  FT_Stroker   stroker );   Destroy a stroker object.",
            "title": "FT_Stroker_Done"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_beginsubpath",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_BeginSubPath (  FT_Stroker   stroker,\n                            FT_Vector *  to,\n                            FT_Bool      open );   Start a new sub-path in the stroker.",
            "title": "FT_Stroker_BeginSubPath"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_endsubpath",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_EndSubPath (  FT_Stroker   stroker );   Close the current sub-path in the stroker.",
            "title": "FT_Stroker_EndSubPath"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_lineto",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_LineTo (  FT_Stroker   stroker,\n                      FT_Vector *  to );   \u2018Draw\u2019 a single line segment in the stroker's current sub-path, from the last position.",
            "title": "FT_Stroker_LineTo"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_conicto",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_ConicTo (  FT_Stroker   stroker,\n                       FT_Vector *  control,\n                       FT_Vector *  to );   \u2018Draw\u2019 a single quadratic Bezier in the stroker's current sub-path, from the last position.",
            "title": "FT_Stroker_ConicTo"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_cubicto",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_CubicTo (  FT_Stroker   stroker,\n                       FT_Vector *  control1,\n                       FT_Vector *  control2,\n                       FT_Vector *  to );   \u2018Draw\u2019 a single cubic Bezier in the stroker's current sub-path, from the last position.",
            "title": "FT_Stroker_CubicTo"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_getbordercounts",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_GetBorderCounts (  FT_Stroker         stroker,\n                               FT_StrokerBorder   border,\n                               FT_UInt           *anum_points,\n                               FT_UInt           *anum_contours );   Call this function once you have finished parsing your paths with the stroker. It returns the number of points and contours necessary to export one of the \u2018border\u2019 or \u2018stroke\u2019 outlines generated by the stroker.",
            "title": "FT_Stroker_GetBorderCounts"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_exportborder",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  void  )\n   FT_Stroker_ExportBorder (  FT_Stroker         stroker,\n                            FT_StrokerBorder   border,\n                            FT_Outline *       outline );   Call this function after  FT_Stroker_GetBorderCounts  to export the corresponding border to your own  FT_Outline  structure.  Note that this function appends the border points and contours to your outline, but does not try to resize its arrays.",
            "title": "FT_Stroker_ExportBorder"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_getcounts",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stroker_GetCounts (  FT_Stroker   stroker,\n                         FT_UInt     *anum_points,\n                         FT_UInt     *anum_contours );   Call this function once you have finished parsing your paths with the stroker. It returns the number of points and contours necessary to export all points/borders from the stroked outline/path.",
            "title": "FT_Stroker_GetCounts"
        },
        {
            "location": "/ft2-glyph_stroker/index.html#ft_stroker_export",
            "text": "Defined in FT_STROKER_H (freetype/ftstroke.h).   \n  FT_EXPORT(  void  )\n   FT_Stroker_Export (  FT_Stroker    stroker,\n                      FT_Outline *  outline );   Call this function after  FT_Stroker_GetBorderCounts  to export all borders to your own  FT_Outline  structure.  Note that this function appends the border points and contours to your outline, but does not try to resize its arrays.",
            "title": "FT_Stroker_Export"
        },
        {
            "location": "/ft2-system_interface/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb System Interface\n\n\n\n\nSystem Interface\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains various definitions related to memory management and i/o access. You need to understand this information if you want to use a custom memory manager or you own i/o streams.\n\n\nFT_Memory\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_MemoryRec_*  \nFT_Memory\n;\n\n\n\n\n\n\nA handle to a given memory manager object, defined with an \nFT_MemoryRec\n structure.\n\n\n\n\n\nFT_Alloc_Func\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n*\n  (*\nFT_Alloc_Func\n)( \nFT_Memory\n  memory,\n                    \nlong\n       size );\n\n\n\n\n\n\nA function used to allocate \u2018size\u2019 bytes from \u2018memory\u2019.\n\n\ninput\n\n\n\n\n\nmemory\n\n\nA handle to the source memory manager.\n\n\n\n\nsize\n\n\nThe size in bytes to allocate.\n\n\n\n\n\n\n\nreturn\n\n\n\nAddress of new memory block. 0\u00a0in case of failure.\n\n\n\n\n\nFT_Free_Func\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Free_Func\n)( \nFT_Memory\n  memory,\n                   \nvoid\n*      block );\n\n\n\n\n\n\nA function used to release a given block of memory.\n\n\ninput\n\n\n\n\n\nmemory\n\n\nA handle to the source memory manager.\n\n\n\n\nblock\n\n\nThe address of the target memory block.\n\n\n\n\n\n\n\n\n\n\nFT_Realloc_Func\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n*\n  (*\nFT_Realloc_Func\n)( \nFT_Memory\n  memory,\n                      \nlong\n       cur_size,\n                      \nlong\n       new_size,\n                      \nvoid\n*      block );\n\n\n\n\n\n\nA function used to re-allocate a given block of memory.\n\n\ninput\n\n\n\n\n\nmemory\n\n\nA handle to the source memory manager.\n\n\n\n\ncur_size\n\n\nThe block's current size in bytes.\n\n\n\n\nnew_size\n\n\nThe block's requested new size.\n\n\n\n\nblock\n\n\nThe block's current address.\n\n\n\n\n\n\n\nreturn\n\n\n\nNew block address. 0\u00a0in case of memory shortage.\n\n\nnote\n\n\n\nIn case of error, the old block must still be available.\n\n\n\n\n\nFT_MemoryRec\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \nstruct\n  FT_MemoryRec_\n  {\n    \nvoid\n*            user;\n    \nFT_Alloc_Func\n    alloc;\n    \nFT_Free_Func\n     free;\n    \nFT_Realloc_Func\n  realloc;\n  };\n\n\n\n\n\n\nA structure used to describe a given memory manager to FreeType\u00a02.\n\n\nfields\n\n\n\n\n\nuser\n\n\nA generic typeless pointer for user data.\n\n\n\n\nalloc\n\n\nA pointer type to an allocation function.\n\n\n\n\nfree\n\n\nA pointer type to an memory freeing function.\n\n\n\n\nrealloc\n\n\nA pointer type to a reallocation function.\n\n\n\n\n\n\n\n\n\n\nFT_Stream\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_StreamRec_*  \nFT_Stream\n;\n\n\n\n\n\n\nA handle to an input stream.\n\n\nalso\n\n\n\nSee \nFT_StreamRec\n for the publicly accessible fields of a given stream object.\n\n\n\n\n\nFT_StreamDesc\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nunion\n  FT_StreamDesc_\n  {\n    \nlong\n   value;\n    \nvoid\n*  pointer;\n\n  } \nFT_StreamDesc\n;\n\n\n\n\n\n\nA union type used to store either a long or a pointer. This is used to store a file descriptor or a \u2018FILE*\u2019 in an input stream.\n\n\n\n\n\nFT_Stream_IoFunc\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nunsigned\n \nlong\n\n  (*\nFT_Stream_IoFunc\n)( \nFT_Stream\n       stream,\n                       \nunsigned\n \nlong\n   offset,\n                       \nunsigned\n \nchar\n*  buffer,\n                       \nunsigned\n \nlong\n   count );\n\n\n\n\n\n\nA function used to seek and read data from a given input stream.\n\n\ninput\n\n\n\n\n\nstream\n\n\nA handle to the source stream.\n\n\n\n\noffset\n\n\nThe offset of read in stream (always from start).\n\n\n\n\nbuffer\n\n\nThe address of the read buffer.\n\n\n\n\ncount\n\n\nThe number of bytes to read from the stream.\n\n\n\n\n\n\n\nreturn\n\n\n\nThe number of bytes effectively read by the stream.\n\n\nnote\n\n\n\nThis function might be called to perform a seek or skip operation with a \u2018count\u2019 of\u00a00. A non-zero return value then indicates an error.\n\n\n\n\n\nFT_Stream_CloseFunc\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Stream_CloseFunc\n)( \nFT_Stream\n  stream );\n\n\n\n\n\n\nA function used to close a given input stream.\n\n\ninput\n\n\n\n\n\nstream\n\n\nA handle to the target stream.\n\n\n\n\n\n\n\n\n\n\nFT_StreamRec\n\u00b6\n\n\nDefined in FT_SYSTEM_H (freetype/ftsystem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_StreamRec_\n  {\n    \nunsigned\n \nchar\n*       base;\n    \nunsigned\n \nlong\n        size;\n    \nunsigned\n \nlong\n        pos;\n\n    \nFT_StreamDesc\n        descriptor;\n    \nFT_StreamDesc\n        pathname;\n    \nFT_Stream_IoFunc\n     read;\n    \nFT_Stream_CloseFunc\n  close;\n\n    \nFT_Memory\n            memory;\n    \nunsigned\n \nchar\n*       cursor;\n    \nunsigned\n \nchar\n*       limit;\n\n  } \nFT_StreamRec\n;\n\n\n\n\n\n\nA structure used to describe an input stream.\n\n\ninput\n\n\n\n\n\nbase\n\n\nFor memory-based streams, this is the address of the first stream byte in memory. This field should always be set to NULL for disk-based streams.\n\n\n\n\nsize\n\n\nThe stream size in bytes.\nIn case of compressed streams where the size is unknown before actually doing the decompression, the value is set to 0x7FFFFFFF. (Note that this size value can occur for normal streams also; it is thus just a hint.)\n\n\n\n\npos\n\n\nThe current position within the stream.\n\n\n\n\ndescriptor\n\n\nThis field is a union that can hold an integer or a pointer. It is used by stream implementations to store file descriptors or \u2018FILE*\u2019 pointers.\n\n\n\n\npathname\n\n\nThis field is completely ignored by FreeType. However, it is often useful during debugging to use it to store the stream's filename (where available).\n\n\n\n\nread\n\n\nThe stream's input function.\n\n\n\n\nclose\n\n\nThe stream's close function.\n\n\n\n\nmemory\n\n\nThe memory manager to use to preload frames. This is set internally by FreeType and shouldn't be touched by stream implementations.\n\n\n\n\ncursor\n\n\nThis field is set and used internally by FreeType when parsing frames.\n\n\n\n\nlimit\n\n\nThis field is set and used internally by FreeType when parsing frames.",
            "title": "System Interface"
        },
        {
            "location": "/ft2-system_interface/index.html#system-interface",
            "text": "",
            "title": "System Interface"
        },
        {
            "location": "/ft2-system_interface/index.html#synopsis",
            "text": "This section contains various definitions related to memory management and i/o access. You need to understand this information if you want to use a custom memory manager or you own i/o streams.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_memory",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   struct  FT_MemoryRec_*   FT_Memory ;   A handle to a given memory manager object, defined with an  FT_MemoryRec  structure.",
            "title": "FT_Memory"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_alloc_func",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   void *\n  (* FT_Alloc_Func )(  FT_Memory   memory,\n                     long        size );   A function used to allocate \u2018size\u2019 bytes from \u2018memory\u2019.",
            "title": "FT_Alloc_Func"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_free_func",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   void \n  (* FT_Free_Func )(  FT_Memory   memory,\n                    void *      block );   A function used to release a given block of memory.",
            "title": "FT_Free_Func"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_realloc_func",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   void *\n  (* FT_Realloc_Func )(  FT_Memory   memory,\n                       long        cur_size,\n                       long        new_size,\n                       void *      block );   A function used to re-allocate a given block of memory.",
            "title": "FT_Realloc_Func"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_memoryrec",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   struct   FT_MemoryRec_\n  {\n     void *            user;\n     FT_Alloc_Func     alloc;\n     FT_Free_Func      free;\n     FT_Realloc_Func   realloc;\n  };   A structure used to describe a given memory manager to FreeType\u00a02.",
            "title": "FT_MemoryRec"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_stream",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   struct  FT_StreamRec_*   FT_Stream ;   A handle to an input stream.",
            "title": "FT_Stream"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_streamdesc",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   union   FT_StreamDesc_\n  {\n     long    value;\n     void *  pointer;\n\n  }  FT_StreamDesc ;   A union type used to store either a long or a pointer. This is used to store a file descriptor or a \u2018FILE*\u2019 in an input stream.",
            "title": "FT_StreamDesc"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_stream_iofunc",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   unsigned   long \n  (* FT_Stream_IoFunc )(  FT_Stream        stream,\n                        unsigned   long    offset,\n                        unsigned   char *  buffer,\n                        unsigned   long    count );   A function used to seek and read data from a given input stream.",
            "title": "FT_Stream_IoFunc"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_stream_closefunc",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   void \n  (* FT_Stream_CloseFunc )(  FT_Stream   stream );   A function used to close a given input stream.",
            "title": "FT_Stream_CloseFunc"
        },
        {
            "location": "/ft2-system_interface/index.html#ft_streamrec",
            "text": "Defined in FT_SYSTEM_H (freetype/ftsystem.h).   \n   typedef   struct   FT_StreamRec_\n  {\n     unsigned   char *       base;\n     unsigned   long         size;\n     unsigned   long         pos;\n\n     FT_StreamDesc         descriptor;\n     FT_StreamDesc         pathname;\n     FT_Stream_IoFunc      read;\n     FT_Stream_CloseFunc   close;\n\n     FT_Memory             memory;\n     unsigned   char *       cursor;\n     unsigned   char *       limit;\n\n  }  FT_StreamRec ;   A structure used to describe an input stream.",
            "title": "FT_StreamRec"
        },
        {
            "location": "/ft2-module_management/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb Module Management\n\n\n\n\nModule Management\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe definitions below are used to manage modules within FreeType. Modules can be added, upgraded, and removed at runtime. Additionally, some module properties can be controlled also.\n\n\nHere is a list of possible values of the \nmodule_name\n field in the \nFT_Module_Class\n structure.\n\n  autofitter\n  bdf\n  cff\n  gxvalid\n  otvalid\n  pcf\n  pfr\n  psaux\n  pshinter\n  psnames\n  raster1\n  sfnt\n  smooth, smooth-lcd, smooth-lcdv\n  truetype\n  type1\n  type42\n  t1cid\n  winfonts\n\n\n\nNote that the FreeType Cache sub-system is not a FreeType module.\n\n\nFT_Module\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_ModuleRec_*  \nFT_Module\n;\n\n\n\n\n\n\nA handle to a given FreeType module object. A module can be a font driver, a renderer, or anything else that provides services to the former.\n\n\n\n\n\nFT_Module_Constructor\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Error\n\n  (*\nFT_Module_Constructor\n)( \nFT_Module\n  module );\n\n\n\n\n\n\nA function used to initialize (not create) a new module object.\n\n\ninput\n\n\n\n\n\nmodule\n\n\nThe module to initialize.\n\n\n\n\n\n\n\n\n\n\nFT_Module_Destructor\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Module_Destructor\n)( \nFT_Module\n  module );\n\n\n\n\n\n\nA function used to finalize (not destroy) a given module object.\n\n\ninput\n\n\n\n\n\nmodule\n\n\nThe module to finalize.\n\n\n\n\n\n\n\n\n\n\nFT_Module_Requester\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  \ntypedef\n FT_Module_Interface\n  (*\nFT_Module_Requester\n)( \nFT_Module\n    module,\n                          \nconst\n \nchar\n*  name );\n\n\n\n\n\n\nA function used to query a given module for a specific interface.\n\n\ninput\n\n\n\n\n\nmodule\n\n\nThe module to be searched.\n\n\n\n\nname\n\n\nThe name of the interface in the module.\n\n\n\n\n\n\n\n\n\n\nFT_Module_Class\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Module_Class_\n  {\n    \nFT_ULong\n               module_flags;\n    \nFT_Long\n                module_size;\n    \nconst\n \nFT_String\n*       module_name;\n    \nFT_Fixed\n               module_version;\n    \nFT_Fixed\n               module_requires;\n\n    \nconst\n \nvoid\n*            module_interface;\n\n    \nFT_Module_Constructor\n  module_init;\n    \nFT_Module_Destructor\n   module_done;\n    \nFT_Module_Requester\n    get_interface;\n\n  } \nFT_Module_Class\n;\n\n\n\n\n\n\nThe module class descriptor.\n\n\nfields\n\n\n\n\n\nmodule_flags\n\n\nBit flags describing the module.\n\n\n\n\nmodule_size\n\n\nThe size of one module object/instance in bytes.\n\n\n\n\nmodule_name\n\n\nThe name of the module.\n\n\n\n\nmodule_version\n\n\nThe version, as a 16.16 fixed number (major.minor).\n\n\n\n\nmodule_requires\n\n\nThe version of FreeType this module requires, as a 16.16 fixed number (major.minor). Starts at version 2.0, i.e., 0x20000.\n\n\n\n\nmodule_init\n\n\nThe initializing function.\n\n\n\n\nmodule_done\n\n\nThe finalizing function.\n\n\n\n\nget_interface\n\n\nThe interface requesting function.\n\n\n\n\n\n\n\n\n\n\nFT_Add_Module\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Add_Module\n( \nFT_Library\n              library,\n                 \nconst\n \nFT_Module_Class\n*  clazz );\n\n\n\n\n\n\nAdd a new module to a given library instance.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nclazz\n\n\nA pointer to class descriptor for the module.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAn error will be returned if a module already exists by that name, or if the module requires a version of FreeType that is too great.\n\n\n\n\n\nFT_Get_Module\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Module\n )\n  \nFT_Get_Module\n( \nFT_Library\n   library,\n                 \nconst\n \nchar\n*  module_name );\n\n\n\n\n\n\nFind a module by its name.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the library object.\n\n\n\n\nmodule_name\n\n\nThe module's name (as an ASCII string).\n\n\n\n\n\n\n\nreturn\n\n\n\nA module handle. 0\u00a0if none was found.\n\n\nnote\n\n\n\nFreeType's internal modules aren't documented very well, and you should look up the source code for details.\n\n\n\n\n\nFT_Remove_Module\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Remove_Module\n( \nFT_Library\n  library,\n                    \nFT_Module\n   module );\n\n\n\n\n\n\nRemove a given module from a library instance.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to a library object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nmodule\n\n\nA handle to a module object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe module object is destroyed by the function in case of success.\n\n\n\n\n\nFT_Add_Default_Modules\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Add_Default_Modules\n( \nFT_Library\n  library );\n\n\n\n\n\n\nAdd the set of default drivers to a given library object. This is only useful when you create a library object with \nFT_New_Library\n (usually to plug a custom memory manager).\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to a new library object.\n\n\n\n\n\n\n\n\n\n\nFT_Property_Set\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Property_Set\n( \nFT_Library\n        library,\n                   \nconst\n \nFT_String\n*  module_name,\n                   \nconst\n \nFT_String\n*  property_name,\n                   \nconst\n \nvoid\n*       value );\n\n\n\n\n\n\nSet a property for a given module.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the library the module is part of.\n\n\n\n\nmodule_name\n\n\nThe module name.\n\n\n\n\nproperty_name\n\n\nThe property name. Properties are described in section \u2018\nDriver properties\n\u2019.\nNote that only a few modules have properties.\n\n\n\n\nvalue\n\n\nA generic pointer to a variable or structure that gives the new value of the property. The exact definition of \u2018value\u2019 is dependent on the property; see section \u2018\nDriver properties\n\u2019.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf \nmodule_name\n isn't a valid module name, or \nproperty_name\n doesn't specify a valid property, or if \u2018value\u2019 doesn't represent a valid value for the given property, an error is returned.\n\n\nThe following example sets property \u2018bar\u2019 (a simple integer) in module \u2018foo\u2019 to value\u00a01.\n\n  FT_UInt  bar;\n\n\n  bar = 1;\n  FT_Property_Set( library, \"foo\", \"bar\", &bar );\n\n\n\nNote that the FreeType Cache sub-system doesn't recognize module property changes. To avoid glyph lookup confusion within the cache you should call \nFTC_Manager_Reset\n to completely flush the cache if a module property gets changed after \nFTC_Manager_New\n has been called.\n\n\nIt is not possible to set properties of the FreeType Cache sub-system itself with FT_Property_Set; use ?FTC_Property_Set? instead.\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\nFT_Property_Get\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Property_Get\n( \nFT_Library\n        library,\n                   \nconst\n \nFT_String\n*  module_name,\n                   \nconst\n \nFT_String\n*  property_name,\n                   \nvoid\n*             value );\n\n\n\n\n\n\nGet a module's property value.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the library the module is part of.\n\n\n\n\nmodule_name\n\n\nThe module name.\n\n\n\n\nproperty_name\n\n\nThe property name. Properties are described in section \u2018\nDriver properties\n\u2019.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\nvalue\n\n\nA generic pointer to a variable or structure that gives the value of the property. The exact definition of \u2018value\u2019 is dependent on the property; see section \u2018\nDriver properties\n\u2019.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf \nmodule_name\n isn't a valid module name, or \nproperty_name\n doesn't specify a valid property, or if \u2018value\u2019 doesn't represent a valid value for the given property, an error is returned.\n\n\nThe following example gets property \u2018baz\u2019 (a range) in module \u2018foo\u2019.\n\n  typedef  range_\n  {\n    FT_Int32  min;\n    FT_Int32  max;\n\n  } range;\n\n  range  baz;\n\n\n  FT_Property_Get( library, \"foo\", \"baz\", &baz );\n\n\n\nIt is not possible to retrieve properties of the FreeType Cache sub-system with FT_Property_Get; use ?FTC_Property_Get? instead.\n\n\nsince\n\n\n\n2.4.11\n\n\n\n\n\nFT_Set_Default_Properties\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Set_Default_Properties\n( \nFT_Library\n  library );\n\n\n\n\n\n\nIf compilation option FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES is set, this function reads the \nFREETYPE_PROPERTIES\n environment variable to control driver properties. See section \u2018\nDriver properties\n\u2019 for more.\n\n\nIf the compilation option is not set, this function does nothing.\n\n\nFREETYPE_PROPERTIES\n has the following syntax form (broken here into multiple lines for better readability).\n\n  <optional whitespace>\n  <module-name1> ':'\n  <property-name1> '=' <property-value1>\n  <whitespace>\n  <module-name2> ':'\n  <property-name2> '=' <property-value2>\n  ...\n\n\n\nExample:\n\n  FREETYPE_PROPERTIES=truetype:interpreter-version=35 \\\n                      cff:no-stem-darkening=1 \\\n                      autofitter:warping=1\n\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to a new library object.\n\n\n\n\n\n\n\nsince\n\n\n\n2.8\n\n\n\n\n\nFT_New_Library\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_New_Library\n( \nFT_Memory\n    memory,\n                  \nFT_Library\n  *alibrary );\n\n\n\n\n\n\nThis function is used to create a new FreeType library instance from a given memory object. It is thus possible to use libraries with distinct memory allocators within the same program. Note, however, that the used \nFT_Memory\n structure is expected to remain valid for the life of the \nFT_Library\n object.\n\n\nNormally, you would call this function (followed by a call to \nFT_Add_Default_Modules\n or a series of calls to \nFT_Add_Module\n, and a call to \nFT_Set_Default_Properties\n) instead of \nFT_Init_FreeType\n to initialize the FreeType library.\n\n\nDon't use \nFT_Done_FreeType\n but \nFT_Done_Library\n to destroy a library instance.\n\n\ninput\n\n\n\n\n\nmemory\n\n\nA handle to the original memory object.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nalibrary\n\n\nA pointer to handle of a new library object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nSee the discussion of reference counters in the description of \nFT_Reference_Library\n.\n\n\n\n\n\nFT_Done_Library\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Done_Library\n( \nFT_Library\n  library );\n\n\n\n\n\n\nDiscard a given library object. This closes all drivers and discards all resource objects.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the target library.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nSee the discussion of reference counters in the description of \nFT_Reference_Library\n.\n\n\n\n\n\nFT_Reference_Library\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Reference_Library\n( \nFT_Library\n  library );\n\n\n\n\n\n\nA counter gets initialized to\u00a01 at the time an \nFT_Library\n structure is created. This function increments the counter. \nFT_Done_Library\n then only destroys a library if the counter is\u00a01, otherwise it simply decrements the counter.\n\n\nThis function helps in managing life-cycles of structures that reference \nFT_Library\n objects.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to a target library object.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nsince\n\n\n\n2.4.2\n\n\n\n\n\nFT_Renderer\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_RendererRec_*  \nFT_Renderer\n;\n\n\n\n\n\n\nA handle to a given FreeType renderer. A renderer is a module in charge of converting a glyph's outline image to a bitmap. It supports a single glyph image format, and one or more target surface depths.\n\n\n\n\n\nFT_Renderer_Class\n\u00b6\n\n\nDefined in FT_RENDER_H (freetype/ftrender.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Renderer_Class_\n  {\n    \nFT_Module_Class\n            root;\n\n    \nFT_Glyph_Format\n            glyph_format;\n\n    FT_Renderer_RenderFunc     render_glyph;\n    FT_Renderer_TransformFunc  transform_glyph;\n    FT_Renderer_GetCBoxFunc    get_glyph_cbox;\n    FT_Renderer_SetModeFunc    set_mode;\n\n    \nFT_Raster_Funcs\n*           raster_class;\n\n  } \nFT_Renderer_Class\n;\n\n\n\n\n\n\nThe renderer module class descriptor.\n\n\nfields\n\n\n\n\n\nroot\n\n\nThe root \nFT_Module_Class\n fields.\n\n\n\n\nglyph_format\n\n\nThe glyph image format this renderer handles.\n\n\n\n\nrender_glyph\n\n\nA method used to render the image that is in a given glyph slot into a bitmap.\n\n\n\n\ntransform_glyph\n\n\nA method used to transform the image that is in a given glyph slot.\n\n\n\n\nget_glyph_cbox\n\n\nA method used to access the glyph's cbox.\n\n\n\n\nset_mode\n\n\nA method used to pass additional parameters.\n\n\n\n\nraster_class\n\n\nFor \nFT_GLYPH_FORMAT_OUTLINE\n renderers only. This is a pointer to its raster's class.\n\n\n\n\n\n\n\n\n\n\nFT_Get_Renderer\n\u00b6\n\n\nDefined in FT_RENDER_H (freetype/ftrender.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Renderer\n )\n  \nFT_Get_Renderer\n( \nFT_Library\n       library,\n                   \nFT_Glyph_Format\n  format );\n\n\n\n\n\n\nRetrieve the current renderer for a given glyph format.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA handle to the library object.\n\n\n\n\nformat\n\n\nThe glyph format.\n\n\n\n\n\n\n\nreturn\n\n\n\nA renderer handle. 0\u00a0if none found.\n\n\nnote\n\n\n\nAn error will be returned if a module already exists by that name, or if the module requires a version of FreeType that is too great.\n\n\nTo add a new renderer, simply use \nFT_Add_Module\n. To retrieve a renderer by its name, use \nFT_Get_Module\n.\n\n\n\n\n\nFT_Set_Renderer\n\u00b6\n\n\nDefined in FT_RENDER_H (freetype/ftrender.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Set_Renderer\n( \nFT_Library\n     library,\n                   \nFT_Renderer\n    renderer,\n                   \nFT_UInt\n        num_params,\n                   \nFT_Parameter\n*  parameters );\n\n\n\n\n\n\nSet the current renderer to use, and set additional mode.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nrenderer\n\n\nA handle to the renderer object.\n\n\n\n\nnum_params\n\n\nThe number of additional parameters.\n\n\n\n\nparameters\n\n\nAdditional parameters.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIn case of success, the renderer will be used to convert glyph images in the renderer's known format into bitmaps.\n\n\nThis doesn't change the current renderer for other formats.\n\n\nCurrently, no FreeType renderer module uses \u2018parameters\u2019; you should thus always pass NULL as the value.\n\n\n\n\n\nFT_Set_Debug_Hook\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_Set_Debug_Hook\n( \nFT_Library\n         library,\n                     \nFT_UInt\n            hook_index,\n                     FT_DebugHook_Func  debug_hook );\n\n\n\n\n\n\nSet a debug hook function for debugging the interpreter of a font format.\n\n\ninout\n\n\n\n\n\nlibrary\n\n\nA handle to the library object.\n\n\n\n\n\n\n\ninput\n\n\n\n\n\nhook_index\n\n\nThe index of the debug hook. You should use the values defined in \nftobjs.h\n, e.g., \nFT_DEBUG_HOOK_TRUETYPE\n.\n\n\n\n\ndebug_hook\n\n\nThe function used to debug the interpreter.\n\n\n\n\n\n\n\nnote\n\n\n\nCurrently, four debug hook slots are available, but only two (for the TrueType and the Type\u00a01 interpreter) are defined.\n\n\nSince the internal headers of FreeType are no longer installed, the symbol \nFT_DEBUG_HOOK_TRUETYPE\n isn't available publicly. This is a bug and will be fixed in a forthcoming release.\n\n\n\n\n\nFT_Driver\n\u00b6\n\n\nDefined in FT_FREETYPE_H (freetype/freetype.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_DriverRec_*  \nFT_Driver\n;\n\n\n\n\n\n\nA handle to a given FreeType font driver object. A font driver is a module capable of creating faces from font files.",
            "title": "Module Management"
        },
        {
            "location": "/ft2-module_management/index.html#module-management",
            "text": "",
            "title": "Module Management"
        },
        {
            "location": "/ft2-module_management/index.html#synopsis",
            "text": "The definitions below are used to manage modules within FreeType. Modules can be added, upgraded, and removed at runtime. Additionally, some module properties can be controlled also.  Here is a list of possible values of the  module_name  field in the  FT_Module_Class  structure.   autofitter\n  bdf\n  cff\n  gxvalid\n  otvalid\n  pcf\n  pfr\n  psaux\n  pshinter\n  psnames\n  raster1\n  sfnt\n  smooth, smooth-lcd, smooth-lcdv\n  truetype\n  type1\n  type42\n  t1cid\n  winfonts  Note that the FreeType Cache sub-system is not a FreeType module.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-module_management/index.html#ft_module",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_ModuleRec_*   FT_Module ;   A handle to a given FreeType module object. A module can be a font driver, a renderer, or anything else that provides services to the former.",
            "title": "FT_Module"
        },
        {
            "location": "/ft2-module_management/index.html#ft_module_constructor",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n   typedef   FT_Error \n  (* FT_Module_Constructor )(  FT_Module   module );   A function used to initialize (not create) a new module object.",
            "title": "FT_Module_Constructor"
        },
        {
            "location": "/ft2-module_management/index.html#ft_module_destructor",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n   typedef   void \n  (* FT_Module_Destructor )(  FT_Module   module );   A function used to finalize (not destroy) a given module object.",
            "title": "FT_Module_Destructor"
        },
        {
            "location": "/ft2-module_management/index.html#ft_module_requester",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n   typedef  FT_Module_Interface\n  (* FT_Module_Requester )(  FT_Module     module,\n                           const   char *  name );   A function used to query a given module for a specific interface.",
            "title": "FT_Module_Requester"
        },
        {
            "location": "/ft2-module_management/index.html#ft_module_class",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n   typedef   struct   FT_Module_Class_\n  {\n     FT_ULong                module_flags;\n     FT_Long                 module_size;\n     const   FT_String *       module_name;\n     FT_Fixed                module_version;\n     FT_Fixed                module_requires;\n\n     const   void *            module_interface;\n\n     FT_Module_Constructor   module_init;\n     FT_Module_Destructor    module_done;\n     FT_Module_Requester     get_interface;\n\n  }  FT_Module_Class ;   The module class descriptor.",
            "title": "FT_Module_Class"
        },
        {
            "location": "/ft2-module_management/index.html#ft_add_module",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Add_Module (  FT_Library               library,\n                  const   FT_Module_Class *  clazz );   Add a new module to a given library instance.",
            "title": "FT_Add_Module"
        },
        {
            "location": "/ft2-module_management/index.html#ft_get_module",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Module  )\n   FT_Get_Module (  FT_Library    library,\n                  const   char *  module_name );   Find a module by its name.",
            "title": "FT_Get_Module"
        },
        {
            "location": "/ft2-module_management/index.html#ft_remove_module",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Remove_Module (  FT_Library   library,\n                     FT_Module    module );   Remove a given module from a library instance.",
            "title": "FT_Remove_Module"
        },
        {
            "location": "/ft2-module_management/index.html#ft_add_default_modules",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  void  )\n   FT_Add_Default_Modules (  FT_Library   library );   Add the set of default drivers to a given library object. This is only useful when you create a library object with  FT_New_Library  (usually to plug a custom memory manager).",
            "title": "FT_Add_Default_Modules"
        },
        {
            "location": "/ft2-module_management/index.html#ft_property_set",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Property_Set (  FT_Library         library,\n                    const   FT_String *  module_name,\n                    const   FT_String *  property_name,\n                    const   void *       value );   Set a property for a given module.",
            "title": "FT_Property_Set"
        },
        {
            "location": "/ft2-module_management/index.html#ft_property_get",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Property_Get (  FT_Library         library,\n                    const   FT_String *  module_name,\n                    const   FT_String *  property_name,\n                    void *             value );   Get a module's property value.",
            "title": "FT_Property_Get"
        },
        {
            "location": "/ft2-module_management/index.html#ft_set_default_properties",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  void  )\n   FT_Set_Default_Properties (  FT_Library   library );   If compilation option FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES is set, this function reads the  FREETYPE_PROPERTIES  environment variable to control driver properties. See section \u2018 Driver properties \u2019 for more.  If the compilation option is not set, this function does nothing.  FREETYPE_PROPERTIES  has the following syntax form (broken here into multiple lines for better readability).   <optional whitespace>\n  <module-name1> ':'\n  <property-name1> '=' <property-value1>\n  <whitespace>\n  <module-name2> ':'\n  <property-name2> '=' <property-value2>\n  ...  Example:   FREETYPE_PROPERTIES=truetype:interpreter-version=35 \\\n                      cff:no-stem-darkening=1 \\\n                      autofitter:warping=1",
            "title": "FT_Set_Default_Properties"
        },
        {
            "location": "/ft2-module_management/index.html#ft_new_library",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_New_Library (  FT_Memory     memory,\n                   FT_Library   *alibrary );   This function is used to create a new FreeType library instance from a given memory object. It is thus possible to use libraries with distinct memory allocators within the same program. Note, however, that the used  FT_Memory  structure is expected to remain valid for the life of the  FT_Library  object.  Normally, you would call this function (followed by a call to  FT_Add_Default_Modules  or a series of calls to  FT_Add_Module , and a call to  FT_Set_Default_Properties ) instead of  FT_Init_FreeType  to initialize the FreeType library.  Don't use  FT_Done_FreeType  but  FT_Done_Library  to destroy a library instance.",
            "title": "FT_New_Library"
        },
        {
            "location": "/ft2-module_management/index.html#ft_done_library",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Done_Library (  FT_Library   library );   Discard a given library object. This closes all drivers and discards all resource objects.",
            "title": "FT_Done_Library"
        },
        {
            "location": "/ft2-module_management/index.html#ft_reference_library",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Reference_Library (  FT_Library   library );   A counter gets initialized to\u00a01 at the time an  FT_Library  structure is created. This function increments the counter.  FT_Done_Library  then only destroys a library if the counter is\u00a01, otherwise it simply decrements the counter.  This function helps in managing life-cycles of structures that reference  FT_Library  objects.",
            "title": "FT_Reference_Library"
        },
        {
            "location": "/ft2-module_management/index.html#ft_renderer",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_RendererRec_*   FT_Renderer ;   A handle to a given FreeType renderer. A renderer is a module in charge of converting a glyph's outline image to a bitmap. It supports a single glyph image format, and one or more target surface depths.",
            "title": "FT_Renderer"
        },
        {
            "location": "/ft2-module_management/index.html#ft_renderer_class",
            "text": "Defined in FT_RENDER_H (freetype/ftrender.h).   \n   typedef   struct   FT_Renderer_Class_\n  {\n     FT_Module_Class             root;\n\n     FT_Glyph_Format             glyph_format;\n\n    FT_Renderer_RenderFunc     render_glyph;\n    FT_Renderer_TransformFunc  transform_glyph;\n    FT_Renderer_GetCBoxFunc    get_glyph_cbox;\n    FT_Renderer_SetModeFunc    set_mode;\n\n     FT_Raster_Funcs *           raster_class;\n\n  }  FT_Renderer_Class ;   The renderer module class descriptor.",
            "title": "FT_Renderer_Class"
        },
        {
            "location": "/ft2-module_management/index.html#ft_get_renderer",
            "text": "Defined in FT_RENDER_H (freetype/ftrender.h).   \n  FT_EXPORT(  FT_Renderer  )\n   FT_Get_Renderer (  FT_Library        library,\n                    FT_Glyph_Format   format );   Retrieve the current renderer for a given glyph format.",
            "title": "FT_Get_Renderer"
        },
        {
            "location": "/ft2-module_management/index.html#ft_set_renderer",
            "text": "Defined in FT_RENDER_H (freetype/ftrender.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Set_Renderer (  FT_Library      library,\n                    FT_Renderer     renderer,\n                    FT_UInt         num_params,\n                    FT_Parameter *  parameters );   Set the current renderer to use, and set additional mode.",
            "title": "FT_Set_Renderer"
        },
        {
            "location": "/ft2-module_management/index.html#ft_set_debug_hook",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  void  )\n   FT_Set_Debug_Hook (  FT_Library          library,\n                      FT_UInt             hook_index,\n                     FT_DebugHook_Func  debug_hook );   Set a debug hook function for debugging the interpreter of a font format.",
            "title": "FT_Set_Debug_Hook"
        },
        {
            "location": "/ft2-module_management/index.html#ft_driver",
            "text": "Defined in FT_FREETYPE_H (freetype/freetype.h).   \n   typedef   struct  FT_DriverRec_*   FT_Driver ;   A handle to a given FreeType font driver object. A font driver is a module capable of creating faces from font files.",
            "title": "FT_Driver"
        },
        {
            "location": "/ft2-gzip/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb GZIP Streams\n\n\n\n\nGZIP Streams\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of Gzip-specific functions.\n\n\nFT_Stream_OpenGzip\n\u00b6\n\n\nDefined in FT_GZIP_H (freetype/ftgzip.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stream_OpenGzip\n( \nFT_Stream\n  stream,\n                      \nFT_Stream\n  source );\n\n\n\n\n\n\nOpen a new stream to parse gzip-compressed font files. This is mainly used to support the compressed \n*.pcf.gz\n fonts that come with XFree86.\n\n\ninput\n\n\n\n\n\nstream\n\n\nThe target embedding stream.\n\n\n\n\nsource\n\n\nThe source stream.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe source stream must be opened \nbefore\n calling this function.\n\n\nCalling the internal function \nFT_Stream_Close\n on the new stream will \nnot\n call \nFT_Stream_Close\n on the source stream. None of the stream objects will be released to the heap.\n\n\nThe stream implementation is very basic and resets the decompression process each time seeking backwards is needed within the stream.\n\n\nIn certain builds of the library, gzip compression recognition is automatically handled when calling \nFT_New_Face\n or \nFT_Open_Face\n. This means that if no font driver is capable of handling the raw compressed file, the library will try to open a gzipped stream from it and re-open the face with it.\n\n\nThis function may return \nFT_Err_Unimplemented_Feature\n if your build of FreeType was not compiled with zlib support.\n\n\n\n\n\nFT_Gzip_Uncompress\n\u00b6\n\n\nDefined in FT_GZIP_H (freetype/ftgzip.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Gzip_Uncompress\n( \nFT_Memory\n       memory,\n                      \nFT_Byte\n*        output,\n                      \nFT_ULong\n*       output_len,\n                      \nconst\n \nFT_Byte\n*  input,\n                      \nFT_ULong\n        input_len );\n\n\n\n\n\n\nDecompress a zipped input buffer into an output buffer. This function is modeled after zlib's \u2018uncompress\u2019 function.\n\n\ninput\n\n\n\n\n\nmemory\n\n\nA FreeType memory handle.\n\n\n\n\ninput\n\n\nThe input buffer.\n\n\n\n\ninput_len\n\n\nThe length of the input buffer.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\noutput\n\n\nThe output buffer.\n\n\n\n\n\n\n\ninout\n\n\n\n\n\noutput_len\n\n\nBefore calling the function, this is the total size of the output buffer, which must be large enough to hold the entire uncompressed data (so the size of the uncompressed data must be known in advance). After calling the function, \noutput_len\n is the size of the used data in \u2018output\u2019.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function may return \nFT_Err_Unimplemented_Feature\n if your build of FreeType was not compiled with zlib support.\n\n\nsince\n\n\n\n2.5.1",
            "title": "GZIP Streams"
        },
        {
            "location": "/ft2-gzip/index.html#gzip-streams",
            "text": "",
            "title": "GZIP Streams"
        },
        {
            "location": "/ft2-gzip/index.html#synopsis",
            "text": "This section contains the declaration of Gzip-specific functions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-gzip/index.html#ft_stream_opengzip",
            "text": "Defined in FT_GZIP_H (freetype/ftgzip.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stream_OpenGzip (  FT_Stream   stream,\n                       FT_Stream   source );   Open a new stream to parse gzip-compressed font files. This is mainly used to support the compressed  *.pcf.gz  fonts that come with XFree86.",
            "title": "FT_Stream_OpenGzip"
        },
        {
            "location": "/ft2-gzip/index.html#ft_gzip_uncompress",
            "text": "Defined in FT_GZIP_H (freetype/ftgzip.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Gzip_Uncompress (  FT_Memory        memory,\n                       FT_Byte *        output,\n                       FT_ULong *       output_len,\n                       const   FT_Byte *  input,\n                       FT_ULong         input_len );   Decompress a zipped input buffer into an output buffer. This function is modeled after zlib's \u2018uncompress\u2019 function.",
            "title": "FT_Gzip_Uncompress"
        },
        {
            "location": "/ft2-lzw/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb LZW Streams\n\n\n\n\nLZW Streams\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of LZW-specific functions.\n\n\nFT_Stream_OpenLZW\n\u00b6\n\n\nDefined in FT_LZW_H (freetype/ftlzw.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stream_OpenLZW\n( \nFT_Stream\n  stream,\n                     \nFT_Stream\n  source );\n\n\n\n\n\n\nOpen a new stream to parse LZW-compressed font files. This is mainly used to support the compressed \n*.pcf.Z\n fonts that come with XFree86.\n\n\ninput\n\n\n\n\n\nstream\n\n\nThe target embedding stream.\n\n\n\n\nsource\n\n\nThe source stream.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe source stream must be opened \nbefore\n calling this function.\n\n\nCalling the internal function \nFT_Stream_Close\n on the new stream will \nnot\n call \nFT_Stream_Close\n on the source stream. None of the stream objects will be released to the heap.\n\n\nThe stream implementation is very basic and resets the decompression process each time seeking backwards is needed within the stream\n\n\nIn certain builds of the library, LZW compression recognition is automatically handled when calling \nFT_New_Face\n or \nFT_Open_Face\n. This means that if no font driver is capable of handling the raw compressed file, the library will try to open a LZW stream from it and re-open the face with it.\n\n\nThis function may return \nFT_Err_Unimplemented_Feature\n if your build of FreeType was not compiled with LZW support.",
            "title": "LZW Streams"
        },
        {
            "location": "/ft2-lzw/index.html#lzw-streams",
            "text": "",
            "title": "LZW Streams"
        },
        {
            "location": "/ft2-lzw/index.html#synopsis",
            "text": "This section contains the declaration of LZW-specific functions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-lzw/index.html#ft_stream_openlzw",
            "text": "Defined in FT_LZW_H (freetype/ftlzw.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stream_OpenLZW (  FT_Stream   stream,\n                      FT_Stream   source );   Open a new stream to parse LZW-compressed font files. This is mainly used to support the compressed  *.pcf.Z  fonts that come with XFree86.",
            "title": "FT_Stream_OpenLZW"
        },
        {
            "location": "/ft2-bzip2/index.html",
            "text": "Docs\n \u00bb \nSupport API\n \u00bb BZIP2 Streams\n\n\n\n\nBZIP2 Streams\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of Bzip2-specific functions.\n\n\nFT_Stream_OpenBzip2\n\u00b6\n\n\nDefined in FT_BZIP2_H (freetype/ftbzip2.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_Stream_OpenBzip2\n( \nFT_Stream\n  stream,\n                       \nFT_Stream\n  source );\n\n\n\n\n\n\nOpen a new stream to parse bzip2-compressed font files. This is mainly used to support the compressed \n*.pcf.bz2\n fonts that come with XFree86.\n\n\ninput\n\n\n\n\n\nstream\n\n\nThe target embedding stream.\n\n\n\n\nsource\n\n\nThe source stream.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThe source stream must be opened \nbefore\n calling this function.\n\n\nCalling the internal function \nFT_Stream_Close\n on the new stream will \nnot\n call \nFT_Stream_Close\n on the source stream. None of the stream objects will be released to the heap.\n\n\nThe stream implementation is very basic and resets the decompression process each time seeking backwards is needed within the stream.\n\n\nIn certain builds of the library, bzip2 compression recognition is automatically handled when calling \nFT_New_Face\n or \nFT_Open_Face\n. This means that if no font driver is capable of handling the raw compressed file, the library will try to open a bzip2 compressed stream from it and re-open the face with it.\n\n\nThis function may return \nFT_Err_Unimplemented_Feature\n if your build of FreeType was not compiled with bzip2 support.",
            "title": "BZIP2 Streams"
        },
        {
            "location": "/ft2-bzip2/index.html#bzip2-streams",
            "text": "",
            "title": "BZIP2 Streams"
        },
        {
            "location": "/ft2-bzip2/index.html#synopsis",
            "text": "This section contains the declaration of Bzip2-specific functions.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-bzip2/index.html#ft_stream_openbzip2",
            "text": "Defined in FT_BZIP2_H (freetype/ftbzip2.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_Stream_OpenBzip2 (  FT_Stream   stream,\n                        FT_Stream   source );   Open a new stream to parse bzip2-compressed font files. This is mainly used to support the compressed  *.pcf.bz2  fonts that come with XFree86.",
            "title": "FT_Stream_OpenBzip2"
        },
        {
            "location": "/ft2-error_enumerations/index.html",
            "text": "Docs\n \u00bb \nError Codes\n \u00bb Error Enumerations\n\n\n\n\nError Enumerations\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe header file \nfterrors.h\n (which is automatically included by \nfreetype.h\n defines the handling of FreeType's enumeration constants. It can also be used to generate error message strings with a small macro trick explained below.\n\n\nError Formats\n\n\nThe configuration macro FT_CONFIG_OPTION_USE_MODULE_ERRORS can be defined in \nftoption.h\n in order to make the higher byte indicate the module where the error has happened (this is not compatible with standard builds of FreeType\u00a02, however). See the file \nftmoderr.h\n for more details.\n\n\nError Message Strings\n\n\nError definitions are set up with special macros that allow client applications to build a table of error message strings. The strings are not included in a normal build of FreeType\u00a02 to save space (most client applications do not use them).\n\n\nTo do so, you have to define the following macros before including this file.\n\n  FT_ERROR_START_LIST\n\n\n\nThis macro is called before anything else to define the start of the error list. It is followed by several FT_ERROR_DEF calls.\n\n  FT_ERROR_DEF( e, v, s )\n\n\n\nThis macro is called to define one single error. \u2018e\u2019 is the error code identifier (e.g., \nInvalid_Argument\n), \u2018v\u2019 is the error's numerical value, and \u2018s\u2019 is the corresponding error string.\n\n  FT_ERROR_END_LIST\n\n\n\nThis macro ends the list.\n\n\nAdditionally, you have to undefine \nFTERRORS_H_\n before #including this file.\n\n\nHere is a simple example.\n\n  #undef FTERRORS_H_\n  #define FT_ERRORDEF( e, v, s )  { e, s },\n  #define FT_ERROR_START_LIST     {\n  #define FT_ERROR_END_LIST       { 0, NULL } };\n\n  const struct\n  {\n    int          err_code;\n    const char*  err_msg;\n  } ft_errors[] =\n\n  #include FT_ERRORS_H\n\n\n\nNote that \nFT_Err_Ok\n is \nnot\n defined with \nFT_ERRORDEF\n but with \nFT_NOERRORDEF\n; it is always zero.",
            "title": "Error Enumerations"
        },
        {
            "location": "/ft2-error_enumerations/index.html#error-enumerations",
            "text": "",
            "title": "Error Enumerations"
        },
        {
            "location": "/ft2-error_enumerations/index.html#synopsis",
            "text": "The header file  fterrors.h  (which is automatically included by  freetype.h  defines the handling of FreeType's enumeration constants. It can also be used to generate error message strings with a small macro trick explained below.  Error Formats  The configuration macro FT_CONFIG_OPTION_USE_MODULE_ERRORS can be defined in  ftoption.h  in order to make the higher byte indicate the module where the error has happened (this is not compatible with standard builds of FreeType\u00a02, however). See the file  ftmoderr.h  for more details.  Error Message Strings  Error definitions are set up with special macros that allow client applications to build a table of error message strings. The strings are not included in a normal build of FreeType\u00a02 to save space (most client applications do not use them).  To do so, you have to define the following macros before including this file.   FT_ERROR_START_LIST  This macro is called before anything else to define the start of the error list. It is followed by several FT_ERROR_DEF calls.   FT_ERROR_DEF( e, v, s )  This macro is called to define one single error. \u2018e\u2019 is the error code identifier (e.g.,  Invalid_Argument ), \u2018v\u2019 is the error's numerical value, and \u2018s\u2019 is the corresponding error string.   FT_ERROR_END_LIST  This macro ends the list.  Additionally, you have to undefine  FTERRORS_H_  before #including this file.  Here is a simple example.   #undef FTERRORS_H_\n  #define FT_ERRORDEF( e, v, s )  { e, s },\n  #define FT_ERROR_START_LIST     {\n  #define FT_ERROR_END_LIST       { 0, NULL } };\n\n  const struct\n  {\n    int          err_code;\n    const char*  err_msg;\n  } ft_errors[] =\n\n  #include FT_ERRORS_H  Note that  FT_Err_Ok  is  not  defined with  FT_ERRORDEF  but with  FT_NOERRORDEF ; it is always zero.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-error_code_values/index.html",
            "text": "Docs\n \u00bb \nError Codes\n \u00bb Error Code Values\n\n\n\n\nError Code Values\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThe list below is taken verbatim from the file \nfterrdef.h\n (loaded automatically by including \nFT_FREETYPE_H\n). The first argument of the \nFT_ERROR_DEF_\n macro is the error label; by default, the prefix \nFT_Err_\n gets added so that you get error names like \nFT_Err_Cannot_Open_Resource\n. The second argument is the error code, and the last argument an error string, which is not used by FreeType.\n\n\nWithin your application you should \nonly\n use error names and \nnever\n its numeric values! The latter might (and actually do) change in forthcoming FreeType versions.\n\n\nMacro \nFT_NOERRORDEF_\n defines \nFT_Err_Ok\n, which is always zero. See the \u2018Error Enumerations\u2019 subsection how to automatically generate a list of error strings.\n\n\nFT_Err_XXX\n\u00b6\n\n\n\n\n\n  /* generic errors */\n\n  FT_NOERRORDEF_( Ok,                                        0x00,\n                  \"no error\" )\n\n  FT_ERRORDEF_( Cannot_Open_Resource,                        0x01,\n                \"cannot open resource\" )\n  FT_ERRORDEF_( Unknown_File_Format,                         0x02,\n                \"unknown file format\" )\n  FT_ERRORDEF_( Invalid_File_Format,                         0x03,\n                \"broken file\" )\n  FT_ERRORDEF_( Invalid_Version,                             0x04,\n                \"invalid FreeType version\" )\n  FT_ERRORDEF_( Lower_Module_Version,                        0x05,\n                \"module version is too low\" )\n  FT_ERRORDEF_( Invalid_Argument,                            0x06,\n                \"invalid argument\" )\n  FT_ERRORDEF_( Unimplemented_Feature,                       0x07,\n                \"unimplemented feature\" )\n  FT_ERRORDEF_( Invalid_Table,                               0x08,\n                \"broken table\" )\n  FT_ERRORDEF_( Invalid_Offset,                              0x09,\n                \"broken offset within table\" )\n  FT_ERRORDEF_( Array_Too_Large,                             0x0A,\n                \"array allocation size too large\" )\n  FT_ERRORDEF_( Missing_Module,                              0x0B,\n                \"missing module\" )\n  FT_ERRORDEF_( Missing_Property,                            0x0C,\n                \"missing property\" )\n\n  /* glyph/character errors */\n\n  FT_ERRORDEF_( Invalid_Glyph_Index,                         0x10,\n                \"invalid glyph index\" )\n  FT_ERRORDEF_( Invalid_Character_Code,                      0x11,\n                \"invalid character code\" )\n  FT_ERRORDEF_( Invalid_Glyph_Format,                        0x12,\n                \"unsupported glyph image format\" )\n  FT_ERRORDEF_( Cannot_Render_Glyph,                         0x13,\n                \"cannot render this glyph format\" )\n  FT_ERRORDEF_( Invalid_Outline,                             0x14,\n                \"invalid outline\" )\n  FT_ERRORDEF_( Invalid_Composite,                           0x15,\n                \"invalid composite glyph\" )\n  FT_ERRORDEF_( Too_Many_Hints,                              0x16,\n                \"too many hints\" )\n  FT_ERRORDEF_( Invalid_Pixel_Size,                          0x17,\n                \"invalid pixel size\" )\n\n  /* handle errors */\n\n  FT_ERRORDEF_( Invalid_Handle,                              0x20,\n                \"invalid object handle\" )\n  FT_ERRORDEF_( Invalid_Library_Handle,                      0x21,\n                \"invalid library handle\" )\n  FT_ERRORDEF_( Invalid_Driver_Handle,                       0x22,\n                \"invalid module handle\" )\n  FT_ERRORDEF_( Invalid_Face_Handle,                         0x23,\n                \"invalid face handle\" )\n  FT_ERRORDEF_( Invalid_Size_Handle,                         0x24,\n                \"invalid size handle\" )\n  FT_ERRORDEF_( Invalid_Slot_Handle,                         0x25,\n                \"invalid glyph slot handle\" )\n  FT_ERRORDEF_( Invalid_CharMap_Handle,                      0x26,\n                \"invalid charmap handle\" )\n  FT_ERRORDEF_( Invalid_Cache_Handle,                        0x27,\n                \"invalid cache manager handle\" )\n  FT_ERRORDEF_( Invalid_Stream_Handle,                       0x28,\n                \"invalid stream handle\" )\n\n  /* driver errors */\n\n  FT_ERRORDEF_( Too_Many_Drivers,                            0x30,\n                \"too many modules\" )\n  FT_ERRORDEF_( Too_Many_Extensions,                         0x31,\n                \"too many extensions\" )\n\n  /* memory errors */\n\n  FT_ERRORDEF_( Out_Of_Memory,                               0x40,\n                \"out of memory\" )\n  FT_ERRORDEF_( Unlisted_Object,                             0x41,\n                \"unlisted object\" )\n\n  /* stream errors */\n\n  FT_ERRORDEF_( Cannot_Open_Stream,                          0x51,\n                \"cannot open stream\" )\n  FT_ERRORDEF_( Invalid_Stream_Seek,                         0x52,\n                \"invalid stream seek\" )\n  FT_ERRORDEF_( Invalid_Stream_Skip,                         0x53,\n                \"invalid stream skip\" )\n  FT_ERRORDEF_( Invalid_Stream_Read,                         0x54,\n                \"invalid stream read\" )\n  FT_ERRORDEF_( Invalid_Stream_Operation,                    0x55,\n                \"invalid stream operation\" )\n  FT_ERRORDEF_( Invalid_Frame_Operation,                     0x56,\n                \"invalid frame operation\" )\n  FT_ERRORDEF_( Nested_Frame_Access,                         0x57,\n                \"nested frame access\" )\n  FT_ERRORDEF_( Invalid_Frame_Read,                          0x58,\n                \"invalid frame read\" )\n\n  /* raster errors */\n\n  FT_ERRORDEF_( Raster_Uninitialized,                        0x60,\n                \"raster uninitialized\" )\n  FT_ERRORDEF_( Raster_Corrupted,                            0x61,\n                \"raster corrupted\" )\n  FT_ERRORDEF_( Raster_Overflow,                             0x62,\n                \"raster overflow\" )\n  FT_ERRORDEF_( Raster_Negative_Height,                      0x63,\n                \"negative height while rastering\" )\n\n  /* cache errors */\n\n  FT_ERRORDEF_( Too_Many_Caches,                             0x70,\n                \"too many registered caches\" )\n\n  /* TrueType and SFNT errors */\n\n  FT_ERRORDEF_( Invalid_Opcode,                              0x80,\n                \"invalid opcode\" )\n  FT_ERRORDEF_( Too_Few_Arguments,                           0x81,\n                \"too few arguments\" )\n  FT_ERRORDEF_( Stack_Overflow,                              0x82,\n                \"stack overflow\" )\n  FT_ERRORDEF_( Code_Overflow,                               0x83,\n                \"code overflow\" )\n  FT_ERRORDEF_( Bad_Argument,                                0x84,\n                \"bad argument\" )\n  FT_ERRORDEF_( Divide_By_Zero,                              0x85,\n                \"division by zero\" )\n  FT_ERRORDEF_( Invalid_Reference,                           0x86,\n                \"invalid reference\" )\n  FT_ERRORDEF_( Debug_OpCode,                                0x87,\n                \"found debug opcode\" )\n  FT_ERRORDEF_( ENDF_In_Exec_Stream,                         0x88,\n                \"found ENDF opcode in execution stream\" )\n  FT_ERRORDEF_( Nested_DEFS,                                 0x89,\n                \"nested DEFS\" )\n  FT_ERRORDEF_( Invalid_CodeRange,                           0x8A,\n                \"invalid code range\" )\n  FT_ERRORDEF_( Execution_Too_Long,                          0x8B,\n                \"execution context too \nlong\n\" )\n  FT_ERRORDEF_( Too_Many_Function_Defs,                      0x8C,\n                \"too many function definitions\" )\n  FT_ERRORDEF_( Too_Many_Instruction_Defs,                   0x8D,\n                \"too many instruction definitions\" )\n  FT_ERRORDEF_( Table_Missing,                               0x8E,\n                \"SFNT font table missing\" )\n  FT_ERRORDEF_( Horiz_Header_Missing,                        0x8F,\n                \"horizontal header (hhea) table missing\" )\n  FT_ERRORDEF_( Locations_Missing,                           0x90,\n                \"locations (loca) table missing\" )\n  FT_ERRORDEF_( Name_Table_Missing,                          0x91,\n                \"name table missing\" )\n  FT_ERRORDEF_( CMap_Table_Missing,                          0x92,\n                \"character map (cmap) table missing\" )\n  FT_ERRORDEF_( Hmtx_Table_Missing,                          0x93,\n                \"horizontal metrics (hmtx) table missing\" )\n  FT_ERRORDEF_( Post_Table_Missing,                          0x94,\n                \"PostScript (post) table missing\" )\n  FT_ERRORDEF_( Invalid_Horiz_Metrics,                       0x95,\n                \"invalid horizontal metrics\" )\n  FT_ERRORDEF_( Invalid_CharMap_Format,                      0x96,\n                \"invalid character map (cmap) format\" )\n  FT_ERRORDEF_( Invalid_PPem,                                0x97,\n                \"invalid ppem value\" )\n  FT_ERRORDEF_( Invalid_Vert_Metrics,                        0x98,\n                \"invalid vertical metrics\" )\n  FT_ERRORDEF_( Could_Not_Find_Context,                      0x99,\n                \"could not find context\" )\n  FT_ERRORDEF_( Invalid_Post_Table_Format,                   0x9A,\n                \"invalid PostScript (post) table format\" )\n  FT_ERRORDEF_( Invalid_Post_Table,                          0x9B,\n                \"invalid PostScript (post) table\" )\n  FT_ERRORDEF_( DEF_In_Glyf_Bytecode,                        0x9C,\n                \"found FDEF or IDEF opcode in glyf bytecode\" )\n  FT_ERRORDEF_( Missing_Bitmap,                              0x9D,\n                \"missing bitmap in strike\" )\n\n  /* CFF, CID, and Type 1 errors */\n\n  FT_ERRORDEF_( Syntax_Error,                                0xA0,\n                \"opcode syntax error\" )\n  FT_ERRORDEF_( Stack_Underflow,                             0xA1,\n                \"argument stack underflow\" )\n  FT_ERRORDEF_( Ignore,                                      0xA2,\n                \"ignore\" )\n  FT_ERRORDEF_( No_Unicode_Glyph_Name,                       0xA3,\n                \"no Unicode glyph name found\" )\n  FT_ERRORDEF_( Glyph_Too_Big,                               0xA4,\n                \"glyph too big for hinting\" )\n\n  /* BDF errors */\n\n  FT_ERRORDEF_( Missing_Startfont_Field,                     0xB0,\n                \"`STARTFONT' field missing\" )\n  FT_ERRORDEF_( Missing_Font_Field,                          0xB1,\n                \"`FONT' field missing\" )\n  FT_ERRORDEF_( Missing_Size_Field,                          0xB2,\n                \"`SIZE' field missing\" )\n  FT_ERRORDEF_( Missing_Fontboundingbox_Field,               0xB3,\n                \"`FONTBOUNDINGBOX' field missing\" )\n  FT_ERRORDEF_( Missing_Chars_Field,                         0xB4,\n                \"`CHARS' field missing\" )\n  FT_ERRORDEF_( Missing_Startchar_Field,                     0xB5,\n                \"`STARTCHAR' field missing\" )\n  FT_ERRORDEF_( Missing_Encoding_Field,                      0xB6,\n                \"`ENCODING' field missing\" )\n  FT_ERRORDEF_( Missing_Bbx_Field,                           0xB7,\n                \"`BBX' field missing\" )\n  FT_ERRORDEF_( Bbx_Too_Big,                                 0xB8,\n                \"`BBX' too big\" )\n  FT_ERRORDEF_( Corrupted_Font_Header,                       0xB9,\n                \"Font header corrupted or missing fields\" )\n  FT_ERRORDEF_( Corrupted_Font_Glyphs,                       0xBA,\n                \"Font glyphs corrupted or missing fields\" )",
            "title": "Error Code Values"
        },
        {
            "location": "/ft2-error_code_values/index.html#error-code-values",
            "text": "",
            "title": "Error Code Values"
        },
        {
            "location": "/ft2-error_code_values/index.html#synopsis",
            "text": "The list below is taken verbatim from the file  fterrdef.h  (loaded automatically by including  FT_FREETYPE_H ). The first argument of the  FT_ERROR_DEF_  macro is the error label; by default, the prefix  FT_Err_  gets added so that you get error names like  FT_Err_Cannot_Open_Resource . The second argument is the error code, and the last argument an error string, which is not used by FreeType.  Within your application you should  only  use error names and  never  its numeric values! The latter might (and actually do) change in forthcoming FreeType versions.  Macro  FT_NOERRORDEF_  defines  FT_Err_Ok , which is always zero. See the \u2018Error Enumerations\u2019 subsection how to automatically generate a list of error strings.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-error_code_values/index.html#ft_err_xxx",
            "text": "/* generic errors */\n\n  FT_NOERRORDEF_( Ok,                                        0x00,\n                  \"no error\" )\n\n  FT_ERRORDEF_( Cannot_Open_Resource,                        0x01,\n                \"cannot open resource\" )\n  FT_ERRORDEF_( Unknown_File_Format,                         0x02,\n                \"unknown file format\" )\n  FT_ERRORDEF_( Invalid_File_Format,                         0x03,\n                \"broken file\" )\n  FT_ERRORDEF_( Invalid_Version,                             0x04,\n                \"invalid FreeType version\" )\n  FT_ERRORDEF_( Lower_Module_Version,                        0x05,\n                \"module version is too low\" )\n  FT_ERRORDEF_( Invalid_Argument,                            0x06,\n                \"invalid argument\" )\n  FT_ERRORDEF_( Unimplemented_Feature,                       0x07,\n                \"unimplemented feature\" )\n  FT_ERRORDEF_( Invalid_Table,                               0x08,\n                \"broken table\" )\n  FT_ERRORDEF_( Invalid_Offset,                              0x09,\n                \"broken offset within table\" )\n  FT_ERRORDEF_( Array_Too_Large,                             0x0A,\n                \"array allocation size too large\" )\n  FT_ERRORDEF_( Missing_Module,                              0x0B,\n                \"missing module\" )\n  FT_ERRORDEF_( Missing_Property,                            0x0C,\n                \"missing property\" )\n\n  /* glyph/character errors */\n\n  FT_ERRORDEF_( Invalid_Glyph_Index,                         0x10,\n                \"invalid glyph index\" )\n  FT_ERRORDEF_( Invalid_Character_Code,                      0x11,\n                \"invalid character code\" )\n  FT_ERRORDEF_( Invalid_Glyph_Format,                        0x12,\n                \"unsupported glyph image format\" )\n  FT_ERRORDEF_( Cannot_Render_Glyph,                         0x13,\n                \"cannot render this glyph format\" )\n  FT_ERRORDEF_( Invalid_Outline,                             0x14,\n                \"invalid outline\" )\n  FT_ERRORDEF_( Invalid_Composite,                           0x15,\n                \"invalid composite glyph\" )\n  FT_ERRORDEF_( Too_Many_Hints,                              0x16,\n                \"too many hints\" )\n  FT_ERRORDEF_( Invalid_Pixel_Size,                          0x17,\n                \"invalid pixel size\" )\n\n  /* handle errors */\n\n  FT_ERRORDEF_( Invalid_Handle,                              0x20,\n                \"invalid object handle\" )\n  FT_ERRORDEF_( Invalid_Library_Handle,                      0x21,\n                \"invalid library handle\" )\n  FT_ERRORDEF_( Invalid_Driver_Handle,                       0x22,\n                \"invalid module handle\" )\n  FT_ERRORDEF_( Invalid_Face_Handle,                         0x23,\n                \"invalid face handle\" )\n  FT_ERRORDEF_( Invalid_Size_Handle,                         0x24,\n                \"invalid size handle\" )\n  FT_ERRORDEF_( Invalid_Slot_Handle,                         0x25,\n                \"invalid glyph slot handle\" )\n  FT_ERRORDEF_( Invalid_CharMap_Handle,                      0x26,\n                \"invalid charmap handle\" )\n  FT_ERRORDEF_( Invalid_Cache_Handle,                        0x27,\n                \"invalid cache manager handle\" )\n  FT_ERRORDEF_( Invalid_Stream_Handle,                       0x28,\n                \"invalid stream handle\" )\n\n  /* driver errors */\n\n  FT_ERRORDEF_( Too_Many_Drivers,                            0x30,\n                \"too many modules\" )\n  FT_ERRORDEF_( Too_Many_Extensions,                         0x31,\n                \"too many extensions\" )\n\n  /* memory errors */\n\n  FT_ERRORDEF_( Out_Of_Memory,                               0x40,\n                \"out of memory\" )\n  FT_ERRORDEF_( Unlisted_Object,                             0x41,\n                \"unlisted object\" )\n\n  /* stream errors */\n\n  FT_ERRORDEF_( Cannot_Open_Stream,                          0x51,\n                \"cannot open stream\" )\n  FT_ERRORDEF_( Invalid_Stream_Seek,                         0x52,\n                \"invalid stream seek\" )\n  FT_ERRORDEF_( Invalid_Stream_Skip,                         0x53,\n                \"invalid stream skip\" )\n  FT_ERRORDEF_( Invalid_Stream_Read,                         0x54,\n                \"invalid stream read\" )\n  FT_ERRORDEF_( Invalid_Stream_Operation,                    0x55,\n                \"invalid stream operation\" )\n  FT_ERRORDEF_( Invalid_Frame_Operation,                     0x56,\n                \"invalid frame operation\" )\n  FT_ERRORDEF_( Nested_Frame_Access,                         0x57,\n                \"nested frame access\" )\n  FT_ERRORDEF_( Invalid_Frame_Read,                          0x58,\n                \"invalid frame read\" )\n\n  /* raster errors */\n\n  FT_ERRORDEF_( Raster_Uninitialized,                        0x60,\n                \"raster uninitialized\" )\n  FT_ERRORDEF_( Raster_Corrupted,                            0x61,\n                \"raster corrupted\" )\n  FT_ERRORDEF_( Raster_Overflow,                             0x62,\n                \"raster overflow\" )\n  FT_ERRORDEF_( Raster_Negative_Height,                      0x63,\n                \"negative height while rastering\" )\n\n  /* cache errors */\n\n  FT_ERRORDEF_( Too_Many_Caches,                             0x70,\n                \"too many registered caches\" )\n\n  /* TrueType and SFNT errors */\n\n  FT_ERRORDEF_( Invalid_Opcode,                              0x80,\n                \"invalid opcode\" )\n  FT_ERRORDEF_( Too_Few_Arguments,                           0x81,\n                \"too few arguments\" )\n  FT_ERRORDEF_( Stack_Overflow,                              0x82,\n                \"stack overflow\" )\n  FT_ERRORDEF_( Code_Overflow,                               0x83,\n                \"code overflow\" )\n  FT_ERRORDEF_( Bad_Argument,                                0x84,\n                \"bad argument\" )\n  FT_ERRORDEF_( Divide_By_Zero,                              0x85,\n                \"division by zero\" )\n  FT_ERRORDEF_( Invalid_Reference,                           0x86,\n                \"invalid reference\" )\n  FT_ERRORDEF_( Debug_OpCode,                                0x87,\n                \"found debug opcode\" )\n  FT_ERRORDEF_( ENDF_In_Exec_Stream,                         0x88,\n                \"found ENDF opcode in execution stream\" )\n  FT_ERRORDEF_( Nested_DEFS,                                 0x89,\n                \"nested DEFS\" )\n  FT_ERRORDEF_( Invalid_CodeRange,                           0x8A,\n                \"invalid code range\" )\n  FT_ERRORDEF_( Execution_Too_Long,                          0x8B,\n                \"execution context too  long \" )\n  FT_ERRORDEF_( Too_Many_Function_Defs,                      0x8C,\n                \"too many function definitions\" )\n  FT_ERRORDEF_( Too_Many_Instruction_Defs,                   0x8D,\n                \"too many instruction definitions\" )\n  FT_ERRORDEF_( Table_Missing,                               0x8E,\n                \"SFNT font table missing\" )\n  FT_ERRORDEF_( Horiz_Header_Missing,                        0x8F,\n                \"horizontal header (hhea) table missing\" )\n  FT_ERRORDEF_( Locations_Missing,                           0x90,\n                \"locations (loca) table missing\" )\n  FT_ERRORDEF_( Name_Table_Missing,                          0x91,\n                \"name table missing\" )\n  FT_ERRORDEF_( CMap_Table_Missing,                          0x92,\n                \"character map (cmap) table missing\" )\n  FT_ERRORDEF_( Hmtx_Table_Missing,                          0x93,\n                \"horizontal metrics (hmtx) table missing\" )\n  FT_ERRORDEF_( Post_Table_Missing,                          0x94,\n                \"PostScript (post) table missing\" )\n  FT_ERRORDEF_( Invalid_Horiz_Metrics,                       0x95,\n                \"invalid horizontal metrics\" )\n  FT_ERRORDEF_( Invalid_CharMap_Format,                      0x96,\n                \"invalid character map (cmap) format\" )\n  FT_ERRORDEF_( Invalid_PPem,                                0x97,\n                \"invalid ppem value\" )\n  FT_ERRORDEF_( Invalid_Vert_Metrics,                        0x98,\n                \"invalid vertical metrics\" )\n  FT_ERRORDEF_( Could_Not_Find_Context,                      0x99,\n                \"could not find context\" )\n  FT_ERRORDEF_( Invalid_Post_Table_Format,                   0x9A,\n                \"invalid PostScript (post) table format\" )\n  FT_ERRORDEF_( Invalid_Post_Table,                          0x9B,\n                \"invalid PostScript (post) table\" )\n  FT_ERRORDEF_( DEF_In_Glyf_Bytecode,                        0x9C,\n                \"found FDEF or IDEF opcode in glyf bytecode\" )\n  FT_ERRORDEF_( Missing_Bitmap,                              0x9D,\n                \"missing bitmap in strike\" )\n\n  /* CFF, CID, and Type 1 errors */\n\n  FT_ERRORDEF_( Syntax_Error,                                0xA0,\n                \"opcode syntax error\" )\n  FT_ERRORDEF_( Stack_Underflow,                             0xA1,\n                \"argument stack underflow\" )\n  FT_ERRORDEF_( Ignore,                                      0xA2,\n                \"ignore\" )\n  FT_ERRORDEF_( No_Unicode_Glyph_Name,                       0xA3,\n                \"no Unicode glyph name found\" )\n  FT_ERRORDEF_( Glyph_Too_Big,                               0xA4,\n                \"glyph too big for hinting\" )\n\n  /* BDF errors */\n\n  FT_ERRORDEF_( Missing_Startfont_Field,                     0xB0,\n                \"`STARTFONT' field missing\" )\n  FT_ERRORDEF_( Missing_Font_Field,                          0xB1,\n                \"`FONT' field missing\" )\n  FT_ERRORDEF_( Missing_Size_Field,                          0xB2,\n                \"`SIZE' field missing\" )\n  FT_ERRORDEF_( Missing_Fontboundingbox_Field,               0xB3,\n                \"`FONTBOUNDINGBOX' field missing\" )\n  FT_ERRORDEF_( Missing_Chars_Field,                         0xB4,\n                \"`CHARS' field missing\" )\n  FT_ERRORDEF_( Missing_Startchar_Field,                     0xB5,\n                \"`STARTCHAR' field missing\" )\n  FT_ERRORDEF_( Missing_Encoding_Field,                      0xB6,\n                \"`ENCODING' field missing\" )\n  FT_ERRORDEF_( Missing_Bbx_Field,                           0xB7,\n                \"`BBX' field missing\" )\n  FT_ERRORDEF_( Bbx_Too_Big,                                 0xB8,\n                \"`BBX' too big\" )\n  FT_ERRORDEF_( Corrupted_Font_Header,                       0xB9,\n                \"Font header corrupted or missing fields\" )\n  FT_ERRORDEF_( Corrupted_Font_Glyphs,                       0xBA,\n                \"Font glyphs corrupted or missing fields\" )",
            "title": "FT_Err_XXX"
        },
        {
            "location": "/ft2-gx_validation/index.html",
            "text": "Docs\n \u00bb \nMiscellaneous\n \u00bb TrueTypeGX/AAT Validation\n\n\n\n\nTrueTypeGX/AAT Validation\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of functions to validate some TrueTypeGX tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop, lcar).\n\n\nFT_TrueTypeGX_Validate\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_TrueTypeGX_Validate\n( \nFT_Face\n   face,\n                          \nFT_UInt\n   validation_flags,\n                          \nFT_Bytes\n  tables[\nFT_VALIDATE_GX_LENGTH\n],\n                          \nFT_UInt\n   table_length );\n\n\n\n\n\n\nValidate various TrueTypeGX tables to assure that all offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\nvalidation_flags\n\n\nA bit field that specifies the tables to be validated. See \nFT_VALIDATE_GXXXX\n for possible values.\n\n\n\n\ntable_length\n\n\nThe size of the \u2018tables\u2019 array. Normally, \nFT_VALIDATE_GX_LENGTH\n should be passed.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\ntables\n\n\nThe array where all validated sfnt tables are stored. The array itself must be allocated by a client.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with TrueTypeGX fonts, returning an error otherwise.\n\n\nAfter use, the application should deallocate the buffers pointed to by each \u2018tables\u2019 element, by calling \nFT_TrueTypeGX_Free\n. A NULL value indicates that the table either doesn't exist in the font, the application hasn't asked for validation, or the validator doesn't have the ability to validate the sfnt table.\n\n\n\n\n\nFT_TrueTypeGX_Free\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_TrueTypeGX_Free\n( \nFT_Face\n   face,\n                      \nFT_Bytes\n  table );\n\n\n\n\n\n\nFree the buffer allocated by TrueTypeGX validator.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\ntable\n\n\nThe pointer to the buffer allocated by \nFT_TrueTypeGX_Validate\n.\n\n\n\n\n\n\n\nnote\n\n\n\nThis function must be used to free the buffer allocated by \nFT_TrueTypeGX_Validate\n only.\n\n\n\n\n\nFT_ClassicKern_Validate\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_ClassicKern_Validate\n( \nFT_Face\n    face,\n                           \nFT_UInt\n    validation_flags,\n                           \nFT_Bytes\n  *ckern_table );\n\n\n\n\n\n\nValidate classic (16-bit format) kern table to assure that the offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).\n\n\nThe \u2018kern\u2019 table validator in \nFT_TrueTypeGX_Validate\n deals with both the new 32-bit format and the classic 16-bit format, while FT_ClassicKern_Validate only supports the classic 16-bit format.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\nvalidation_flags\n\n\nA bit field that specifies the dialect to be validated. See \nFT_VALIDATE_CKERNXXX\n for possible values.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nckern_table\n\n\nA pointer to the kern table.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nAfter use, the application should deallocate the buffers pointed to by \nckern_table\n, by calling \nFT_ClassicKern_Free\n. A NULL value indicates that the table doesn't exist in the font.\n\n\n\n\n\nFT_ClassicKern_Free\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_ClassicKern_Free\n( \nFT_Face\n   face,\n                       \nFT_Bytes\n  table );\n\n\n\n\n\n\nFree the buffer allocated by classic Kern validator.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\ntable\n\n\nThe pointer to the buffer that is allocated by \nFT_ClassicKern_Validate\n.\n\n\n\n\n\n\n\nnote\n\n\n\nThis function must be used to free the buffer allocated by \nFT_ClassicKern_Validate\n only.\n\n\n\n\n\nFT_VALIDATE_GX_LENGTH\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n#\ndefine\n \nFT_VALIDATE_GX_LENGTH\n  ( FT_VALIDATE_GX_LAST_INDEX + 1 )\n\n\n\n\n\n\nThe number of tables checked in this module. Use it as a parameter for the \u2018table-length\u2019 argument of function \nFT_TrueTypeGX_Validate\n.\n\n\n\n\n\nFT_VALIDATE_GXXXX\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n#\ndefine\n \nFT_VALIDATE_feat\n  FT_VALIDATE_GX_BITFIELD( feat )\n#\ndefine\n \nFT_VALIDATE_mort\n  FT_VALIDATE_GX_BITFIELD( mort )\n#\ndefine\n \nFT_VALIDATE_morx\n  FT_VALIDATE_GX_BITFIELD( morx )\n#\ndefine\n \nFT_VALIDATE_bsln\n  FT_VALIDATE_GX_BITFIELD( bsln )\n#\ndefine\n \nFT_VALIDATE_just\n  FT_VALIDATE_GX_BITFIELD( just )\n#\ndefine\n \nFT_VALIDATE_kern\n  FT_VALIDATE_GX_BITFIELD( kern )\n#\ndefine\n \nFT_VALIDATE_opbd\n  FT_VALIDATE_GX_BITFIELD( opbd )\n#\ndefine\n \nFT_VALIDATE_trak\n  FT_VALIDATE_GX_BITFIELD( trak )\n#\ndefine\n \nFT_VALIDATE_prop\n  FT_VALIDATE_GX_BITFIELD( prop )\n#\ndefine\n \nFT_VALIDATE_lcar\n  FT_VALIDATE_GX_BITFIELD( lcar )\n\n#\ndefine\n \nFT_VALIDATE_GX\n  ( \nFT_VALIDATE_feat\n | \\\n                          \nFT_VALIDATE_mort\n | \\\n                          \nFT_VALIDATE_morx\n | \\\n                          \nFT_VALIDATE_bsln\n | \\\n                          \nFT_VALIDATE_just\n | \\\n                          \nFT_VALIDATE_kern\n | \\\n                          \nFT_VALIDATE_opbd\n | \\\n                          \nFT_VALIDATE_trak\n | \\\n                          \nFT_VALIDATE_prop\n | \\\n                          \nFT_VALIDATE_lcar\n )\n\n\n\n\n\n\nA list of bit-field constants used with \nFT_TrueTypeGX_Validate\n to indicate which TrueTypeGX/AAT Type tables should be validated.\n\n\nvalues\n\n\n\n\n\nFT_VALIDATE_feat\n\n\nValidate \u2018feat\u2019 table.\n\n\n\n\nFT_VALIDATE_mort\n\n\nValidate \u2018mort\u2019 table.\n\n\n\n\nFT_VALIDATE_morx\n\n\nValidate \u2018morx\u2019 table.\n\n\n\n\nFT_VALIDATE_bsln\n\n\nValidate \u2018bsln\u2019 table.\n\n\n\n\nFT_VALIDATE_just\n\n\nValidate \u2018just\u2019 table.\n\n\n\n\nFT_VALIDATE_kern\n\n\nValidate \u2018kern\u2019 table.\n\n\n\n\nFT_VALIDATE_opbd\n\n\nValidate \u2018opbd\u2019 table.\n\n\n\n\nFT_VALIDATE_trak\n\n\nValidate \u2018trak\u2019 table.\n\n\n\n\nFT_VALIDATE_prop\n\n\nValidate \u2018prop\u2019 table.\n\n\n\n\nFT_VALIDATE_lcar\n\n\nValidate \u2018lcar\u2019 table.\n\n\n\n\nFT_VALIDATE_GX\n\n\nValidate all TrueTypeGX tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop and lcar).\n\n\n\n\n\n\n\n\n\n\nFT_VALIDATE_CKERNXXX\n\u00b6\n\n\nDefined in FT_GX_VALIDATE_H (freetype/ftgxval.h).\n\n\n\n\n\n#\ndefine\n \nFT_VALIDATE_MS\n     ( FT_VALIDATE_GX_START << 0 )\n#\ndefine\n \nFT_VALIDATE_APPLE\n  ( FT_VALIDATE_GX_START << 1 )\n\n#\ndefine\n \nFT_VALIDATE_CKERN\n  ( \nFT_VALIDATE_MS\n | \nFT_VALIDATE_APPLE\n )\n\n\n\n\n\n\nA list of bit-field constants used with \nFT_ClassicKern_Validate\n to indicate the classic kern dialect or dialects. If the selected type doesn't fit, \nFT_ClassicKern_Validate\n regards the table as invalid.\n\n\nvalues\n\n\n\n\n\nFT_VALIDATE_MS\n\n\nHandle the \u2018kern\u2019 table as a classic Microsoft kern table.\n\n\n\n\nFT_VALIDATE_APPLE\n\n\nHandle the \u2018kern\u2019 table as a classic Apple kern table.\n\n\n\n\nFT_VALIDATE_CKERN\n\n\nHandle the \u2018kern\u2019 as either classic Apple or Microsoft kern table.",
            "title": "TrueTypeGX/AAT Validation"
        },
        {
            "location": "/ft2-gx_validation/index.html#truetypegxaat-validation",
            "text": "",
            "title": "TrueTypeGX/AAT Validation"
        },
        {
            "location": "/ft2-gx_validation/index.html#synopsis",
            "text": "This section contains the declaration of functions to validate some TrueTypeGX tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop, lcar).",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_truetypegx_validate",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_TrueTypeGX_Validate (  FT_Face    face,\n                           FT_UInt    validation_flags,\n                           FT_Bytes   tables[ FT_VALIDATE_GX_LENGTH ],\n                           FT_UInt    table_length );   Validate various TrueTypeGX tables to assure that all offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).",
            "title": "FT_TrueTypeGX_Validate"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_truetypegx_free",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n  FT_EXPORT(  void  )\n   FT_TrueTypeGX_Free (  FT_Face    face,\n                       FT_Bytes   table );   Free the buffer allocated by TrueTypeGX validator.",
            "title": "FT_TrueTypeGX_Free"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_classickern_validate",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_ClassicKern_Validate (  FT_Face     face,\n                            FT_UInt     validation_flags,\n                            FT_Bytes   *ckern_table );   Validate classic (16-bit format) kern table to assure that the offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).  The \u2018kern\u2019 table validator in  FT_TrueTypeGX_Validate  deals with both the new 32-bit format and the classic 16-bit format, while FT_ClassicKern_Validate only supports the classic 16-bit format.",
            "title": "FT_ClassicKern_Validate"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_classickern_free",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n  FT_EXPORT(  void  )\n   FT_ClassicKern_Free (  FT_Face    face,\n                        FT_Bytes   table );   Free the buffer allocated by classic Kern validator.",
            "title": "FT_ClassicKern_Free"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_validate_gx_length",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n# define   FT_VALIDATE_GX_LENGTH   ( FT_VALIDATE_GX_LAST_INDEX + 1 )   The number of tables checked in this module. Use it as a parameter for the \u2018table-length\u2019 argument of function  FT_TrueTypeGX_Validate .",
            "title": "FT_VALIDATE_GX_LENGTH"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_validate_gxxxx",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n# define   FT_VALIDATE_feat   FT_VALIDATE_GX_BITFIELD( feat )\n# define   FT_VALIDATE_mort   FT_VALIDATE_GX_BITFIELD( mort )\n# define   FT_VALIDATE_morx   FT_VALIDATE_GX_BITFIELD( morx )\n# define   FT_VALIDATE_bsln   FT_VALIDATE_GX_BITFIELD( bsln )\n# define   FT_VALIDATE_just   FT_VALIDATE_GX_BITFIELD( just )\n# define   FT_VALIDATE_kern   FT_VALIDATE_GX_BITFIELD( kern )\n# define   FT_VALIDATE_opbd   FT_VALIDATE_GX_BITFIELD( opbd )\n# define   FT_VALIDATE_trak   FT_VALIDATE_GX_BITFIELD( trak )\n# define   FT_VALIDATE_prop   FT_VALIDATE_GX_BITFIELD( prop )\n# define   FT_VALIDATE_lcar   FT_VALIDATE_GX_BITFIELD( lcar )\n\n# define   FT_VALIDATE_GX   (  FT_VALIDATE_feat  | \\\n                           FT_VALIDATE_mort  | \\\n                           FT_VALIDATE_morx  | \\\n                           FT_VALIDATE_bsln  | \\\n                           FT_VALIDATE_just  | \\\n                           FT_VALIDATE_kern  | \\\n                           FT_VALIDATE_opbd  | \\\n                           FT_VALIDATE_trak  | \\\n                           FT_VALIDATE_prop  | \\\n                           FT_VALIDATE_lcar  )   A list of bit-field constants used with  FT_TrueTypeGX_Validate  to indicate which TrueTypeGX/AAT Type tables should be validated.",
            "title": "FT_VALIDATE_GXXXX"
        },
        {
            "location": "/ft2-gx_validation/index.html#ft_validate_ckernxxx",
            "text": "Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).   \n# define   FT_VALIDATE_MS      ( FT_VALIDATE_GX_START << 0 )\n# define   FT_VALIDATE_APPLE   ( FT_VALIDATE_GX_START << 1 )\n\n# define   FT_VALIDATE_CKERN   (  FT_VALIDATE_MS  |  FT_VALIDATE_APPLE  )   A list of bit-field constants used with  FT_ClassicKern_Validate  to indicate the classic kern dialect or dialects. If the selected type doesn't fit,  FT_ClassicKern_Validate  regards the table as invalid.",
            "title": "FT_VALIDATE_CKERNXXX"
        },
        {
            "location": "/ft2-incremental/index.html",
            "text": "Docs\n \u00bb \nMiscellaneous\n \u00bb Incremental Loading\n\n\n\n\nIncremental Loading\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains various functions used to perform so-called \u2018incremental\u2019 glyph loading. This is a mode where all glyphs loaded from a given \nFT_Face\n are provided by the client application.\n\n\nApart from that, all other tables are loaded normally from the font file. This mode is useful when FreeType is used within another engine, e.g., a PostScript Imaging Processor.\n\n\nTo enable this mode, you must use \nFT_Open_Face\n, passing an \nFT_Parameter\n with the \nFT_PARAM_TAG_INCREMENTAL\n tag and an \nFT_Incremental_Interface\n value. See the comments for \nFT_Incremental_InterfaceRec\n for an example.\n\n\nFT_Incremental\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n FT_IncrementalRec_*  \nFT_Incremental\n;\n\n\n\n\n\n\nAn opaque type describing a user-provided object used to implement \u2018incremental\u2019 glyph loading within FreeType. This is used to support embedded fonts in certain environments (e.g., PostScript interpreters), where the glyph data isn't in the font file, or must be overridden by different values.\n\n\nnote\n\n\n\nIt is up to client applications to create and implement \nFT_Incremental\n objects, as long as they provide implementations for the methods \nFT_Incremental_GetGlyphDataFunc\n, \nFT_Incremental_FreeGlyphDataFunc\n and \nFT_Incremental_GetGlyphMetricsFunc\n.\n\n\nSee the description of \nFT_Incremental_InterfaceRec\n to understand how to use incremental objects with FreeType.\n\n\n\n\n\nFT_Incremental_MetricsRec\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Incremental_MetricsRec_\n  {\n    \nFT_Long\n  bearing_x;\n    \nFT_Long\n  bearing_y;\n    \nFT_Long\n  advance;\n    \nFT_Long\n  advance_v;     /* since 2.3.12 */\n\n  } \nFT_Incremental_MetricsRec\n;\n\n\n\n\n\n\nA small structure used to contain the basic glyph metrics returned by the \nFT_Incremental_GetGlyphMetricsFunc\n method.\n\n\nfields\n\n\n\n\n\nbearing_x\n\n\nLeft bearing, in font units.\n\n\n\n\nbearing_y\n\n\nTop bearing, in font units.\n\n\n\n\nadvance\n\n\nHorizontal component of glyph advance, in font units.\n\n\n\n\nadvance_v\n\n\nVertical component of glyph advance, in font units.\n\n\n\n\n\n\n\nnote\n\n\n\nThese correspond to horizontal or vertical metrics depending on the value of the \u2018vertical\u2019 argument to the function \nFT_Incremental_GetGlyphMetricsFunc\n.\n\n\n\n\n\nFT_Incremental_Metrics\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n   \ntypedef\n \nstruct\n FT_Incremental_MetricsRec_*  \nFT_Incremental_Metrics\n;\n\n\n\n\n\n\nA handle to an \nFT_Incremental_MetricsRec\n structure.\n\n\n\n\n\nFT_Incremental_GetGlyphDataFunc\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Error\n\n  (*\nFT_Incremental_GetGlyphDataFunc\n)( \nFT_Incremental\n  incremental,\n                                      \nFT_UInt\n         glyph_index,\n                                      \nFT_Data\n*        adata );\n\n\n\n\n\n\nA function called by FreeType to access a given glyph's data bytes during \nFT_Load_Glyph\n or \nFT_Load_Char\n if incremental loading is enabled.\n\n\nNote that the format of the glyph's data bytes depends on the font file format. For TrueType, it must correspond to the raw bytes within the \u2018glyf\u2019 table. For PostScript formats, it must correspond to the \nunencrypted\n charstring bytes, without any \nlenIV\n header. It is undefined for any other format.\n\n\ninput\n\n\n\n\n\nincremental\n\n\nHandle to an opaque \nFT_Incremental\n handle provided by the client application.\n\n\n\n\nglyph_index\n\n\nIndex of relevant glyph.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nadata\n\n\nA structure describing the returned glyph data bytes (which will be accessed as a read-only byte block).\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nIf this function returns successfully the method \nFT_Incremental_FreeGlyphDataFunc\n will be called later to release the data bytes.\n\n\nNested calls to \nFT_Incremental_GetGlyphDataFunc\n can happen for compound glyphs.\n\n\n\n\n\nFT_Incremental_FreeGlyphDataFunc\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nvoid\n\n  (*\nFT_Incremental_FreeGlyphDataFunc\n)( \nFT_Incremental\n  incremental,\n                                       \nFT_Data\n*        data );\n\n\n\n\n\n\nA function used to release the glyph data bytes returned by a successful call to \nFT_Incremental_GetGlyphDataFunc\n.\n\n\ninput\n\n\n\n\n\nincremental\n\n\nA handle to an opaque \nFT_Incremental\n handle provided by the client application.\n\n\n\n\ndata\n\n\nA structure describing the glyph data bytes (which will be accessed as a read-only byte block).\n\n\n\n\n\n\n\n\n\n\nFT_Incremental_GetGlyphMetricsFunc\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Error\n\n  (*\nFT_Incremental_GetGlyphMetricsFunc\n)\n                      ( \nFT_Incremental\n              incremental,\n                        \nFT_UInt\n                     glyph_index,\n                        \nFT_Bool\n                     vertical,\n                        \nFT_Incremental_MetricsRec\n  *ametrics );\n\n\n\n\n\n\nA function used to retrieve the basic metrics of a given glyph index before accessing its data. This is necessary because, in certain formats like TrueType, the metrics are stored in a different place from the glyph images proper.\n\n\ninput\n\n\n\n\n\nincremental\n\n\nA handle to an opaque \nFT_Incremental\n handle provided by the client application.\n\n\n\n\nglyph_index\n\n\nIndex of relevant glyph.\n\n\n\n\nvertical\n\n\nIf true, return vertical metrics.\n\n\n\n\nametrics\n\n\nThis parameter is used for both input and output. The original glyph metrics, if any, in font units. If metrics are not available all the values must be set to zero.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nametrics\n\n\nThe replacement glyph metrics in font units.\n\n\n\n\n\n\n\n\n\n\nFT_Incremental_FuncsRec\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Incremental_FuncsRec_\n  {\n    \nFT_Incremental_GetGlyphDataFunc\n     get_glyph_data;\n    \nFT_Incremental_FreeGlyphDataFunc\n    free_glyph_data;\n    \nFT_Incremental_GetGlyphMetricsFunc\n  get_glyph_metrics;\n\n  } \nFT_Incremental_FuncsRec\n;\n\n\n\n\n\n\nA table of functions for accessing fonts that load data incrementally. Used in \nFT_Incremental_InterfaceRec\n.\n\n\nfields\n\n\n\n\n\nget_glyph_data\n\n\nThe function to get glyph data. Must not be null.\n\n\n\n\nfree_glyph_data\n\n\nThe function to release glyph data. Must not be null.\n\n\n\n\nget_glyph_metrics\n\n\nThe function to get glyph metrics. May be null if the font does not provide overriding glyph metrics.\n\n\n\n\n\n\n\n\n\n\nFT_Incremental_InterfaceRec\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nstruct\n  FT_Incremental_InterfaceRec_\n  {\n    \nconst\n \nFT_Incremental_FuncsRec\n*  funcs;\n    \nFT_Incremental\n                  object;\n\n  } \nFT_Incremental_InterfaceRec\n;\n\n\n\n\n\n\nA structure to be used with \nFT_Open_Face\n to indicate that the user wants to support incremental glyph loading. You should use it with \nFT_PARAM_TAG_INCREMENTAL\n as in the following example:\n\n  FT_Incremental_InterfaceRec  inc_int;\n  FT_Parameter                 parameter;\n  FT_Open_Args                 open_args;\n\n\n  // set up incremental descriptor\n  inc_int.funcs  = my_funcs;\n  inc_int.object = my_object;\n\n  // set up optional parameter\n  parameter.tag  = FT_PARAM_TAG_INCREMENTAL;\n  parameter.data = &inc_int;\n\n  // set up FT_Open_Args structure\n  open_args.flags      = FT_OPEN_PATHNAME | FT_OPEN_PARAMS;\n  open_args.pathname   = my_font_pathname;\n  open_args.num_params = 1;\n  open_args.params     = &parameter; // we use one optional argument\n\n  // open the font\n  error = FT_Open_Face( library, &open_args, index, &face );\n  ...\n\n\n\n\n\n\nFT_Incremental_Interface\n\u00b6\n\n\nDefined in FT_INCREMENTAL_H (freetype/ftincrem.h).\n\n\n\n\n\n  \ntypedef\n \nFT_Incremental_InterfaceRec\n*   \nFT_Incremental_Interface\n;\n\n\n\n\n\n\nA pointer to an \nFT_Incremental_InterfaceRec\n structure.",
            "title": "Incremental Loading"
        },
        {
            "location": "/ft2-incremental/index.html#incremental-loading",
            "text": "",
            "title": "Incremental Loading"
        },
        {
            "location": "/ft2-incremental/index.html#synopsis",
            "text": "This section contains various functions used to perform so-called \u2018incremental\u2019 glyph loading. This is a mode where all glyphs loaded from a given  FT_Face  are provided by the client application.  Apart from that, all other tables are loaded normally from the font file. This mode is useful when FreeType is used within another engine, e.g., a PostScript Imaging Processor.  To enable this mode, you must use  FT_Open_Face , passing an  FT_Parameter  with the  FT_PARAM_TAG_INCREMENTAL  tag and an  FT_Incremental_Interface  value. See the comments for  FT_Incremental_InterfaceRec  for an example.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   struct  FT_IncrementalRec_*   FT_Incremental ;   An opaque type describing a user-provided object used to implement \u2018incremental\u2019 glyph loading within FreeType. This is used to support embedded fonts in certain environments (e.g., PostScript interpreters), where the glyph data isn't in the font file, or must be overridden by different values.",
            "title": "FT_Incremental"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_metricsrec",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   struct   FT_Incremental_MetricsRec_\n  {\n     FT_Long   bearing_x;\n     FT_Long   bearing_y;\n     FT_Long   advance;\n     FT_Long   advance_v;     /* since 2.3.12 */\n\n  }  FT_Incremental_MetricsRec ;   A small structure used to contain the basic glyph metrics returned by the  FT_Incremental_GetGlyphMetricsFunc  method.",
            "title": "FT_Incremental_MetricsRec"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_metrics",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n    typedef   struct  FT_Incremental_MetricsRec_*   FT_Incremental_Metrics ;   A handle to an  FT_Incremental_MetricsRec  structure.",
            "title": "FT_Incremental_Metrics"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_getglyphdatafunc",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   FT_Error \n  (* FT_Incremental_GetGlyphDataFunc )(  FT_Incremental   incremental,\n                                       FT_UInt          glyph_index,\n                                       FT_Data *        adata );   A function called by FreeType to access a given glyph's data bytes during  FT_Load_Glyph  or  FT_Load_Char  if incremental loading is enabled.  Note that the format of the glyph's data bytes depends on the font file format. For TrueType, it must correspond to the raw bytes within the \u2018glyf\u2019 table. For PostScript formats, it must correspond to the  unencrypted  charstring bytes, without any  lenIV  header. It is undefined for any other format.",
            "title": "FT_Incremental_GetGlyphDataFunc"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_freeglyphdatafunc",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   void \n  (* FT_Incremental_FreeGlyphDataFunc )(  FT_Incremental   incremental,\n                                        FT_Data *        data );   A function used to release the glyph data bytes returned by a successful call to  FT_Incremental_GetGlyphDataFunc .",
            "title": "FT_Incremental_FreeGlyphDataFunc"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_getglyphmetricsfunc",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   FT_Error \n  (* FT_Incremental_GetGlyphMetricsFunc )\n                      (  FT_Incremental               incremental,\n                         FT_UInt                      glyph_index,\n                         FT_Bool                      vertical,\n                         FT_Incremental_MetricsRec   *ametrics );   A function used to retrieve the basic metrics of a given glyph index before accessing its data. This is necessary because, in certain formats like TrueType, the metrics are stored in a different place from the glyph images proper.",
            "title": "FT_Incremental_GetGlyphMetricsFunc"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_funcsrec",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   struct   FT_Incremental_FuncsRec_\n  {\n     FT_Incremental_GetGlyphDataFunc      get_glyph_data;\n     FT_Incremental_FreeGlyphDataFunc     free_glyph_data;\n     FT_Incremental_GetGlyphMetricsFunc   get_glyph_metrics;\n\n  }  FT_Incremental_FuncsRec ;   A table of functions for accessing fonts that load data incrementally. Used in  FT_Incremental_InterfaceRec .",
            "title": "FT_Incremental_FuncsRec"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_interfacerec",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   struct   FT_Incremental_InterfaceRec_\n  {\n     const   FT_Incremental_FuncsRec *  funcs;\n     FT_Incremental                   object;\n\n  }  FT_Incremental_InterfaceRec ;   A structure to be used with  FT_Open_Face  to indicate that the user wants to support incremental glyph loading. You should use it with  FT_PARAM_TAG_INCREMENTAL  as in the following example:   FT_Incremental_InterfaceRec  inc_int;\n  FT_Parameter                 parameter;\n  FT_Open_Args                 open_args;\n\n\n  // set up incremental descriptor\n  inc_int.funcs  = my_funcs;\n  inc_int.object = my_object;\n\n  // set up optional parameter\n  parameter.tag  = FT_PARAM_TAG_INCREMENTAL;\n  parameter.data = &inc_int;\n\n  // set up FT_Open_Args structure\n  open_args.flags      = FT_OPEN_PATHNAME | FT_OPEN_PARAMS;\n  open_args.pathname   = my_font_pathname;\n  open_args.num_params = 1;\n  open_args.params     = &parameter; // we use one optional argument\n\n  // open the font\n  error = FT_Open_Face( library, &open_args, index, &face );\n  ...",
            "title": "FT_Incremental_InterfaceRec"
        },
        {
            "location": "/ft2-incremental/index.html#ft_incremental_interface",
            "text": "Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).   \n   typedef   FT_Incremental_InterfaceRec *    FT_Incremental_Interface ;   A pointer to an  FT_Incremental_InterfaceRec  structure.",
            "title": "FT_Incremental_Interface"
        },
        {
            "location": "/ft2-truetype_engine/index.html",
            "text": "Docs\n \u00bb \nMiscellaneous\n \u00bb The TrueType Engine\n\n\n\n\nThe TrueType Engine\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains a function used to query the level of TrueType bytecode support compiled in this version of the library.\n\n\nFT_TrueTypeEngineType\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  \ntypedef\n \nenum\n  FT_TrueTypeEngineType_\n  {\n    \nFT_TRUETYPE_ENGINE_TYPE_NONE\n = 0,\n    \nFT_TRUETYPE_ENGINE_TYPE_UNPATENTED\n,\n    \nFT_TRUETYPE_ENGINE_TYPE_PATENTED\n\n\n  } \nFT_TrueTypeEngineType\n;\n\n\n\n\n\n\nA list of values describing which kind of TrueType bytecode engine is implemented in a given FT_Library instance. It is used by the \nFT_Get_TrueType_Engine_Type\n function.\n\n\nvalues\n\n\n\n\n\nFT_TRUETYPE_ENGINE_TYPE_NONE\n\n\nThe library doesn't implement any kind of bytecode interpreter.\n\n\n\n\nFT_TRUETYPE_ENGINE_TYPE_UNPATENTED\n\n\nDeprecated and removed.\n\n\n\n\nFT_TRUETYPE_ENGINE_TYPE_PATENTED\n\n\nThe library implements a bytecode interpreter that covers the full instruction set of the TrueType virtual machine (this was governed by patents until May 2010, hence the name).\n\n\n\n\n\n\n\nsince\n\n\n\n2.2\n\n\n\n\n\nFT_Get_TrueType_Engine_Type\n\u00b6\n\n\nDefined in FT_MODULE_H (freetype/ftmodapi.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_TrueTypeEngineType\n )\n  \nFT_Get_TrueType_Engine_Type\n( \nFT_Library\n  library );\n\n\n\n\n\n\nReturn an \nFT_TrueTypeEngineType\n value to indicate which level of the TrueType virtual machine a given library instance supports.\n\n\ninput\n\n\n\n\n\nlibrary\n\n\nA library instance.\n\n\n\n\n\n\n\nreturn\n\n\n\nA value indicating which level is supported.\n\n\nsince\n\n\n\n2.2",
            "title": "The TrueType Engine"
        },
        {
            "location": "/ft2-truetype_engine/index.html#the-truetype-engine",
            "text": "",
            "title": "The TrueType Engine"
        },
        {
            "location": "/ft2-truetype_engine/index.html#synopsis",
            "text": "This section contains a function used to query the level of TrueType bytecode support compiled in this version of the library.",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-truetype_engine/index.html#ft_truetypeenginetype",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n   typedef   enum   FT_TrueTypeEngineType_\n  {\n     FT_TRUETYPE_ENGINE_TYPE_NONE  = 0,\n     FT_TRUETYPE_ENGINE_TYPE_UNPATENTED ,\n     FT_TRUETYPE_ENGINE_TYPE_PATENTED \n\n  }  FT_TrueTypeEngineType ;   A list of values describing which kind of TrueType bytecode engine is implemented in a given FT_Library instance. It is used by the  FT_Get_TrueType_Engine_Type  function.",
            "title": "FT_TrueTypeEngineType"
        },
        {
            "location": "/ft2-truetype_engine/index.html#ft_get_truetype_engine_type",
            "text": "Defined in FT_MODULE_H (freetype/ftmodapi.h).   \n  FT_EXPORT(  FT_TrueTypeEngineType  )\n   FT_Get_TrueType_Engine_Type (  FT_Library   library );   Return an  FT_TrueTypeEngineType  value to indicate which level of the TrueType virtual machine a given library instance supports.",
            "title": "FT_Get_TrueType_Engine_Type"
        },
        {
            "location": "/ft2-ot_validation/index.html",
            "text": "Docs\n \u00bb \nMiscellaneous\n \u00bb OpenType Validation\n\n\n\n\nOpenType Validation\n\u00b6\n\n\nSynopsis\n\u00b6\n\n\nThis section contains the declaration of functions to validate some OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF, MATH).\n\n\nFT_OpenType_Validate\n\u00b6\n\n\nDefined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).\n\n\n\n\n\n  FT_EXPORT( \nFT_Error\n )\n  \nFT_OpenType_Validate\n( \nFT_Face\n    face,\n                        \nFT_UInt\n    validation_flags,\n                        \nFT_Bytes\n  *BASE_table,\n                        \nFT_Bytes\n  *GDEF_table,\n                        \nFT_Bytes\n  *GPOS_table,\n                        \nFT_Bytes\n  *GSUB_table,\n                        \nFT_Bytes\n  *JSTF_table );\n\n\n\n\n\n\nValidate various OpenType tables to assure that all offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\nvalidation_flags\n\n\nA bit field that specifies the tables to be validated. See \nFT_VALIDATE_OTXXX\n for possible values.\n\n\n\n\n\n\n\noutput\n\n\n\n\n\nBASE_table\n\n\nA pointer to the BASE table.\n\n\n\n\nGDEF_table\n\n\nA pointer to the GDEF table.\n\n\n\n\nGPOS_table\n\n\nA pointer to the GPOS table.\n\n\n\n\nGSUB_table\n\n\nA pointer to the GSUB table.\n\n\n\n\nJSTF_table\n\n\nA pointer to the JSTF table.\n\n\n\n\n\n\n\nreturn\n\n\n\nFreeType error code. 0\u00a0means success.\n\n\nnote\n\n\n\nThis function only works with OpenType fonts, returning an error otherwise.\n\n\nAfter use, the application should deallocate the five tables with \nFT_OpenType_Free\n. A NULL value indicates that the table either doesn't exist in the font, or the application hasn't asked for validation.\n\n\n\n\n\nFT_OpenType_Free\n\u00b6\n\n\nDefined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).\n\n\n\n\n\n  FT_EXPORT( \nvoid\n )\n  \nFT_OpenType_Free\n( \nFT_Face\n   face,\n                    \nFT_Bytes\n  table );\n\n\n\n\n\n\nFree the buffer allocated by OpenType validator.\n\n\ninput\n\n\n\n\n\nface\n\n\nA handle to the input face.\n\n\n\n\ntable\n\n\nThe pointer to the buffer that is allocated by \nFT_OpenType_Validate\n.\n\n\n\n\n\n\n\nnote\n\n\n\nThis function must be used to free the buffer allocated by \nFT_OpenType_Validate\n only.\n\n\n\n\n\nFT_VALIDATE_OTXXX\n\u00b6\n\n\nDefined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).\n\n\n\n\n\n#\ndefine\n \nFT_VALIDATE_BASE\n  0x0100\n#\ndefine\n \nFT_VALIDATE_GDEF\n  0x0200\n#\ndefine\n \nFT_VALIDATE_GPOS\n  0x0400\n#\ndefine\n \nFT_VALIDATE_GSUB\n  0x0800\n#\ndefine\n \nFT_VALIDATE_JSTF\n  0x1000\n#\ndefine\n \nFT_VALIDATE_MATH\n  0x2000\n\n#\ndefine\n \nFT_VALIDATE_OT\n  ( \nFT_VALIDATE_BASE\n | \\\n                          \nFT_VALIDATE_GDEF\n | \\\n                          \nFT_VALIDATE_GPOS\n | \\\n                          \nFT_VALIDATE_GSUB\n | \\\n                          \nFT_VALIDATE_JSTF\n | \\\n                          \nFT_VALIDATE_MATH\n )\n\n\n\n\n\n\nA list of bit-field constants used with \nFT_OpenType_Validate\n to indicate which OpenType tables should be validated.\n\n\nvalues\n\n\n\n\n\nFT_VALIDATE_BASE\n\n\nValidate BASE table.\n\n\n\n\nFT_VALIDATE_GDEF\n\n\nValidate GDEF table.\n\n\n\n\nFT_VALIDATE_GPOS\n\n\nValidate GPOS table.\n\n\n\n\nFT_VALIDATE_GSUB\n\n\nValidate GSUB table.\n\n\n\n\nFT_VALIDATE_JSTF\n\n\nValidate JSTF table.\n\n\n\n\nFT_VALIDATE_MATH\n\n\nValidate MATH table.\n\n\n\n\nFT_VALIDATE_OT\n\n\nValidate all OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF, MATH).",
            "title": "OpenType Validation"
        },
        {
            "location": "/ft2-ot_validation/index.html#opentype-validation",
            "text": "",
            "title": "OpenType Validation"
        },
        {
            "location": "/ft2-ot_validation/index.html#synopsis",
            "text": "This section contains the declaration of functions to validate some OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF, MATH).",
            "title": "Synopsis"
        },
        {
            "location": "/ft2-ot_validation/index.html#ft_opentype_validate",
            "text": "Defined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).   \n  FT_EXPORT(  FT_Error  )\n   FT_OpenType_Validate (  FT_Face     face,\n                         FT_UInt     validation_flags,\n                         FT_Bytes   *BASE_table,\n                         FT_Bytes   *GDEF_table,\n                         FT_Bytes   *GPOS_table,\n                         FT_Bytes   *GSUB_table,\n                         FT_Bytes   *JSTF_table );   Validate various OpenType tables to assure that all offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).",
            "title": "FT_OpenType_Validate"
        },
        {
            "location": "/ft2-ot_validation/index.html#ft_opentype_free",
            "text": "Defined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).   \n  FT_EXPORT(  void  )\n   FT_OpenType_Free (  FT_Face    face,\n                     FT_Bytes   table );   Free the buffer allocated by OpenType validator.",
            "title": "FT_OpenType_Free"
        },
        {
            "location": "/ft2-ot_validation/index.html#ft_validate_otxxx",
            "text": "Defined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).   \n# define   FT_VALIDATE_BASE   0x0100\n# define   FT_VALIDATE_GDEF   0x0200\n# define   FT_VALIDATE_GPOS   0x0400\n# define   FT_VALIDATE_GSUB   0x0800\n# define   FT_VALIDATE_JSTF   0x1000\n# define   FT_VALIDATE_MATH   0x2000\n\n# define   FT_VALIDATE_OT   (  FT_VALIDATE_BASE  | \\\n                           FT_VALIDATE_GDEF  | \\\n                           FT_VALIDATE_GPOS  | \\\n                           FT_VALIDATE_GSUB  | \\\n                           FT_VALIDATE_JSTF  | \\\n                           FT_VALIDATE_MATH  )   A list of bit-field constants used with  FT_OpenType_Validate  to indicate which OpenType tables should be validated.",
            "title": "FT_VALIDATE_OTXXX"
        }
    ]
}